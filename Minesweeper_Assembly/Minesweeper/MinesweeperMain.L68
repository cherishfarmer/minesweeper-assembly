00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 7/17/2025 7:35:54 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Minesweeper Main
00000000                             3  * Written by : Cherish Farmer
00000000                             4  * Date       : 05/29/25
00000000                             5  * Description: Simulates the game Minesweeper
00000000                             6  *-----------------------------------------------------------
00000000                             7  
00000000                             8  * COLORS
00000000  =00C0C0C0                  9  LIGHT_GREY              EQU     $c0c0c0
00000000  =007C7C7C                 10  DARK_GREY               EQU     $7c7c7c
00000000  =00FCFCFC                 11  HIGHLIGHT               EQU     $fcfcfc
00000000  =00000000                 12  BLACK                   EQU     $000000
00000000  =000000FE                 13  CLICKED_BOMB_COLOR      EQU     $000000fe
00000000  =000000FE                 14  FLAG_RED                EQU     $000000fe
00000000  =00B04D10                 15  WINDOWS_BLUE            EQU     $b04d10
00000000  =001C15AC                 16  SEGMENT_BRIGHT_RED      EQU     $1c15ac
00000000  =00161445                 17  SEGMENT_DARK_RED        EQU     $161445
00000000                            18  
00000000                            19  * NUMBER TILE COLORS
00000000  =00000000                 20  PADDING_COLOR           EQU     0    
00000000  =00FD0000                 21  ONE_COLOR               EQU     $00fd0000
00000000  =00007E01                 22  TWO_COLOR               EQU     $00007e01
00000000  =000000FE                 23  THREE_COLOR             EQU     $000000fe
00000000  =00800101                 24  FOUR_COLOR              EQU     $00800101
00000000  =00010181                 25  FIVE_COLOR              EQU     $00010181
00000000  =00808000                 26  SIX_COLOR               EQU     $00808000
00000000  =00000000                 27  SEVEN_COLOR             EQU     $00000000
00000000  =00808080                 28  EIGHT_COLOR             EQU     $00808080 
00000000                            29  
00000000                            30  * NUMBER TILE POSITIONS AND CALCULATION VALUES
00000000  =00000004                 31  TEXT_POS_DIVISOR        EQU     4    
00000000  =00000002                 32  MULTIPLY_4              EQU     2      
00000000  =00000002                 33  DIVIDE_4                EQU     2
00000000  =00000002                 34  SUBTRACT_2              EQU     2
00000000  =00000030                 35  ASCII_OFFSET            EQU     $30
00000000  =00000010                 36  CLICKED_OFFSET          EQU     $10
00000000                            37  
00000000                            38  * TEXT SETTINGS
00000000  =02140001                 39  TEXT_SETTINGS           EQU     $02140001
00000000  =00FFFFFF                 40  DEFAULT_TEXT_COLOR      EQU     $00FFFFFF
00000000  =00000000                 41  DEFAULT_FONT            EQU     $00000000
00000000  =00000002                 42  HOW_TO_LOADING_POS_X    EQU     2
00000000  =00000299                 43  HOW_TO_LOADING_POS_Y    EQU     665
00000000                            44  
00000000                            45  * SCREEN SETTINGS
00000000  =000002BC                 46  SCREEN_HEIGHT           EQU     700
00000000  =00000384                 47  SCREEN_WIDTH            EQU     900
00000000  =038402BC                 48  SCREEN_VALUE            EQU     (SCREEN_WIDTH<<16)+SCREEN_HEIGHT
00000000                            49  
00000000                            50  * DRAWING PEN WIDTH
00000000  =00000004                 51  PEN_WIDTH               EQU     4
00000000  =00000003                 52  BOMB_PEN_WIDTH          EQU     3
00000000  =00000003                 53  FLAG_POLE_WIDTH         EQU     3
00000000  =00000005                 54  FLAG_WIDTH              EQU     5
00000000  =00000002                 55  TOP_UI_PEN              EQU     PEN_WIDTH/2
00000000  =00000004                 56  SCREEN_BORDER_WIDTH     EQU     4
00000000                            57  
00000000  =00000002                 58  NUM_FLAG_FILLS          EQU     2
00000000                            59  
00000000                            60  * KEY CODES
00000000  =00000008                 61  RETURN_TIME             EQU     8
00000000  =0000000B                 62  CLEAR_SCREEN            EQU     11
00000000  =0000000E                 63  DISPLAY_STRING          EQU     14
00000000  =00000015                 64  SET_TEXT_COLOR          EQU     21
00000000  =00000017                 65  TIME_DELAY              EQU     23
00000000  =00000021                 66  SET_SCREEN              EQU     33
00000000  =0000003D                 67  READ_MOUSE              EQU     61
00000000  =00000049                 68  PLAY_SOUND              EQU     73
00000000  =00000050                 69  SET_PEN_COLOR           EQU     80
00000000  =00000051                 70  SET_FILL_COLOR          EQU     81
00000000  =00000052                 71  DRAW_PIXEL              EQU     82
00000000  =00000054                 72  DRAW_LINE               EQU     84
00000000  =00000057                 73  DRAW_RECT_FILLED        EQU     87  *TODO: go through files and make sure only one of these is being used 
00000000  =00000057                 74  DRAW_FILLED_RECT        EQU     87
00000000  =00000058                 75  DRAW_FILLED_ELLIPSE     EQU     88
00000000  =00000058                 76  DRAW_ELLIPSE_FILLED     EQU     88  *TODO: same as above
00000000  =00000059                 77  FLOOD_FILL_AREA         EQU     89
00000000  =0000005A                 78  DRAW_RECT_UNFILLED      EQU     90
00000000  =0000005C                 79  DOUBLE_BUFFERING_CODE   EQU     92
00000000  =0000005D                 80  SET_PEN_WIDTH           EQU     93
00000000  =0000005E                 81  REPAINT_SCREEN          EQU     94
00000000  =0000005F                 82  DRAW_TEXT               EQU     95 
00000000                            83  
00000000                            84  * DOUBLE BUFFERING VALUES
00000000  =00000011                 85  DOUBLE_BUFFERING_ON     EQU     17
00000000  =00000010                 86  DOUBLE_BUFFERING_OFF    EQU     16
00000000                            87  
00000000                            88  * CLEAR SCREEN/TEXT VALUES
00000000  =0000FF00                 89  CLEAR_SCREEN_VAL        EQU     $FF00
00000000  =00000003                 90  CLEAR_TEXT_START        EQU     3
00000000  =000000C8                 91  CLEAR_TEXT_END_X        EQU     200
00000000  =00000014                 92  CLEAR_TEXT_END_Y        EQU     20
00000000                            93  
00000000                            94  * TILE POSITIONS
00000000  =00000028                 95  TILE_SIZE               EQU     40
00000000  =000000FA                 96  START_X                 EQU     250
00000000  =000000C8                 97  START_Y                 EQU     200
00000000  =00000122                 98  END_X                   EQU     START_X+TILE_SIZE
00000000  =000000F0                 99  END_Y                   EQU     START_Y+TILE_SIZE
00000000                           100  
00000000                           101  * TILE/PRIMITIVE SIZES
00000000  =00000014                102  TILE_HALF               EQU     TILE_SIZE/2
00000000  =0000000A                103  TILE_QUARTER            EQU     TILE_SIZE/4
00000000  =00000005                104  TILE_EIGTH              EQU     TILE_SIZE/8
00000000  =00000002                105  TILE_SIXTEENTH          EQU     TILE_SIZE/16
00000000  =00000014                106  BOMB_WIDTH              EQU     TILE_SIZE-TILE_HALF
00000000  =00000002                107  HALF_WIDTH              EQU     2
00000000                           108  
00000000                           109  * GRID
00000000  =00000009                110  NUM_ROW                 EQU     9
00000000  =00000009                111  NUM_COL                 EQU     9
00000000  =00000004                112  GRID_BOX_WIDTH          EQU     PEN_WIDTH
00000000  =00000004                113  BORDER_OFFSET           EQU     PEN_WIDTH
00000000  =00000190                114  GRID_SIDE_LENGTH        EQU     TILE_SIZE*(NUM_COL+1)
00000000  =00000010                115  GRID_OUTER_OFFSET       EQU     PEN_WIDTH*4
00000000  =00000004                116  WINDOW_OFFSET           EQU     PEN_WIDTH
00000000  =00000032                117  TOP_UI_HEIGHT           EQU     50
00000000  =00000190                118  TOP_UI_WIDTH            EQU     GRID_SIDE_LENGTH
00000000  =00000004                119  SCREEN_OFFSET           EQU     4
00000000                           120  
00000000  =000000C8                121  GRID_TOP                EQU     START_Y
00000000  =000000FA                122  GRID_LEFT               EQU     START_X
00000000  =0000028A                123  GRID_RIGHT              EQU     START_X+GRID_SIDE_LENGTH
00000000  =00000258                124  GRID_BOTTOM             EQU     START_Y+GRID_SIDE_LENGTH
00000000  =00C800FA                125  GRID_TOP_LEFT           EQU     (GRID_TOP<<16)+GRID_LEFT
00000000  =0258028A                126  GRID_BOTTOM_RIGHT       EQU     (GRID_BOTTOM<<16)+GRID_RIGHT
00000000                           127  
00000000                           128  * CALCULATION VALUES
00000000  =FFFFFFFF                129  ONE_BEFORE              EQU     -1
00000000  =00000000                130  CLEAR_ADDRESS           EQU     0
00000000  =FFFFFFFF                131  RESET_VAL               EQU     $FFFFFFFF
00000000  =00000002                132  ADDRESS_SPACE           EQU     2
00000000  =00000024                133  NUM_BYTES_SKIP          EQU     NUM_COL*4
00000000  =00000004                134  SHIFT_FOUR              EQU     4
00000000  =00000001                135  RIGHT_MOST_BIT          EQU     1
00000000  =00000002                136  SHIFT_FOR_BITS          EQU     2
00000000  =0000000A                137  DECIMAL                 EQU     10
00000000  =00000007                138  NUM_BIT_FLAGS           EQU     7
00000000  =00000001                139  SHIFT_FOR_WORD          EQU     1
00000000  =00000002                140  GET_X_COORDINATE        EQU     2
00000000                           141  
00000000                           142  * GAME SETTINGS
00000000  =0000000F                143  NUM_BOMBS               EQU     15
00000000  =00000000                144  START_TIME              EQU     0
00000000                           145  
00000000                           146  * TILE TYPES
00000000  =0000000A                147  BOMB_TILE               EQU     $A
00000000  =00000000                148  BLANK_TILE              EQU     00
00000000  =00000002                149  FLAG_TILE               EQU     2
00000000  =0000000A                150  CORRECT_FLAG            EQU     $0A
00000000  =000000FF                151  UNSET_TILE              EQU     $FF
00000000  =00000009                152  TILE_MAX_PLUS_ONE       EQU     9
00000000                           153  
00000000                           154  * TILE OFFSETS
00000000  =00000010                155  CLICKED_OFFSET          EQU     $10
00000000  =00000020                156  FLAGGED_OFFSET          EQU     $20
00000000                           157  
00000000                           158  * TILE STATES/CLICKS
00000000  =00000001                159  TILE_CLICKED            EQU     1
00000000  =00000001                160  REVEAL_CLICK            EQU     01
00000000  =00000002                161  FLAG_CLICK              EQU     02
00000000  =00000009                162  DOUBLE_CLICK_LEFT       EQU     9       ; double click on main menu
00000000  =00000000                163  NO_CLICK                EQU     00      ; mouse is not currently clicking
00000000  =0000000A                164  DOUBLE_CLICK_RIGHT      EQU     $A      ; no double clicking
00000000  =00000001                165  REVEAL_CLICK            EQU     01      ; left click
00000000  =00000002                166  FLAG_CLICK              EQU     02      ; right click
00000000                           167  
00000000                           168  * GAME STATES
00000000  =00000000                169  TITLE_SCREEN            EQU     00
00000000  =00000001                170  IN_GAME                 EQU     01
00000000  =00000002                171  END_GAME                EQU     02
00000000  =00000003                172  RESTART_GAME            EQU     03
00000000                           173  
00000000  =00000000                174  NO_TILES_LEFT           EQU     00
00000000  =00000000                175  NO_FLAGS_LEFT           EQU     0
00000000  =00000000                176  NO_BOMBS_LEFT           EQU     0
00000000  =00000000                177  NO_FLAGS                EQU     0000
00000000                           178  
00000000                           179  * RESTART BUTTON POSITIONS (SMILEY)
00000000  =00000091                180  RESTART_TOP             EQU     $91
00000000  =000001AA                181  RESTART_LEFT            EQU     $1AA
00000000  =000000B9                182  RESTART_BOTTOM          EQU     RESTART_TOP+TILE_SIZE
00000000  =000001D2                183  RESTART_RIGHT           EQU     RESTART_LEFT+TILE_SIZE
00000000  =009101AA                184  RESTART_TOP_LEFT        EQU     (RESTART_TOP<<16)+RESTART_LEFT
00000000  =00B901D2                185  RESTART_BOTTOM_RIGHT    EQU     (RESTART_BOTTOM<<16)+RESTART_RIGHT
00000000                           186  
00000000                           187  * MAIN MENU BUTTON POSITIONS (X TAB)
00000000  =0000006C                188  X_TOP                   EQU     108
00000000  =0000025A                189  X_LEFT                  EQU     602
00000000  =0000007F                190  X_BOTTOM                EQU     X_TOP+19
00000000  =00000294                191  X_RIGHT                 EQU     X_LEFT+58
00000000  =006C025A                192  X_TOP_LEFT              EQU     (X_TOP<<16)+X_LEFT
00000000  =007F0294                193  X_BOTTOM_RIGHT          EQU     (X_BOTTOM<<16)+X_RIGHT
00000000                           194  
00000000                           195  * MYSTERY BUTTON POSITIONS (? ICON)
00000000  =00000000                196  MYSTERY_TOP             EQU     0
00000000  =00000000                197  MYSTERY_LEFT            EQU     0
00000000  =00000046                198  MYSTERY_BOTTOM          EQU     70
00000000  =0000003C                199  MYSTERY_RIGHT           EQU     60
00000000  =00000000                200  MYSTERY_TOP_LEFT        EQU     (MYSTERY_TOP<<16)+MYSTERY_LEFT
00000000  =0046003C                201  MYSTERY_BOTTOM_RIGHT    EQU     (MYSTERY_BOTTOM<<16)+MYSTERY_RIGHT
00000000                           202  
00000000                           203  * START BUTTON POSITIONS (MINESWEEPER ICON MAIN MENU)
00000000  =000001A4                204  START_TOP               EQU     420
00000000  =0000019F                205  START_LEFT              EQU     415
00000000  =000001D8                206  START_BOTTOM            EQU     472
00000000  =000001E3                207  START_RIGHT             EQU     483
00000000  =01A4019F                208  START_TOP_LEFT          EQU     (START_TOP<<16)+START_LEFT
00000000  =01D801E3                209  START_BOTTOM_RIGHT      EQU     (START_BOTTOM<<16)+START_RIGHT
00000000                           210  
00000000                           211  * HOW TO PLAY POSITIONS (BOTTOM LEFT -- WHERE WINDOWS START BUTTON IS)
00000000  =000002A8                212  HOW_TO_BUTTON_TOP       EQU     680
00000000  =00000000                213  HOW_TO_BUTTON_LEFT      EQU     0
00000000  =000002BC                214  HOW_TO_BUTTON_BOTTOM    EQU     700
00000000  =00000042                215  HOW_TO_BUTTON_RIGHT     EQU     66
00000000  =02A80000                216  HOW_TO_BUTTON_TOP_LEFT          EQU     (HOW_TO_BUTTON_TOP<<16)+HOW_TO_BUTTON_LEFT
00000000  =02BC0042                217  HOW_TO_BUTTON_BOTTOM_RIGHT      EQU     (HOW_TO_BUTTON_BOTTOM<<16)+HOW_TO_BUTTON_RIGHT
00000000                           218  
00000000                           219  * HOW TO PLAY STATES
00000000  =00000000                220  HOW_TO_OFF              EQU     00
00000000  =00000001                221  HOW_TO_ON               EQU     01
00000000                           222  
00000000                           223  * FIRST TILE CLICK STATES
00000000  =00000001                224  FIRST_TILE_CLICKED      EQU     01
00000000  =00000000                225  FIRST_TILE_UNCLICKED    EQU     00
00000000                           226  
00000000                           227  * BFS BITMASKS
00000000  =000000D0                228  TOP_LEFT_TILE           EQU     %11010000
00000000  =000000F8                229  TOP_TILE                EQU     %11111000
00000000  =00000068                230  TOP_RIGHT_TILE          EQU     %01101000
00000000  =0000006B                231  RIGHT_TILE              EQU     %01101011
00000000  =0000000B                232  BOTTOM_RIGHT_TILE       EQU     %00001011
00000000  =0000001F                233  BOTTOM_TILE             EQU     %00011111
00000000  =00000016                234  BOTTOM_LEFT_TILE        EQU     %00010110
00000000  =000000D6                235  LEFT_TILE               EQU     %11010110
00000000  =000000FF                236  MIDDLE_TILE             EQU     %11111111
00000000                           237  
00000000                           238  * TILE POSITIONS -- USED FOR BFS SEARCHING NEARBY TILES
00000000  =FFFFFFF6                239  TILE_POS_ONE            EQU     -NUM_COL-1
00000000  =FFFFFFF7                240  TILE_POS_TWO            EQU     -NUM_COL
00000000  =FFFFFFF8                241  TILE_POS_THREE          EQU     -NUM_COL+1
00000000  =FFFFFFFF                242  TILE_POS_FOUR           EQU     -1
00000000  =00000001                243  TILE_POS_FIVE           EQU     1
00000000  =00000008                244  TILE_POS_SIX            EQU     NUM_COL-1
00000000  =00000009                245  TILE_POS_SEVEN          EQU     NUM_COL
00000000  =0000000A                246  TILE_POS_EIGHT          EQU     NUM_COL+1
00000000  =00000008                247  NUM_TILES_SURROUNDING   EQU     8 
00000000  =00000012                248  SURROUNDING_LENGTH      EQU     18
00000000                           249  
00000000                           250  * BOMB TILE EVENT STATES/CHECKS
00000000  =0000FFFF                251  CLICKED_BOMB_UNSTORED   EQU     $FFFF
00000000  =00000010                252  CLICKED_OFFSET          EQU     $10
00000000  =0000001A                253  CLICKED_BOMB            EQU     $1A
00000000  =0000000A                254  UNCLICKED_BOMB          EQU     $0A
00000000                           255  
00000000                           256  * TIME
00000000  =00000001                257  MOUSE_CLICK_DELAY       EQU     1
00000000  =00000150                258  SS_TIMER_OFFSET         EQU     336
00000000  =00000064                259  ONE_SECOND              EQU     100
00000000  =000003E7                260  CLOCK_LOOP              EQU     999
00000000  =00000007                261  SHIFT_DELAY             EQU     7
00000000                           262  
00000000                           263  * SEVEN SEGMENT DISPLAY
00000000  =0000003F                264  DISPLAY_ZERO            EQU     $3f
00000000  =00000006                265  DISPLAY_ONE             EQU     $06
00000000  =0000005B                266  DISPLAY_TWO             EQU     $5b
00000000  =0000004F                267  DISPLAY_THREE           EQU     $4f
00000000  =00000066                268  DISPLAY_FOUR            EQU     $66
00000000  =0000006D                269  DISPLAY_FIVE            EQU     $6d
00000000  =0000007D                270  DISPLAY_SIX             EQU     $7d
00000000  =00000007                271  DISPLAY_SEVEN           EQU     $07
00000000  =0000007F                272  DISPLAY_EIGHT           EQU     $7f
00000000  =0000006F                273  DISPLAY_NINE            EQU     $6f
00000000                           274  
00000000  =00000064                275  LEFT_DIGIT              EQU     $64
00000000  =0000000A                276  MIDDLE_DIGIT            EQU     $A
00000000  =00000009                277  RIGHT_DIGIT             EQU     $9
00000000  =00000014                278  MIDDLE_OFFSET           EQU     20
00000000  =0000003C                279  RIGHT_OFFSET            EQU     60
00000000  =00000168                280  TIMER_ADDRESS_OFFSET    EQU     360
00000000                           281  
00000000  =00000003                282  SEGMENT_WIDTH           EQU     3
00000000  =0000000A                283  SEGMENT_LENGTH          EQU     10
00000000  =00000003                284  SS_X_OFFSET             EQU     3
00000000  =00000006                285  SS_Y_OFFSET             EQU     6
00000000                           286  
00000000                           287  * SMILEY POSITIONS
00000000  =00000004                288  SMILEY_X_OFFSET         EQU     4
00000000  =00000005                289  SMILEY_Y_OFFSET         EQU     5
00000000  =00000006                290  SMILEY_EXPRESS_OFFSET   EQU     6
00000000                           291  
00000000                           292  * SUNGLASSES POSITIONS/DRAWING/PHYSICS
00000000  =000001B1                293  SUNGLASSES_X            EQU     433
00000000  =00000096                294  SUNGLASSES_Y_START      EQU     150
00000000  =0000009E                295  SUNGLASSES_Y_RECOIL     EQU     158
00000000  =000000A0                296  SUNGLASSES_Y_END        EQU     160
00000000  =0000001A                297  SUNGLASSES_LENGTH       EQU     26
00000000  =00000003                298  SUNGLASSES_SIDE_LENGTH  EQU     3
00000000  =00000008                299  SUNGLASSES_EYE_LENGTH   EQU     8
00000000  =00000006                300  SUNGLASSES_MID_LENGTH   EQU     6
00000000  =00000001                301  SUNGLASSES_SHADE_OFFSET EQU     1
00000000  =00000002                302  SUNGLASSES_PEN_WIDTH    EQU     2
00000000  =00000001                303  FIXED_POINT_SHIFT       EQU     1
00000000  =00000001                304  SUNGLASSES_ACCELERATION EQU     1
00000000                           305  
00001000                           306      ORG    $1000
00001000                           307      
00001000                           308  START:                  ; first instruction of program   
00001000  4EB9 00001D8E            309      jsr     LoadingMainMenu
00001006  4EB9 00003342            310      jsr     LoadMenu
0000100C                           311      
0000100C                           312  StartAfterGoMain
0000100C  4EB9 00001E0C            313      jsr     MainMenuLoaded
00001012                           314      
00001012                           315  RestartGame
00001012  4EB9 000029D4            316      jsr     ClearMemory
00001018  4EB9 000034C0            317      jsr     LoadPopUp 
0000101E  4EB9 00001DDC            318      jsr     SetBackground
00001024  4EB9 000020F4            319      jsr     DrawGridBox
0000102A  4EB9 0000267E            320      jsr     DrawScreenBorder
00001030  4EB9 00002294            321      jsr     DrawSmileyStart
00001036  4EB9 00001FCC            322      jsr     PrepInitialBoard
0000103C  4EB9 00002ECC            323      jsr     UpdateSevenSegment
00001042  4EB9 00001E20            324      jsr     GameLoaded
00001048                           325       
00001048                           326      ; first click generates map   
00001048                           327  WaitForFirstClick
00001048  4EB9 00001BF4            328      jsr     ReadMouseInput
0000104E  4EB9 00002C40            329      jsr     ClearRegisters
00001054                           330  
00001054  0CB9 00000000 00001B9E   331      cmp.l   #TITLE_SCREEN,(Game_State)
0000105E  6700 0094                332      beq     GoMainMenu
00001062                           333      
00001062  4EB9 000022E8            334      jsr     SmileyNeutral
00001068                           335      
00001068  0CB9 00000003 00001B9E   336      cmp.l   #RESTART_GAME,(Game_State)
00001072  679E                     337      beq     RestartGame
00001074                           338      
00001074                           339      ; delay when game starts (TODO: rename since delay was removed)
00001074                           340      ; TODO: check what last click type was and compare to determine if bitmap needs to be updated
00001074                           341  StartDelay
00001074  4EB9 000022E8            342      jsr     SmileyNeutral
0000107A  45F9 00001CCE            343      lea     First_Tile_Click,a2
00001080  0C92 00000001            344      cmp.l   #FIRST_TILE_CLICKED,(a2)
00001086  66C0                     345      bne     WaitForFirstClick    
00001088                           346  
00001088                           347      ; continuously reads where user is clicking
00001088                           348  ReadMouseLoop
00001088  4EB9 00002ECC            349      jsr     UpdateSevenSegment 
0000108E  4EB9 00002C40            350      jsr     ClearRegisters 
00001094  4EB9 00001BF4            351      jsr     ReadMouseInput
0000109A  4EB9 00002C40            352      jsr     ClearRegisters
000010A0  4EB9 0000247A            353      jsr     GameStateHandler
000010A6                           354      
000010A6  0CB9 00000001 00001B9E   355      cmp.l   #IN_GAME,(Game_State)
000010B0  67C2                     356      beq     StartDelay
000010B2                           357      
000010B2  0CB9 00000000 00001B9E   358      cmp.l   #TITLE_SCREEN,(Game_State)
000010BC  6700 0036                359      beq     GoMainMenu
000010C0                           360      
000010C0  0CB9 00000002 00001B9E   361      cmp.l   #END_GAME,(Game_State)
000010CA  6700 0006                362      beq     WaitRestart
000010CE  6600 FF42                363      bne     RestartGame
000010D2                           364      
000010D2                           365  WaitRestart
000010D2                           366  
000010D2  4EB9 00002AC2            367      jsr     CheckRestart
000010D8  0C94 00000003            368      cmp.l   #RESTART_GAME,(a4)
000010DE  6700 FF32                369      beq     RestartGame
000010E2                           370      
000010E2  4EB9 00002B08            371      jsr     CheckXOut   
000010E8  0C94 00000000            372      cmp.l   #TITLE_SCREEN,(a4)
000010EE  6700 0004                373      beq     GoMainMenu
000010F2                           374      
000010F2  66DE                     375      bne     WaitRestart
000010F4                           376      
000010F4                           377  GoMainMenu
000010F4                           378  
000010F4                           379      ; set game mode to title screen and cover up 
000010F4                           380      
000010F4  4EB9 00001E44            381      jsr     LoadingNewGame
000010FA  4EB9 0000362C            382      jsr     LoadMainMenuRestart
00001100                           383      
00001100  49F9 00001B9E            384      lea     Game_State,a4
00001106  0C94 00000000            385      cmp.l   #TITLE_SCREEN,(a4)
0000110C  6700 FEFE                386      beq     StartAfterGoMain
00001110  66C0                     387      bne     WaitRestart
00001112                           388      
00001112  FFFF FFFF                389      SIMHALT             ; halt simulator
00001116                           390  
00001116                           391  * Map start and end are used to get grid size TODO: this is probably not necessary, can adjust code
00001116                           392  Map_Start
00001116                           393  * Grid Data - 81 tiles for 9 x 9 grid (each tile is a byte)
00001116                           394  Tiles                           ds.b    81
00001167                           395  Map_End
00001167                           396  
00001167                           397  * Coordinates of each tile in grid, every odd word is y, every even word is x
00001168                           398  Coordinates                     ds.l    162
000013F0                           399  
000013F0                           400  * Addresses of bombs in map
000013F0                           401  Bombs                           ds.l    162
00001678                           402  * Size for bombs stack
00001678= 0000                     403  Bombs_Offset                    dc.w    00
0000167A                           404  
0000167A                           405  * Stack for BFS when blank tile clicked
0000167A                           406  BFS_Stack                       ds.l    162
00001902                           407  * Size for BFS stack
00001902= 0000                     408  BFS_Stack_Offset                dc.w    00
00001904                           409  
00001904                           410  * Addresses of flags in map (used to check if any flags are incorrect if game is lost)
00001904                           411  Incorrect_Flags                 ds.l    162
00001B8C                           412  * Size for flags stack
00001B8C= 0000                     413  Incorrect_Flags_Offset          dc.w    00
00001B8E                           414  
00001B8E                           415  * Used to keep track of how many bombs have been flagged to determine if the game has been won
00001B8E= 000F                     416  Real_Bomb_Counter               dc.w    NUM_BOMBS
00001B90                           417  * Used to display how many bombs left, decremented anytime a flag is placed even if it is incorrect
00001B90= 000F                     418  Fake_Bomb_Counter               dc.w    NUM_BOMBS
00001B92                           419  * Found from grid size - num bombs, used to determine if game has been won
00001B92= 00000042                 420  Non_Bomb_Tiles                  dc.l    (NUM_ROW*NUM_COL)-NUM_BOMBS
00001B96                           421  
00001B96                           422  * Used to keep track of time
00001B96= 00000000                 423  Current_Time                    dc.l    START_TIME
00001B9A                           424  * Used to calculate time throughout game
00001B9A                           425  Start_Since_Midnight            ds.l    1
00001B9E                           426  
00001B9E                           427  * Used to keep track of game state
00001B9E                           428  * - 00 - title screen (default)
00001B9E                           429  * - 01 - in game
00001B9E                           430  * - 02 - end game 
00001B9E                           431  * - 03 - reset game
00001B9E= 00000000                 432  Game_State                      dc.l    TITLE_SCREEN
00001BA2                           433  
00001BA2                           434  * Keeps track if how to is open or closed (can toggle)
00001BA2                           435  * - 00 - closed (default)
00001BA2                           436  * - 01 - open
00001BA2= 00000000                 437  How_To_State                    dc.l    HOW_TO_OFF
00001BA6                           438  
00001BA6                           439  
00001BA6                           440  * Includes
00001BA6                           441      include 'DrawBlankTile.X68'
00001BA6                           442  
00001BA6                           443  DrawBlankTile
00001BA6                           444  
00001BA6                           445      ; set pen width
00001BA6  4280                     446      clr.l   d0
00001BA8  103C 005D                447      move.b  #SET_PEN_WIDTH,d0
00001BAC  323C 0004                448      move.w  #PEN_WIDTH,d1
00001BB0  4E4F                     449      trap    #15
00001BB2                           450      
00001BB2                           451      ; draw dark grey unfilled rectangle
00001BB2  103C 0050                452      move.b  #SET_PEN_COLOR,d0
00001BB6  223C 007C7C7C            453      move.l  #DARK_GREY,d1
00001BBC  4E4F                     454      trap    #15
00001BBE                           455      
00001BBE                           456      ; horizontal dark line
00001BBE  103C 0054                457      move.b  #DRAW_LINE,d0
00001BC2  2203                     458      move.l  d3,d1
00001BC4  4E4F                     459      trap    #15
00001BC6                           460      
00001BC6                           461      ; vertical dark line
00001BC6  3205                     462      move.w  d5,d1
00001BC8  3A02                     463      move.w  d2,d5
00001BCA  3404                     464      move.w  d4,d2
00001BCC  4E4F                     465      trap    #15
00001BCE                           466      
00001BCE                           467      ; move values back
00001BCE  3405                     468      move.w  d5,d2
00001BD0  3A01                     469      move.w  d1,d5
00001BD2                           470      
00001BD2                           471      ; draw two white highlight lines, one horizontal and one vertical (determine tile length)
00001BD2  103C 0050                472      move.b  #SET_PEN_COLOR,d0
00001BD6  223C 00FCFCFC            473      move.l  #HIGHLIGHT,d1
00001BDC  4E4F                     474      trap    #15
00001BDE                           475      
00001BDE                           476      ; set starting position for highlights
00001BDE  2205                     477      move.l  d5,d1
00001BE0                           478      
00001BE0                           479      ; store end y into d5 to save for vertical line
00001BE0  3A04                     480      move.w  d4,d5
00001BE2                           481      
00001BE2                           482      ; move d2 into d4 for horizontal line
00001BE2  3802                     483      move.w  d2,d4
00001BE4                           484      
00001BE4                           485      ; horizontal line
00001BE4  103C 0054                486      move.b  #DRAW_LINE,d0
00001BE8  4E4F                     487      trap    #15
00001BEA                           488      
00001BEA                           489      ; move d1 into d3 and d4 back to d5 for horizontal line
00001BEA  3C03                     490      move.w  d3,d6
00001BEC  3601                     491      move.w  d1,d3
00001BEE  3805                     492      move.w  d5,d4
00001BF0                           493      
00001BF0                           494      ; vertical line
00001BF0  4E4F                     495      trap    #15
00001BF2                           496      
00001BF2  4E75                     497      rts    
00001BF4                           498  
00001BF4                           499  
00001BF4                           500  
00001BF4                           501  
00001BF4                           502  
00001BF4                           503  -------------------- end include --------------------
00001BF4                           504      include 'ReadMouse.X68'
00001BF4                           505  
00001BF4                           506  
00001BF4  =0000003D                507  READ_MOUSE              EQU     61
00001BF4                           508  
00001BF4  =00000000                509  TITLE_SCREEN            EQU     00
00001BF4  =00000001                510  IN_GAME                 EQU     01
00001BF4  =00000002                511  END_GAME                EQU     02
00001BF4  =00000003                512  RESTART_GAME            EQU     03
00001BF4                           513  
00001BF4  =00000000                514  NO_CLICK                EQU     00      ; mouse is not currently clicking
00001BF4  =0000000A                515  DOUBLE_CLICK_RIGHT      EQU     $A      ; no double clicking
00001BF4  =00000001                516  REVEAL_CLICK            EQU     01
00001BF4  =00000002                517  FLAG_CLICK              EQU     02
00001BF4                           518  
00001BF4  =000000C8                519  GRID_TOP                EQU     START_Y
00001BF4  =000000FA                520  GRID_LEFT               EQU     START_X
00001BF4  =0000028A                521  GRID_RIGHT              EQU     START_X+GRID_SIDE_LENGTH
00001BF4  =00000258                522  GRID_BOTTOM             EQU     START_Y+GRID_SIDE_LENGTH
00001BF4  =00C800FA                523  GRID_TOP_LEFT           EQU     (GRID_TOP<<16)+GRID_LEFT
00001BF4  =0258028A                524  GRID_BOTTOM_RIGHT       EQU     (GRID_BOTTOM<<16)+GRID_RIGHT
00001BF4                           525  
00001BF4  =00000000                526  CLEAR_ADDRESS           EQU     0
00001BF4                           527  
00001BF4                           528  
00001BF4                           529      ; read mouse input
00001BF4                           530  ReadMouseInput
00001BF4                           531      
00001BF4                           532      ; check if player is clicking any buttons (restart game, x out, how to play)
00001BF4                           533      
00001BF4                           534      ; check if player clicks restart (smiley guy)
00001BF4  4EB9 00002AC2            535      jsr     CheckRestart
00001BFA  0C94 00000003            536      cmp.l   #RESTART_GAME,(a4)
00001C00  6700 00C2                537      beq     ReturnToGameLoop
00001C04                           538      
00001C04                           539      ; check if player xs out to main menu (x pop up)
00001C04  4EB9 00002B08            540      jsr     CheckXOut   
00001C0A  0C94 00000000            541      cmp.l   #TITLE_SCREEN,(a4)
00001C10  6700 00B2                542      beq     ReturnToGameLoop
00001C14                           543      
00001C14                           544      ; check if player clicked how to play button
00001C14  4EB9 00002B4E            545      jsr     CheckHowToPlay
00001C1A                           546      
00001C1A                           547      ; check if player clicked mystery
00001C1A  4EB9 00002B9C            548      jsr     CheckMystery
00001C20                           549     
00001C20  4EB9 00002C40            550      jsr     ClearRegisters   
00001C26                           551     
00001C26                           552      ; if at this point, read mouse input like the player is clicking a tile on the grid
00001C26  103C 003D                553      move.b  #READ_MOUSE,d0
00001C2A  7200                     554      move.l  #0,d1
00001C2C  4E4F                     555      trap    #15
00001C2E                           556      
00001C2E                           557      ; make sure to check state of mouse: if 0 loop through again
00001C2E  B03C 0000                558      cmp.b   #NO_CLICK,d0
00001C32  6700 0090                559      beq     ReturnToGameLoop  
00001C36                           560      
00001C36                           561      ; don't read double clicking
00001C36  B03C 000A                562      cmp.b   #DOUBLE_CLICK_RIGHT,d0
00001C3A  6700 0088                563      beq     ReturnToGameLoop 
00001C3E                           564      
00001C3E                           565      ; make sure coordinates are within the bounds of the grid
00001C3E                           566  MouseBoundTop
00001C3E  B2BC 00C800FA            567      cmp.l   #GRID_TOP_LEFT,d1
00001C44  6D00 007E                568      blt     ReturnToGameLoop
00001C48                           569  MouseBoundLeft
00001C48  B27C 00FA                570      cmp.w   #GRID_LEFT,d1
00001C4C  6D00 0076                571      blt     ReturnToGameLoop
00001C50                           572  MouseBoundBottom
00001C50  B2BC 0258028A            573      cmp.l   #GRID_BOTTOM_RIGHT,d1
00001C56  6E00 006C                574      bgt     ReturnToGameLoop
00001C5A                           575  MouseBoundRight
00001C5A  B27C 028A                576      cmp.w   #GRID_RIGHT,d1
00001C5E  6E00 0064                577      bgt     ReturnToGameLoop
00001C62                           578      
00001C62                           579      ; temp store d1 to update bitmap
00001C62  49F9 00001CC6            580      lea     Current_Mouse_Position,a4
00001C68  2881                     581      move.l  d1,(a4)
00001C6A  49F9 00001CCA            582      lea     Current_Mouse_Click,a4
00001C70  2880                     583      move.l  d0,(a4)
00001C72                           584      
00001C72                           585      ; update smiley to shocked and hold while mouse is down
00001C72  4EB9 000022C8            586      jsr     SmileyShocked
00001C78                           587  
00001C78                           588      ; loop through until player lets go of mouse, maintains shocked face
00001C78                           589  MouseHeld    
00001C78  103C 003D                590      move.b  #READ_MOUSE,d0
00001C7C  7200                     591      move.l  #0,d1
00001C7E  4E4F                     592      trap    #15
00001C80                           593      
00001C80  B03C 0001                594      cmp.b   #REVEAL_CLICK,d0
00001C84  67F2                     595      beq     MouseHeld
00001C86                           596      
00001C86  B03C 0002                597      cmp.b   #FLAG_CLICK,d0
00001C8A  67EC                     598      beq     MouseHeld
00001C8C                           599      
00001C8C                           600      ; once mouse is let go, play click sound
00001C8C  4EB9 002BB824            601      jsr     PlayClickSound
00001C92                           602      
00001C92                           603      ; retrieve mouse position and put back in d1
00001C92  49F9 00001CC6            604      lea     Current_Mouse_Position,a4
00001C98  2214                     605      move.l  (a4),d1
00001C9A  49F9 00001CCA            606      lea     Current_Mouse_Click,a4
00001CA0  2014                     607      move.l  (a4),d0
00001CA2                           608      
00001CA2                           609      ; store x in d1 and y in d2
00001CA2  4841                     610      swap    d1
00001CA4  3401                     611      move.w  d1,d2
00001CA6  4241                     612      clr.w   d1
00001CA8  4841                     613      swap    d1  
00001CAA                           614      
00001CAA                           615      ; prep addresses to search tiles
00001CAA  41F8 1116                616      lea     Tiles,a0
00001CAE  2248                     617      move.l  a0,a1
00001CB0  5248                     618      adda.w  #1,a0
00001CB2  45F8 1168                619      lea     Coordinates,a2
00001CB6  264A                     620      move.l  a2,a3
00001CB8  287C 00000000            621      move.l  #CLEAR_ADDRESS,a4
00001CBE                           622      
00001CBE                           623      ; once location is confirmed to be a tile, find corresponding tile that mouse clicked
00001CBE  4EB9 00001CD2            624      jsr FindTileClicked
00001CC4                           625  
00001CC4                           626  
00001CC4                           627      ; goes back to main if mouse clicked somewhere invalid (ensures jsr is returned to and not branched to)   
00001CC4                           628  ReturnToGameLoop
00001CC4                           629  
00001CC4  4E75                     630      rts
00001CC6                           631  
00001CC6                           632  Current_Mouse_Position      ds.l        1
00001CCA                           633  Current_Mouse_Click         ds.l        1
00001CCE                           634  First_Tile_Click            ds.l        1
00001CD2                           635  
00001CD2                           636  
00001CD2                           637  
00001CD2                           638  
00001CD2                           639  
00001CD2                           640  
00001CD2                           641  
00001CD2                           642  
00001CD2                           643  
00001CD2                           644  
00001CD2                           645  
00001CD2                           646  
00001CD2                           647  
00001CD2                           648  
00001CD2                           649  
00001CD2                           650  -------------------- end include --------------------
00001CD2                           651      include 'FindTileClicked.X68'
00001CD2                           652  
00001CD2                           653  
00001CD2  =00000024                654  NUM_BYTES_SKIP          EQU     NUM_COL*4
00001CD2  =00000004                655  SHIFT_FOUR              EQU     4
00001CD2                           656  
00001CD2  =00000001                657  TILE_CLICKED            EQU     1
00001CD2                           658  
00001CD2  =00000001                659  REVEAL_CLICK            EQU     01
00001CD2  =00000002                660  FLAG_CLICK              EQU     02
00001CD2                           661  
00001CD2  =00000028                662  TILE_SIZE               EQU     40
00001CD2  =00000009                663  NUM_ROW                 EQU     9
00001CD2  =00000009                664  NUM_COL                 EQU     9
00001CD2                           665  
00001CD2  =00000001                666  FIRST_TILE_CLICKED      EQU     01
00001CD2  =00000000                667  FIRST_TILE_UNCLICKED    EQU     00
00001CD2                           668  
00001CD2                           669  
00001CD2                           670  FindTileClicked
00001CD2                           671      ; move address for coordinates into new address since it will be modified
00001CD2  364A                     672      move.w  a2,a3
00001CD4                           673      
00001CD4                           674      ; count tiles in d5
00001CD4                           675      ; start at 0 for zero-based indexing
00001CD4  4245                     676      clr.w   d5
00001CD6                           677      
00001CD6                           678      ; motor (only moves one word to loop through only y values)           
00001CD6  361B                     679      move.w  (a3)+,d3        ; first y value
00001CD8  0643 0028                680      addi.w  #TILE_SIZE,d3
00001CDC                           681      ; reset address
00001CDC  364A                     682      move.w  a2,a3   
00001CDE  B642                     683      cmp.w   d2,d3
00001CE0  6E00 0014                684      bgt     LoopCols        ; if d2 is less than d3, tile is in first row
00001CE4                           685      
00001CE4                           686      ; find row that y value (d2) falls within
00001CE4                           687  LoopRows
00001CE4  0645 0009                688      addi.w  #NUM_COL,d5     ; incremenet by number of tiles in each row (number of columns)
00001CE8  D6FC 0024                689      adda.w  #NUM_BYTES_SKIP,a3    
00001CEC  3613                     690      move.w  (a3),d3         ; move to next row
00001CEE  0643 0028                691      addi.w  #TILE_SIZE,d3
00001CF2  B642                     692      cmp.w   d2,d3
00001CF4  6DEE                     693      blt     LoopRows   
00001CF6                           694  
00001CF6                           695  LoopCols    
00001CF6                           696      ; find col that x value (d1) falls within
00001CF6  5245                     697      addi.w  #1,d5           ; increment number of tiles
00001CF8  544B                     698      adda.w  #2,a3           ; add 2 to address to skip y values
00001CFA  361B                     699      move.w  (a3)+,d3        ; move twice for x values
00001CFC  0643 0028                700      addi.w  #TILE_SIZE,d3
00001D00  B641                     701      cmp.w   d1,d3
00001D02  6DF2                     702      blt     LoopCols
00001D04                           703      
00001D04                           704      ; go back 1 tile
00001D04  5345                     705      subi.w  #1,d5
00001D06                           706  
00001D06                           707  CalculateTilePosition
00001D06                           708      
00001D06                           709      ; reset map pointer to be -1, reset d3 to store tile
00001D06  5348                     710      suba.w  #1,a0
00001D08  3248                     711      move.w  a0,a1
00001D0A  4243                     712      clr.w   d3
00001D0C                           713      
00001D0C                           714      ; check if first time clicked
00001D0C  45F8 1CCE                715      lea     First_Tile_Click,a2
00001D10  0C92 00000001            716      cmp.l   #FIRST_TILE_CLICKED,(a2)
00001D16  6700 0028                717      beq     MapAlreadyGenerated
00001D1A                           718      ; if first time clicked, generate map
00001D1A  24BC 00000001            719      move.l  #FIRST_TILE_CLICKED,(a2)
00001D20  4EB9 00001D64            720      jsr     StartTime
00001D26  4EB9 00001EAC            721      jsr     LoadMap
00001D2C                           722      ;lea     Coordinates,a2
00001D2C                           723      ;move.w  a2,a3
00001D2C                           724      ;move.w  a0,a1
00001D2C                           725      
00001D2C                           726      
00001D2C                           727      ; retrieve mouse position and put back in d1
00001D2C  49F8 1CC6                728      lea     Current_Mouse_Position,a4
00001D30  2214                     729      move.l  (a4),d1
00001D32  49F8 1CCA                730      lea     Current_Mouse_Click,a4
00001D36  2014                     731      move.l  (a4),d0
00001D38                           732      
00001D38                           733      ; store x in d1 and y in d2
00001D38  4841                     734      swap    d1
00001D3A  3401                     735      move.w  d1,d2
00001D3C  4241                     736      clr.w   d1
00001D3E  4841                     737      swap    d1
00001D40                           738      
00001D40                           739   
00001D40                           740  MapAlreadyGenerated
00001D40  45F8 1168                741      lea     Coordinates,a2
00001D44  364A                     742      move.w  a2,a3
00001D46  3248                     743      move.w  a0,a1   
00001D48                           744      ; check status of tile and move to d3
00001D48  1631 5800                745      move.b  (a1,d5.l),d3
00001D4C                           746      
00001D4C                           747      ; clear mouse input coordinates to make space for tile coordinates
00001D4C  4281                     748      clr.l   d1
00001D4E  4282                     749      clr.l   d2
00001D50                           750      
00001D50                           751      ; if not clicked or flagged (byte starts with 0), trigger event (change to if upper nybble is not equal to 1)
00001D50  1803                     752      move.b  d3,d4
00001D52  E80C                     753      lsr.b   #SHIFT_FOUR,d4 ; shift by 4 to check upper bits in word
00001D54  B83C 0001                754      cmp.b   #TILE_CLICKED,d4
00001D58  6700 0008                755      beq     AlreadyClicked
00001D5C                           756      
00001D5C  4EB9 0000241C            757      jsr     ClickEventHandler
00001D62                           758      
00001D62                           759      ; if clicked, return (don't do anything)
00001D62                           760  AlreadyClicked 
00001D62  4E75                     761      rts
00001D64                           762      
00001D64                           763  
00001D64                           764  
00001D64                           765  
00001D64                           766  
00001D64                           767  
00001D64                           768  
00001D64                           769  
00001D64                           770  
00001D64                           771  
00001D64                           772  
00001D64                           773  
00001D64                           774  -------------------- end include --------------------
00001D64                           775      include 'Timer.X68'
00001D64                           776  
00001D64  =00000008                777  RETURN_TIME             EQU     8
00001D64  =00000000                778  START_TIME              EQU     0
00001D64  =00000064                779  ONE_SECOND              EQU     100
00001D64                           780  
00001D64                           781  
00001D64                           782  StartTime
00001D64                           783      
00001D64                           784      ; called to start/restart the timer
00001D64  41F8 1B9A                785      lea     Start_Since_Midnight,a0  
00001D68  103C 0008                786      move.b  #RETURN_TIME,d0
00001D6C  4E4F                     787      trap    #15
00001D6E                           788      
00001D6E                           789      ; save time since midnight
00001D6E  2081                     790      move.l  d1,(a0)
00001D70  4281                     791      clr.l   d1
00001D72                           792      
00001D72                           793      ; move start time (000) into current time
00001D72  41F8 1B96                794      lea     Current_Time,a0
00001D76  20BC 00000000            795      move.l  #START_TIME,(a0)
00001D7C                           796      
00001D7C  4E75                     797      rts
00001D7E                           798      
00001D7E                           799  CheckTimeElapsed
00001D7E                           800      
00001D7E                           801      ; get current time since midnight
00001D7E  103C 0008                802      move.b  #RETURN_TIME,d0
00001D82  4E4F                     803      trap #15
00001D84                           804      
00001D84                           805      ; sub by start since midnight to get time difference (in centiseconds)
00001D84  92B8 1B9A                806      sub.l   (Start_Since_Midnight),d1
00001D88                           807      
00001D88                           808      ; divide by 100 to get time elapsed from centiseconds to seconds
00001D88  82FC 0064                809      divu    #ONE_SECOND,d1
00001D8C                           810      
00001D8C  4E75                     811      rts
00001D8E                           812      
00001D8E                           813  
00001D8E                           814  
00001D8E                           815  
00001D8E                           816  
00001D8E                           817  
00001D8E                           818  -------------------- end include --------------------
00001D8E                           819      include 'LoadScreen.X68'
00001D8E                           820  
00001D8E                           821  
00001D8E  =00C0C0C0                822  LIGHT_GREY                      EQU     $c0c0c0
00001D8E  =00000000                823  BLACK                           EQU     $000000
00001D8E                           824  
00001D8E  =0000000B                825  CLEAR_SCREEN                    EQU     11
00001D8E  =0000000E                826  DISPLAY_STRING                  EQU     14
00001D8E  =00000015                827  SET_TEXT_COLOR                  EQU     21
00001D8E  =00000051                828  SET_FILL_COLOR                  EQU     81
00001D8E  =0000005C                829  DOUBLE_BUFFERING_CODE           EQU     92
00001D8E  =0000005E                830  REPAINT_SCREEN                  EQU     94
00001D8E  =00000021                831  SET_SCREEN                      EQU     33
00001D8E                           832  
00001D8E  =00000011                833  DOUBLE_BUFFERING_ON             EQU     17
00001D8E  =00000010                834  DOUBLE_BUFFERING_OFF            EQU     16
00001D8E  =0000FF00                835  CLEAR_SCREEN_VAL                EQU     $FF00
00001D8E                           836  
00001D8E  =00000003                837  CLEAR_TEXT_START                EQU     3
00001D8E  =000000C8                838  CLEAR_TEXT_END_X                EQU     200
00001D8E  =00000014                839  CLEAR_TEXT_END_Y                EQU     20
00001D8E                           840  
00001D8E  =00FFFFFF                841  DEFAULT_TEXT_COLOR              EQU     $00FFFFFF
00001D8E  =00000000                842  DEFAULT_FONT                    EQU     $00000000
00001D8E                           843  
00001D8E  =000002BC                844  SCREEN_HEIGHT                   EQU     700
00001D8E  =00000384                845  SCREEN_WIDTH                    EQU     900
00001D8E  =038402BC                846  SCREEN_VALUE                    EQU     (SCREEN_WIDTH<<16)+SCREEN_HEIGHT
00001D8E                           847  
00001D8E  =000000FA                848  START_X                         EQU     250
00001D8E  =000000C8                849  START_Y                         EQU     200
00001D8E  =00000009                850  NUM_ROW                         EQU     9
00001D8E  =00000009                851  NUM_COL                         EQU     9
00001D8E  =00000004                852  GRID_BOX_WIDTH                  EQU     PEN_WIDTH
00001D8E  =00000004                853  BORDER_OFFSET                   EQU     PEN_WIDTH
00001D8E  =00000190                854  GRID_SIDE_LENGTH                EQU     TILE_SIZE*(NUM_COL+1)
00001D8E  =00000010                855  GRID_OUTER_OFFSET               EQU     PEN_WIDTH*4
00001D8E  =00000004                856  WINDOW_OFFSET                   EQU     PEN_WIDTH
00001D8E  =00000032                857  TOP_UI_HEIGHT                   EQU     50
00001D8E  =00000190                858  TOP_UI_WIDTH                    EQU     GRID_SIDE_LENGTH
00001D8E  =00000004                859  SCREEN_OFFSET                   EQU     4
00001D8E                           860  
00001D8E  =00000000                861  TITLE_SCREEN                    EQU     00
00001D8E  =00000001                862  IN_GAME                         EQU     01
00001D8E  =00000002                863  END_GAME                        EQU     02
00001D8E  =00000003                864  RESTART_GAME                    EQU     03
00001D8E                           865  
00001D8E                           866      ; loading screen
00001D8E                           867  LoadingMainMenu
00001D8E                           868  
00001D8E                           869      ; enable double buffering
00001D8E  103C 005C                870      move.b  #DOUBLE_BUFFERING_CODE,d0
00001D92  123C 0011                871      move.b  #DOUBLE_BUFFERING_ON,d1
00001D96  4E4F                     872      trap    #15
00001D98                           873      
00001D98                           874      ; set fill color for loading screen
00001D98  103C 0051                875      move.b  #SET_FILL_COLOR,d0
00001D9C  7200                     876      move.l  #BLACK,d1
00001D9E  4E4F                     877      trap    #15
00001DA0  4281                     878      clr.l   d1
00001DA2                           879  
00001DA2                           880      ; set screen size
00001DA2  103C 0021                881      move.b  #SET_SCREEN,d0
00001DA6  223C 038402BC            882      move.l  #SCREEN_VALUE,d1
00001DAC  4E4F                     883      trap    #15
00001DAE                           884          
00001DAE                           885      ; reset font size
00001DAE  103C 0015                886      move.b  #SET_TEXT_COLOR,d0
00001DB2  223C 00FFFFFF            887      move.l  #DEFAULT_TEXT_COLOR,d1
00001DB8  7400                     888      move.l  #DEFAULT_FONT,d2
00001DBA  4E4F                     889      trap    #15
00001DBC                           890      
00001DBC                           891      ; display loading text
00001DBC  43F9 00001E9C            892      lea     Loading_String,a1
00001DC2  103C 000E                893      move.b  #DISPLAY_STRING,d0
00001DC6  4E4F                     894      trap    #15
00001DC8                           895      
00001DC8                           896      ; show double buffer
00001DC8  4EB9 00002ABA            897      jsr     RepaintScreen
00001DCE                           898      
00001DCE                           899      ; clear loading screen
00001DCE  103C 000B                900      move.b  #CLEAR_SCREEN,d0
00001DD2  223C 0000FF00            901      move.l  #CLEAR_SCREEN_VAL,d1
00001DD8  4E4F                     902      trap    #15
00001DDA                           903      
00001DDA  4E75                     904      rts
00001DDC                           905      
00001DDC                           906  
00001DDC                           907  SetBackground    
00001DDC                           908      ; set fill color for background
00001DDC  103C 0051                909      move.b  #SET_FILL_COLOR,d0
00001DE0  223C 00C0C0C0            910      move.l  #LIGHT_GREY,d1
00001DE6  4E4F                     911      trap    #15
00001DE8  4281                     912      clr.l   d1
00001DEA                           913      
00001DEA                           914      ; draw light grey background for grid behind
00001DEA  323C 00EA                915      move.w  #(START_X-GRID_OUTER_OFFSET),d1
00001DEE  343C 0086                916      move.w  #(START_Y-GRID_OUTER_OFFSET-TOP_UI_HEIGHT),d2
00001DF2  3601                     917      move.w  d1,d3
00001DF4  3802                     918      move.w  d2,d4
00001DF6  0643 01A8                919      add.w   #(GRID_SIDE_LENGTH+(GRID_OUTER_OFFSET+BORDER_OFFSET*2)),d3
00001DFA  0644 01DA                920      add.w   #(GRID_SIDE_LENGTH+(GRID_OUTER_OFFSET+BORDER_OFFSET*2)+TOP_UI_HEIGHT),d4
00001DFE                           921      
00001DFE  103C 0057                922      move.b  #DRAW_FILLED_RECT,d0
00001E02  4E4F                     923      trap    #15
00001E04                           924      
00001E04  4EB9 00002C40            925      jsr     ClearRegisters
00001E0A                           926      
00001E0A  4E75                     927      rts
00001E0C                           928      
00001E0C                           929  MainMenuLoaded   
00001E0C                           930      
00001E0C                           931      ; show double buffer
00001E0C  4EB9 00002ABA            932      jsr     RepaintScreen
00001E12                           933      
00001E12  4EB9 00002C40            934      jsr     ClearRegisters
00001E18  4EB9 00002C0C            935      jsr     WaitStart
00001E1E                           936      
00001E1E  4E75                     937      rts
00001E20                           938      
00001E20                           939  GameLoaded   
00001E20                           940      
00001E20                           941      ; show double buffer
00001E20  4EB9 00002ABA            942      jsr     RepaintScreen
00001E26                           943      
00001E26  4EB9 00002C40            944      jsr     ClearRegisters
00001E2C                           945      
00001E2C  49F8 1B9E                946      lea     Game_State,a4
00001E30  28BC 00000001            947      move.l  #IN_GAME,(a4)
00001E36  287C 00000000            948      move.l  #CLEAR_ADDRESS,a4
00001E3C                           949      
00001E3C  4EB9 002BB810            950      jsr     PlayStartSound
00001E42                           951      
00001E42  4E75                     952      rts
00001E44                           953      
00001E44                           954  LoadingNewGame
00001E44                           955  
00001E44                           956      ; set pen color
00001E44  103C 0050                957      move.b  #SET_PEN_COLOR,d0
00001E48  223C 007C7C7C            958      move.l  #DARK_GREY,d1
00001E4E  4E4F                     959      trap    #15
00001E50                           960  
00001E50                           961      ; draw rect over top ui
00001E50  103C 0057                962      move.b  #DRAW_FILLED_RECT,d0
00001E54  223C 000000F2            963      move.l  #(START_X-(BORDER_OFFSET*2)),d1
00001E5A  243C 0000008E            964      move.l  #(START_Y-(TOP_UI_HEIGHT+(BORDER_OFFSET*2))),d2
00001E60  2601                     965      move.l  d1,d3
00001E62  0643 0198                966      add.w   #(GRID_SIDE_LENGTH+BORDER_OFFSET*2),d3
00001E66  283C 000000BC            967      move.l  #(START_Y-(BORDER_OFFSET*3)),d4
00001E6C  4E4F                     968      trap    #15
00001E6E                           969      
00001E6E                           970      ; reset font size
00001E6E  103C 0015                971      move.b  #SET_TEXT_COLOR,d0
00001E72  223C 00FFFFFF            972      move.l  #DEFAULT_TEXT_COLOR,d1
00001E78  7400                     973      move.l  #DEFAULT_FONT,d2
00001E7A  4E4F                     974      trap    #15
00001E7C                           975      
00001E7C                           976      ; display loading text
00001E7C  43F9 00001E9C            977      lea     Loading_String,a1
00001E82  103C 005F                978      move.b  #DRAW_TEXT,d0
00001E86  223C 000001A2            979      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(BORDER_OFFSET*8)),d1
00001E8C  243C 000000A0            980      move.l  #(START_Y-(BORDER_OFFSET*10)),d2
00001E92  4E4F                     981      trap    #15
00001E94                           982      
00001E94                           983      ; show double buffer
00001E94  4EB9 00002ABA            984      jsr     RepaintScreen
00001E9A                           985  
00001E9A  4E75                     986      rts
00001E9C                           987      
00001E9C= 4C6F6164 696E672E ...    988  Loading_String      dc.l    'Loading...',0
00001EAC                           989  
00001EAC                           990  
00001EAC                           991  
00001EAC                           992  
00001EAC                           993  
00001EAC                           994  
00001EAC                           995  
00001EAC                           996  
00001EAC                           997  
00001EAC                           998  
00001EAC                           999  
00001EAC                          1000  
00001EAC                          1001  
00001EAC                          1002  
00001EAC                          1003  
00001EAC                          1004  
00001EAC                          1005  -------------------- end include --------------------
00001EAC                          1006      include 'LoadMap.X68'
00001EAC                          1007  
00001EAC  =00000000               1008  NO_FLAGS                EQU     0000
00001EAC                          1009  
00001EAC  =FFFFFFF6               1010  TILE_POS_ONE            EQU     -NUM_COL-1
00001EAC  =FFFFFFF7               1011  TILE_POS_TWO            EQU     -NUM_COL
00001EAC  =FFFFFFF8               1012  TILE_POS_THREE          EQU     -NUM_COL+1
00001EAC  =FFFFFFFF               1013  TILE_POS_FOUR           EQU     -1
00001EAC  =00000001               1014  TILE_POS_FIVE           EQU     1
00001EAC  =00000008               1015  TILE_POS_SIX            EQU     NUM_COL-1
00001EAC  =00000009               1016  TILE_POS_SEVEN          EQU     NUM_COL
00001EAC  =0000000A               1017  TILE_POS_EIGHT          EQU     NUM_COL+1
00001EAC                          1018  
00001EAC  =00000008               1019  NUM_TILES_SURROUNDING   EQU     8 
00001EAC  =00000012               1020  SURROUNDING_LENGTH      EQU     18
00001EAC                          1021  
00001EAC  =00000001               1022  REVEAL_CLICK            EQU     01
00001EAC  =00000002               1023  FLAG_CLICK              EQU     02
00001EAC                          1024  
00001EAC  =0000000A               1025  BOMB_TILE               EQU     $A
00001EAC  =00000000               1026  BLANK_TILE              EQU     00
00001EAC  =00000002               1027  FLAG_TILE               EQU     2
00001EAC                          1028  
00001EAC  =00000002               1029  ADDRESS_SPACE           EQU     2
00001EAC  =FFFFFFFF               1030  ONE_BEFORE              EQU     -1
00001EAC                          1031  
00001EAC  =000000FA               1032  START_X                 EQU     250
00001EAC  =000000C8               1033  START_Y                 EQU     200
00001EAC  =00000122               1034  END_X                   EQU     START_X+TILE_SIZE
00001EAC  =000000F0               1035  END_Y                   EQU     START_Y+TILE_SIZE
00001EAC                          1036  
00001EAC  =00000009               1037  NUM_ROW                 EQU     9
00001EAC  =00000009               1038  NUM_COL                 EQU     9
00001EAC                          1039  
00001EAC  =00000001               1040  RIGHT_MOST_BIT          EQU     1
00001EAC  =00000002               1041  SHIFT_FOR_BITS          EQU     2
00001EAC                          1042  
00001EAC                          1043      
00001EAC                          1044  LoadMap
00001EAC                          1045  
00001EAC                          1046      ; make sure click is a reveal click, not flag click
00001EAC  B03C 0002               1047      cmp.b   #FLAG_CLICK,d0
00001EB0  6700 FD42               1048      beq     ReadMouseInput
00001EB4                          1049      
00001EB4                          1050      ; set address of bomb map and grid (where it will be loaded into)
00001EB4  41F8 1116               1051      lea     Tiles,a0
00001EB8  2248                    1052      move.l  a0,a1
00001EBA                          1053      
00001EBA                          1054      ; get size of bomb map
00001EBA  303C 0051               1055      move.w  #(Map_End-Map_Start),d0
00001EBE                          1056      
00001EBE                          1057      ; d4 holds tile position initially, moved to d5 to work for ValidateSurroundingTiles
00001EBE  45F9 0000204E           1058      lea     Starting_Tile,a2
00001EC4  47F9 00002052           1059      lea     Starting_Surrounding,a3
00001ECA  3805                    1060      move.w  d5,d4
00001ECC  11BC 0000 5800          1061      move.b  #BLANK_TILE,(a0,d5.l)
00001ED2  D2C5                    1062      adda    d5,a1
00001ED4  3489                    1063      move.w  a1,(a2)
00001ED6  2248                    1064      move.l  a0,a1
00001ED8                          1065      
00001ED8  7600                    1066      move.l  #BLANK_TILE,d3
00001EDA  4285                    1067      clr.l   d5
00001EDC                          1068     
00001EDC                          1069      ; check which tiles around clicked tile are real tiles
00001EDC  4EB9 000026D4           1070      jsr     ValidateSurroundingTiles
00001EE2                          1071      
00001EE2  4287                    1072      clr.l   d7
00001EE4  45F9 00002076           1073      lea     Starting_Offset,a2
00001EEA  47F9 00002052           1074      lea     Starting_Surrounding,a3
00001EF0  5452                    1075      add.w   #ADDRESS_SPACE,(a2)
00001EF2  544B                    1076      adda    #ADDRESS_SPACE,a3
00001EF4  36B9 0000204E           1077      move.w  Starting_Tile,(a3)
00001EFA  4EB9 00002792           1078      jsr     PushSurroundingTiles  
00001F00                          1079      
00001F00                          1080      ; go through and randomly generate tile numbers by modding time by grid size (rows*cols) and placing bomb at that time
00001F00                          1081      ; d7 is used as a counter for beginning tiles where bombs can't be placed
00001F00                          1082      
00001F00  41F8 1116               1083      lea     Tiles,a0
00001F04  4BF8 13F0               1084      lea     Bombs,a5
00001F08  4DF8 1678               1085      lea     Bombs_Offset,a6
00001F0C  45F9 00002076           1086      lea     Starting_Offset,a2
00001F12  47F9 00002052           1087      lea     Starting_Surrounding,a3
00001F18  544B                    1088      adda    #ADDRESS_SPACE,a3
00001F1A  2248                    1089      move.l  a0,a1
00001F1C                          1090  
00001F1C                          1091  
00001F1C                          1092      ; generate bombs until the right number of bombs have been reached
00001F1C                          1093  GenerateBomb   
00001F1C  2248                    1094      move.l  a0,a1
00001F1E  4EB9 00001FF4           1095      jsr     GenerateRandomNumber
00001F24  D2C1                    1096      adda    d1,a1
00001F26                          1097      
00001F26  4287                    1098      clr.l   d7
00001F28  4282                    1099      clr.l   d2
00001F2A                          1100      
00001F2A                          1101  CheckIfAvailable
00001F2A  3873 7800               1102      move.w  (a3,d7.l),a4
00001F2E  B9C9                    1103      cmp.l   a1,a4
00001F30                          1104      ; if address is first clicked or surrounding, generate new location for bomb
00001F30  67EA                    1105      beq     GenerateBomb   
00001F32                          1106      
00001F32                          1107      ; go to next address and loop if not at end
00001F32  5447                    1108      add.w   #ADDRESS_SPACE,d7
00001F34  BEBC 00000012           1109      cmp.l   #SURROUNDING_LENGTH,d7
00001F3A  6DEE                    1110      blt     CheckIfAvailable
00001F3C                          1111      
00001F3C                          1112      ; if address already has bomb, generate new bomb location
00001F3C  1430 1000               1113      move.b  (a0,d1),d2
00001F40  B43C 000A               1114      cmp.b   #BOMB_TILE,d2
00001F44  67D6                    1115      beq     GenerateBomb
00001F46                          1116      
00001F46                          1117      ; store bomb, loop if max bombs hasn't been reached
00001F46  3AC9                    1118      move.w  a1,(a5)+
00001F48  5456                    1119      add.w   #ADDRESS_SPACE,(a6)
00001F4A  5286                    1120      add.l   #1,d6
00001F4C  12BC 000A               1121      move.b  #BOMB_TILE,(a1)
00001F50  BCBC 0000000F           1122      cmp.l   #NUM_BOMBS,d6
00001F56  66C4                    1123      bne     GenerateBomb
00001F58                          1124      
00001F58                          1125      ; loop through every tile to check surrounding to count number of bombs (do so similar to blank tile bfs)
00001F58  41F8 1116               1126      lea     Tiles,a0
00001F5C  2A48                    1127      move.l  a0,a5
00001F5E  534D                    1128      suba    #1,a5
00001F60                          1129      ; num bombs
00001F60  4282                    1130      clr.l   d2
00001F62                          1131      
00001F62  49F9 00002078           1132      lea     Relative_Tile_Positions,a4
00001F68  4DF9 00002824           1133      lea     Surrounding_Tile_To_Check,a6
00001F6E                          1134    
00001F6E                          1135    
00001F6E                          1136  SetNumberTiles
00001F6E                          1137      ; skip tile being checked if bomb
00001F6E                          1138      ; a5 goes through each tile in grid
00001F6E  4287                    1139      clr.l   d7
00001F70  4285                    1140      clr.l   d5
00001F72  524D                    1141      adda    #1,a5
00001F74  1615                    1142      move.b  (a5),d3
00001F76  B63C 000A               1143      cmp.b   #BOMB_TILE,d3
00001F7A  67F2                    1144      beq     SetNumberTiles
00001F7C                          1145      
00001F7C  24BC 00000000           1146      move.l  #CLEAR_ADDRESS,(a2)
00001F82  380D                    1147      move.w  a5,d4
00001F84  9848                    1148      sub.w   a0,d4
00001F86  4EB9 000026D4           1149      jsr     ValidateSurroundingTiles
00001F8C  49F9 00002078           1150      lea     Relative_Tile_Positions,a4
00001F92                          1151      
00001F92  7EFF                    1152      move.l  #ONE_BEFORE,d7
00001F94  4EB9 00002044           1153      jsr     CheckSurroundingBombs
00001F9A                          1154      
00001F9A                          1155  SetCurrentNumberTile
00001F9A                          1156      ; set number of surrounding bombs to tile type
00001F9A                          1157      ; d2 is number of bombs surrounding a number tile
00001F9A  1A82                    1158      move.b  d2,(a5)
00001F9C                          1159      
00001F9C  4282                    1160      clr.l   d2
00001F9E                          1161      
00001F9E                          1162      ; check if at end of grid
00001F9E  260D                    1163      move.l  a5,d3
00001FA0  9688                    1164      sub.l   a0,d3
00001FA2  B6BC 00000051           1165      cmp.l   #(NUM_ROW*NUM_COL),d3
00001FA8  6DC4                    1166      blt     SetNumberTiles
00001FAA                          1167  
00001FAA                          1168      
00001FAA  47F8 1B8C               1169      lea     Incorrect_Flags_Offset,a3
00001FAE  36BC 0000               1170      move.w  #NO_FLAGS,(a3)
00001FB2                          1171      
00001FB2  45F8 1168               1172      lea     Coordinates,a2
00001FB6  264A                    1173      move.l  a2,a3
00001FB8                          1174      
00001FB8  4EB8 1D64               1175      jsr     StartTime
00001FBC  41F8 1116               1176      lea     Tiles,a0
00001FC0  45F9 0000204E           1177      lea     Starting_Tile,a2
00001FC6  3A12                    1178      move.w  (a2),d5
00001FC8  9A48                    1179      sub.w   a0,d5
00001FCA  4E75                    1180      rts
00001FCC                          1181  
00001FCC                          1182  PrepInitialBoard
00001FCC  4EB9 00002C40           1183      jsr     ClearRegisters
00001FD2  45F8 1168               1184      lea     Coordinates,a2
00001FD6  264A                    1185      move.l  a2,a3    
00001FD8                          1186      
00001FD8                          1187      ; get size of grid
00001FD8  3E3C 0059               1188      move.w  #(Map_End-Map_Start)-1+NUM_COL,d7   
00001FDC                          1189   
00001FDC                          1190      ; starting positions for loading in tiles
00001FDC  3A3C 00FA               1191      move.w  #START_X,d5
00001FE0  343C 00C8               1192      move.w  #START_Y,d2
00001FE4  363C 0122               1193      move.w  #END_X,d3
00001FE8  383C 00F0               1194      move.w  #END_Y,d4
00001FEC                          1195      
00001FEC  4EB9 000020B0           1196      jsr PrintInitialBoard
00001FF2                          1197      
00001FF2  4E75                    1198      rts
00001FF4                          1199      
00001FF4                          1200      
00001FF4                          1201  GenerateRandomNumber
00001FF4                          1202      
00001FF4                          1203      ; get time since midnight
00001FF4  103C 0008               1204      move.b  #RETURN_TIME,d0
00001FF8  4E4F                    1205      trap    #15
00001FFA                          1206      
00001FFA                          1207      ; uses a random set of numbers to randomly place bombs
00001FFA  49F9 00002098           1208      lea     Random_Offset,a4
00002000                          1209      
00002000                          1210      ; mod value by cols * rows TODO: optimize
00002000  D234 6800               1211      add.b  (a4,d6.l),d1
00002004  4841                    1212      swap    d1
00002006  4241                    1213      clr.w   d1
00002008  4841                    1214      swap    d1
0000200A  82FC 0050               1215      divu   #((NUM_COL*NUM_ROW)-1),d1
0000200E  4241                    1216      clr.w   d1
00002010  4841                    1217      swap    d1
00002012                          1218      
00002012  4E75                    1219      rts
00002014                          1220      
00002014                          1221      
00002014                          1222  ContinueCheckingBombs
00002014                          1223      ; move tile position so it can be manipulated in a different register
00002014  2C05                    1224      move.l  d5,d6
00002016                          1225      
00002016                          1226      ; shift tile position to flag we want to check
00002016  EEAE                    1227      lsr.l   d7,d6
00002018  CCBC 00000001           1228      and.l   #RIGHT_MOST_BIT,d6
0000201E  BCBC 00000001           1229      cmp.l   #RIGHT_MOST_BIT,d6
00002024  6600 001E               1230      bne     CheckSurroundingBombs                           ; if not flagged, loop again
00002028                          1231      
00002028                          1232      ; shift d7 to be number of bits offset by address (and move back) TODO: optimize this
00002028  4286                    1233      clr.l   d6
0000202A  E58F                    1234      lsl.l   #SHIFT_FOR_BITS,d7
0000202C  2C34 7800               1235      move.l  (a4,d7.l),d6
00002030  E48F                    1236      lsr.l   #SHIFT_FOR_BITS,d7
00002032                          1237      
00002032                          1238      ; calculate tile to check for bomb
00002032  DC44                    1239      add.w   d4,d6
00002034                          1240      
00002034                          1241  CheckIfCurrentBombTile
00002034                          1242  
00002034  2248                    1243      move.l  a0,a1
00002036  D2C6                    1244      adda    d6,a1
00002038  1C91                    1245      move.b  (a1),(a6)
0000203A                          1246      
0000203A                          1247      ; increment num bombs if bomb tile
0000203A  0C16 000A               1248      cmp.b   #BOMB_TILE,(a6)
0000203E  6600 0004               1249      bne     CheckSurroundingBombs
00002042  5282                    1250      add.l   #1,d2
00002044                          1251  
00002044                          1252      ; use d6 to check type of file at location d6 (need to account for num bytes in bits = 4)   
00002044                          1253      ; each time a tile is found, check status of tile and push address if appropriate    
00002044                          1254      ; if tile at location is clicked or bomb, ignore (tile type value > 08)
00002044                          1255      ; if tile is number or blank, store address on stack to be explored after the current one is explored (tile type value <= 08)
00002044                          1256      
00002044                          1257  CheckSurroundingBombs
00002044                          1258  
00002044                          1259      ; increment counter by 1 (used to shift flags to check for each one)
00002044  5287                    1260      add.l   #1,d7
00002046  BE3C 0008               1261      cmp.b   #NUM_TILES_SURROUNDING,d7 
0000204A  6DC8                    1262      blt     ContinueCheckingBombs
0000204C  4E75                    1263      rts
0000204E                          1264  
0000204E                          1265  
0000204E                          1266  Starting_Tile           ds.l    1
00002052                          1267  Starting_Surrounding    ds.l    9
00002076= 0000                    1268  Starting_Offset         dc.w    00
00002078                          1269  
00002078                          1270  Relative_Tile_Positions
00002078= FFFFFFF6 FFFFFFF7 ...   1271                          dc.l    TILE_POS_ONE,TILE_POS_TWO,TILE_POS_THREE,TILE_POS_FOUR,TILE_POS_FIVE,TILE_POS_SIX,TILE_POS_SEVEN,TILE_POS_EIGHT
00002098                          1272  
00002098                          1273  Random_Offset           
00002098= 1B 2D 3D 16 47 42 ...   1274                          dc.b    27,45,61,22,71,66,7,54,77,5,74,31,69,13,4,53,75,23,60,8,53,6,0,0
000020B0                          1275  
000020B0                          1276  
000020B0                          1277  
000020B0                          1278  
000020B0                          1279  
000020B0                          1280  
000020B0                          1281  
000020B0                          1282  
000020B0                          1283  
000020B0                          1284  
000020B0                          1285  
000020B0                          1286  
000020B0                          1287  -------------------- end include --------------------
000020B0                          1288      include 'PrintInitialBoard.X68'
000020B0                          1289  
000020B0                          1290  
000020B0  =00000028               1291  TILE_SIZE               EQU     40
000020B0  =000000FA               1292  START_X                 EQU     250
000020B0  =000000C8               1293  START_Y                 EQU     200
000020B0  =00000122               1294  END_X                   EQU     START_X+TILE_SIZE
000020B0  =000000F0               1295  END_Y                   EQU     START_Y+TILE_SIZE
000020B0                          1296  
000020B0  =00000004               1297  PEN_WIDTH               EQU     4
000020B0                          1298  
000020B0  =00000009               1299  NUM_ROW                 EQU     9
000020B0  =00000009               1300  NUM_COL                 EQU     9
000020B0                          1301  
000020B0                          1302  
000020B0                          1303  PrintInitialBoard
000020B0                          1304  
000020B0  4286                    1305      clr.l   d6
000020B2                          1306  
000020B2  4EB8 1BA6               1307      jsr     DrawBlankTile
000020B6                          1308      
000020B6                          1309      ; store start y and x in coordinates
000020B6  36C2                    1310      move.w  d2,(a3)+
000020B8  36C1                    1311      move.w  d1,(a3)+
000020BA                          1312      
000020BA                          1313      ; move values back
000020BA  3805                    1314      move.w  d5,d4
000020BC  3606                    1315      move.w  d6,d3
000020BE  3A01                    1316      move.w  d1,d5
000020C0                          1317      
000020C0                          1318      ; decrement counter
000020C0  5347                    1319      subi.w  #1,d7
000020C2                          1320      
000020C2                          1321      ; each x increment, shift over by 50 pixels
000020C2  0645 002C               1322      addi.w  #(TILE_SIZE+PEN_WIDTH),d5
000020C6  0643 002C               1323      addi.w  #(TILE_SIZE+PEN_WIDTH),d3
000020CA                          1324      
000020CA                          1325      ; move counter into different register, divide by 9 and compare remainder to 0
000020CA                          1326      ; if 0, increment y
000020CA  3C07                    1327      move.w  d7,d6
000020CC  8CFC 000A               1328      divu    #(NUM_ROW+1),d6
000020D0  4846                    1329      swap    d6 ; can i do a bne if it sets the zero flag or do i need to do a cmp?
000020D2  BC7C 0000               1330      cmp.w   #0,d6
000020D6  66D8                    1331      bne     PrintInitialBoard
000020D8                          1332          
000020D8                          1333      ; each y increment and reset x positions, shift down by 50 pixels
000020D8  3A3C 00FA               1334      move.w  #START_X,d5
000020DC  363C 0122               1335      move.w  #END_X,d3
000020E0  0642 002C               1336      addi.w  #(TILE_SIZE+PEN_WIDTH),d2
000020E4  0644 002C               1337      addi.w  #(TILE_SIZE+PEN_WIDTH),d4
000020E8                          1338      
000020E8                          1339      ; dbra counter jump to print initial board
000020E8  51CF FFC6               1340      dbra    d7,PrintInitialBoard
000020EC                          1341      
000020EC  4EB9 00002C40           1342      jsr     ClearRegisters
000020F2                          1343      
000020F2  4E75                    1344      rts
000020F4                          1345  
000020F4                          1346  
000020F4                          1347  
000020F4                          1348  
000020F4                          1349  
000020F4                          1350  -------------------- end include --------------------
000020F4                          1351      include 'DrawGridBox.X68'
000020F4                          1352  
000020F4  =00000004               1353  GRID_BOX_WIDTH          EQU     PEN_WIDTH
000020F4  =00000004               1354  BORDER_OFFSET           EQU     PEN_WIDTH
000020F4  =00000190               1355  GRID_SIDE_LENGTH        EQU     TILE_SIZE*(NUM_COL+1)
000020F4                          1356  
000020F4  =00000010               1357  GRID_OUTER_OFFSET       EQU     PEN_WIDTH*4
000020F4  =00000004               1358  WINDOW_OFFSET           EQU     PEN_WIDTH
000020F4                          1359  
000020F4  =00000032               1360  TOP_UI_HEIGHT           EQU     50
000020F4  =00000190               1361  TOP_UI_WIDTH            EQU     GRID_SIDE_LENGTH
000020F4  =00000002               1362  TOP_UI_PEN              EQU     PEN_WIDTH/2
000020F4                          1363  
000020F4  =00B04D10               1364  WINDOWS_BLUE            EQU     $b04d10
000020F4                          1365  
000020F4                          1366  DrawGridBox
000020F4                          1367  
000020F4                          1368      ; TODO: clean up code, use more equates for calculated values especially later on
000020F4                          1369  
000020F4                          1370      ; draw inner box
000020F4                          1371  
000020F4                          1372      ; set pen width TODO: create jsr for repeat code
000020F4  4280                    1373      clr.l   d0
000020F6  103C 005D               1374      move.b  #SET_PEN_WIDTH,d0
000020FA  323C 0004               1375      move.w  #GRID_BOX_WIDTH,d1
000020FE  4E4F                    1376      trap    #15
00002100                          1377    
00002100                          1378      ; set pen color to dark grey
00002100  103C 0050               1379      move.b  #SET_PEN_COLOR,d0
00002104  223C 007C7C7C           1380      move.l  #DARK_GREY,d1
0000210A  4E4F                    1381      trap    #15
0000210C                          1382      
0000210C  4281                    1383      clr.l   d1
0000210E                          1384      
0000210E                          1385      ; set trap code for line
0000210E  103C 0054               1386      move.b  #DRAW_LINE,d0
00002112                          1387      
00002112                          1388      ; set positions and sub to shift grid out
00002112  323C 00FA               1389      move.w  #START_X,d1
00002116  343C 00C8               1390      move.w  #START_Y,d2
0000211A  5941                    1391      sub.w   #BORDER_OFFSET,d1       ; TODO: just sub these values from START x/y when moving
0000211C  5942                    1392      sub.w   #BORDER_OFFSET,d2
0000211E  3601                    1393      move.w  d1,d3
00002120  3802                    1394      move.w  d2,d4
00002122                          1395      
00002122                          1396      ; horizontal grey line
00002122  0643 0190               1397      add.w   #GRID_SIDE_LENGTH,d3    ; x changes
00002126  4E4F                    1398      trap    #15
00002128                          1399      
00002128                          1400      ; vertical grey line
00002128  3601                    1401      move.w  d1,d3                   ; reset x position since it doesn't change
0000212A  0644 0190               1402      add.w   #GRID_SIDE_LENGTH,d4    ; y changes
0000212E  4E4F                    1403      trap    #15
00002130                          1404          
00002130                          1405      ; set pen color to highlight
00002130  103C 0050               1406      move.b  #SET_PEN_COLOR,d0
00002134  223C 00FCFCFC           1407      move.l  #HIGHLIGHT,d1
0000213A  4E4F                    1408      trap    #15
0000213C                          1409      
0000213C  4281                    1410      clr.l   d1
0000213E                          1411      
0000213E                          1412      ; set trap code for line
0000213E  103C 0054               1413      move.b  #DRAW_LINE,d0
00002142                          1414      
00002142                          1415      ; set positions and sub to shift grid out TODO: make jsr
00002142  323C 00FA               1416      move.w  #START_X,d1
00002146  5941                    1417      sub.w   #BORDER_OFFSET,d1
00002148  0641 0190               1418      add.w   #GRID_SIDE_LENGTH,d1
0000214C  3601                    1419      move.w  d1,d3
0000214E  343C 00C8               1420      move.w  #START_Y,d2             ; d4 should stay the same
00002152                          1421      
00002152                          1422      ; vertical highlight
00002152  4E4F                    1423      trap    #15
00002154                          1424      
00002154                          1425      ; horizontal highlight
00002154  323C 00FA               1426      move.w  #START_X,d1
00002158  3404                    1427      move.w  d4,d2
0000215A  4E4F                    1428      trap    #15
0000215C                          1429      
0000215C                          1430      
0000215C                          1431      
0000215C                          1432      ; draw outer box TODO: make subroutines for repeat code
0000215C                          1433      
0000215C  4281                    1434      clr.l   d1
0000215E                          1435      
0000215E                          1436      ; set trap code for line
0000215E  103C 0054               1437      move.b  #DRAW_LINE,d0
00002162                          1438      
00002162                          1439      ; set positions and sub to shift grid out
00002162  323C 00FA               1440      move.w  #START_X,d1
00002166  343C 00C8               1441      move.w  #START_Y,d2
0000216A  0441 0010               1442      sub.w   #GRID_OUTER_OFFSET,d1       ; TODO: just sub these values from START x/y when moving
0000216E  0442 0010               1443      sub.w   #GRID_OUTER_OFFSET,d2
00002172  3601                    1444      move.w  d1,d3
00002174  0442 0032               1445      sub.w   #TOP_UI_HEIGHT,d2
00002178  3802                    1446      move.w  d2,d4
0000217A                          1447      
0000217A                          1448      ; horizontal grey line
0000217A  0643 01A8               1449      add.w   #(GRID_SIDE_LENGTH+(GRID_OUTER_OFFSET+BORDER_OFFSET*2)),d3    ; x changes
0000217E  4E4F                    1450      trap    #15
00002180                          1451      
00002180                          1452      ; vertical grey line
00002180  3601                    1453      move.w  d1,d3                   ; reset x position since it doesn't change
00002182  0644 01DA               1454      add.w   #(GRID_SIDE_LENGTH+(GRID_OUTER_OFFSET+BORDER_OFFSET*2)+TOP_UI_HEIGHT),d4    ; y changes
00002186  4E4F                    1455      trap    #15
00002188                          1456          
00002188                          1457      ; set pen color to dark grey
00002188  103C 0050               1458      move.b  #SET_PEN_COLOR,d0
0000218C  223C 007C7C7C           1459      move.l  #DARK_GREY,d1
00002192  4E4F                    1460      trap    #15
00002194                          1461      
00002194  4281                    1462      clr.l   d1
00002196                          1463      
00002196                          1464      ; set trap code for line
00002196  103C 0054               1465      move.b  #DRAW_LINE,d0
0000219A                          1466      
0000219A                          1467      ; set positions and sub to shift grid out TODO: make jsr
0000219A  323C 00FA               1468      move.w  #START_X,d1
0000219E  0641 0198               1469      add.w   #(GRID_SIDE_LENGTH+(BORDER_OFFSET*2)),d1
000021A2  3601                    1470      move.w  d1,d3
000021A4  343C 0086               1471      move.w  #(START_Y-TOP_UI_HEIGHT-GRID_OUTER_OFFSET),d2             ; d4 should stay the same
000021A8                          1472      
000021A8                          1473      ; vertical highlight
000021A8  4E4F                    1474      trap    #15
000021AA                          1475      
000021AA                          1476      ; horizontal highlight
000021AA  323C 00EA               1477      move.w  #(START_X-GRID_OUTER_OFFSET),d1
000021AE  3404                    1478      move.w  d4,d2
000021B0  4E4F                    1479      trap    #15   
000021B2                          1480      
000021B2                          1481      ; draw blue window box
000021B2                          1482      
000021B2                          1483      ; set pen color to blue
000021B2  103C 0050               1484      move.b  #SET_PEN_COLOR,d0
000021B6  223C 00B04D10           1485      move.l  #WINDOWS_BLUE,d1
000021BC  4E4F                    1486      trap    #15
000021BE                          1487      
000021BE  4281                    1488      clr.l   d1
000021C0                          1489      
000021C0                          1490      ; set trap code for line
000021C0  103C 0054               1491      move.b  #DRAW_LINE,d0
000021C4                          1492      
000021C4                          1493      ; set positions and sub to shift grid out
000021C4  323C 00FA               1494      move.w  #START_X,d1
000021C8  343C 00C8               1495      move.w  #START_Y,d2
000021CC  0441 0014               1496      sub.w   #(GRID_OUTER_OFFSET+WINDOW_OFFSET),d1       ; TODO: just sub these values from START x/y when moving
000021D0  0442 0014               1497      sub.w   #(GRID_OUTER_OFFSET+WINDOW_OFFSET),d2
000021D4  3601                    1498      move.w  d1,d3
000021D6  0442 0032               1499      sub.w   #TOP_UI_HEIGHT,d2
000021DA  3802                    1500      move.w  d2,d4
000021DC                          1501      
000021DC                          1502      ; horizontal grey line
000021DC  0643 01B0               1503      add.w   #(GRID_SIDE_LENGTH+(GRID_OUTER_OFFSET+BORDER_OFFSET*2+WINDOW_OFFSET*2)),d3    ; x changes
000021E0  4E4F                    1504      trap    #15
000021E2                          1505      
000021E2                          1506      ; vertical grey line
000021E2  3601                    1507      move.w  d1,d3                   ; reset x position since it doesn't change
000021E4  0644 01E2               1508      add.w   #(GRID_SIDE_LENGTH+(GRID_OUTER_OFFSET+BORDER_OFFSET*2+(WINDOW_OFFSET*2))+TOP_UI_HEIGHT),d4    ; y changes
000021E8  4E4F                    1509      trap    #15
000021EA                          1510      
000021EA                          1511      ; set trap code for line
000021EA  103C 0054               1512      move.b  #DRAW_LINE,d0
000021EE                          1513      
000021EE                          1514      ; set positions and sub to shift grid out TODO: make jsr
000021EE  323C 00FA               1515      move.w  #START_X,d1
000021F2  0641 019C               1516      add.w   #(GRID_SIDE_LENGTH+(BORDER_OFFSET*2)+WINDOW_OFFSET),d1
000021F6  3601                    1517      move.w  d1,d3
000021F8  343C 0082               1518      move.w  #(START_Y-TOP_UI_HEIGHT-GRID_OUTER_OFFSET-WINDOW_OFFSET),d2             ; d4 should stay the same
000021FC                          1519      
000021FC                          1520      ; vertical highlight
000021FC  4E4F                    1521      trap    #15
000021FE                          1522      
000021FE                          1523      ; horizontal highlight
000021FE  323C 00E6               1524      move.w  #(START_X-GRID_OUTER_OFFSET-WINDOW_OFFSET),d1
00002202  3404                    1525      move.w  d4,d2
00002204  4E4F                    1526      trap    #15
00002206                          1527      
00002206                          1528      
00002206                          1529      
00002206                          1530      ; draw box around top ui
00002206                          1531      
00002206                          1532      ; set pen width TODO: create jsr for repeat code
00002206  4280                    1533      clr.l   d0
00002208  103C 005D               1534      move.b  #SET_PEN_WIDTH,d0
0000220C  323C 0002               1535      move.w  #TOP_UI_PEN,d1
00002210  4E4F                    1536      trap    #15
00002212                          1537    
00002212                          1538      ; set pen color to dark grey
00002212  103C 0050               1539      move.b  #SET_PEN_COLOR,d0
00002216  223C 007C7C7C           1540      move.l  #DARK_GREY,d1
0000221C  4E4F                    1541      trap    #15
0000221E                          1542      
0000221E  4281                    1543      clr.l   d1
00002220                          1544      
00002220                          1545      ; set trap code for line
00002220  103C 0054               1546      move.b  #DRAW_LINE,d0
00002224                          1547      
00002224                          1548      ; set positions and sub to shift grid out
00002224  323C 00FA               1549      move.w  #START_X,d1
00002228  343C 00C8               1550      move.w  #START_Y,d2
0000222C  5141                    1551      sub.w   #(BORDER_OFFSET*2),d1       ; TODO: just sub these values from START x/y when moving
0000222E  0442 003A               1552      sub.w   #(TOP_UI_HEIGHT+BORDER_OFFSET*2),d2
00002232  3601                    1553      move.w  d1,d3
00002234  3802                    1554      move.w  d2,d4
00002236                          1555      
00002236                          1556      ; horizontal grey line
00002236  0643 0198               1557      add.w   #(GRID_SIDE_LENGTH+BORDER_OFFSET*2),d3    ; x changes
0000223A  4E4F                    1558      trap    #15
0000223C                          1559      
0000223C                          1560      ; vertical grey line
0000223C  3601                    1561      move.w  d1,d3                   ; reset x position since it doesn't change
0000223E  0644 002E               1562      add.w   #(TOP_UI_HEIGHT-BORDER_OFFSET),d4    ; y changes
00002242  4E4F                    1563      trap    #15
00002244                          1564      
00002244                          1565      ; set pen color to highlight
00002244  103C 0050               1566      move.b  #SET_PEN_COLOR,d0
00002248  223C 00FCFCFC           1567      move.l  #HIGHLIGHT,d1
0000224E  4E4F                    1568      trap    #15
00002250                          1569      
00002250  4281                    1570      clr.l   d1
00002252                          1571      
00002252                          1572      ; set trap code for line
00002252  103C 0054               1573      move.b  #DRAW_LINE,d0
00002256                          1574      
00002256                          1575      ; set positions and sub to shift grid out TODO: make jsr
00002256  323C 00FA               1576      move.w  #START_X,d1
0000225A  0641 0190               1577      add.w   #GRID_SIDE_LENGTH,d1
0000225E  3601                    1578      move.w  d1,d3
00002260  343C 008E               1579      move.w  #(START_Y-TOP_UI_HEIGHT-(BORDER_OFFSET*2)),d2             ; d4 should stay the same
00002264                          1580      
00002264                          1581      ; vertical highlight
00002264  4E4F                    1582      trap    #15
00002266                          1583      
00002266                          1584      ; horizontal highlight
00002266  323C 00F2               1585      move.w  #(START_X-(BORDER_OFFSET*2)),d1
0000226A  3404                    1586      move.w  d4,d2
0000226C  4E4F                    1587      trap    #15
0000226E                          1588      
0000226E  4EB9 00002C40           1589      jsr     ClearRegisters
00002274                          1590      
00002274  207C 00000000           1591      move.l  #CLEAR_ADDRESS,a0
0000227A  227C 00000000           1592      move.l  #CLEAR_ADDRESS,a1
00002280  247C 00000000           1593      move.l  #CLEAR_ADDRESS,a2
00002286  267C 00000000           1594      move.l  #CLEAR_ADDRESS,a3
0000228C  287C 00000000           1595      move.l  #CLEAR_ADDRESS,a4
00002292                          1596  
00002292  4E75                    1597      rts
00002294                          1598  
00002294                          1599  
00002294                          1600  
00002294                          1601  
00002294                          1602  
00002294                          1603  
00002294                          1604  
00002294                          1605  
00002294                          1606  
00002294                          1607  
00002294                          1608  -------------------- end include --------------------
00002294                          1609      include 'DrawSmiley.X68'
00002294                          1610  
00002294                          1611  
00002294  =00000004               1612  SMILEY_X_OFFSET         EQU     4
00002294  =00000005               1613  SMILEY_Y_OFFSET         EQU     5
00002294                          1614  
00002294  =00000006               1615  SMILEY_EXPRESS_OFFSET   EQU     6
00002294                          1616  
00002294  =000001B1               1617  SUNGLASSES_X            EQU     433
00002294  =00000096               1618  SUNGLASSES_Y_START      EQU     150
00002294  =0000009E               1619  SUNGLASSES_Y_RECOIL     EQU     158
00002294  =000000A0               1620  SUNGLASSES_Y_END        EQU     160
00002294  =0000001A               1621  SUNGLASSES_LENGTH       EQU     26
00002294  =00000003               1622  SUNGLASSES_SIDE_LENGTH  EQU     3
00002294  =00000008               1623  SUNGLASSES_EYE_LENGTH   EQU     8
00002294  =00000006               1624  SUNGLASSES_MID_LENGTH   EQU     6
00002294  =00000002               1625  SUNGLASSES_PEN_WIDTH    EQU     2
00002294  =00000001               1626  SUNGLASSES_SHADE_OFFSET EQU     1
00002294                          1627  
00002294  =00000001               1628  FIXED_POINT_SHIFT       EQU     1
00002294  =00000001               1629  SUNGLASSES_ACCELERATION EQU     1
00002294                          1630  
00002294                          1631  DrawSmileyStart
00002294                          1632  
00002294                          1633      ; prep positions for blank tile
00002294  4EB9 00002C40           1634      jsr     ClearRegisters
0000229A                          1635      
0000229A  323C 01AA               1636      move.w  #RESTART_LEFT,d1     ; smiley left
0000229E  3A01                    1637      move.w  d1,d5
000022A0  343C 0091               1638      move.w  #RESTART_TOP,d2      ; smiley top
000022A4  363C 01D2               1639      move.w  #RESTART_RIGHT,d3    ; smiley right
000022A8  383C 00B9               1640      move.w  #RESTART_BOTTOM,d4   ; smiley down
000022AC                          1641  
000022AC                          1642      ; draw blank tile
000022AC  4EB8 1BA6               1643      jsr     DrawBlankTile
000022B0                          1644      
000022B0                          1645      ; reprep positions for bitmap (TODO: optimize)
000022B0  2A3C 000001AD           1646      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(TILE_SIZE/2)-SMILEY_X_OFFSET+3),d5    ; smiley left
000022B6  343C 0093               1647      move.w  #(START_Y-TOP_UI_HEIGHT-SMILEY_Y_OFFSET+2),d2                         ; smiley top
000022BA                          1648      
000022BA                          1649      ; draw neutral smiley
000022BA                          1650  
000022BA  4EB9 00003500           1651      jsr     LoadStartSmiley
000022C0                          1652          
000022C0  4EB9 00002C40           1653      jsr     ClearRegisters
000022C6  4E75                    1654      rts
000022C8                          1655  
000022C8                          1656      
000022C8                          1657  SmileyShocked
000022C8                          1658  
000022C8                          1659      ; prep positions for shocked bitmap (TODO: optimize)
000022C8  2A3C 000001B3           1660      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(TILE_SIZE/2)-SMILEY_X_OFFSET+3+SMILEY_EXPRESS_OFFSET),d5    ; smiley left
000022CE  243C 00000099           1661      move.l  #(START_Y-TOP_UI_HEIGHT-SMILEY_Y_OFFSET+2+SMILEY_EXPRESS_OFFSET),d2                         ; smiley top
000022D4                          1662      
000022D4                          1663      ; draw shocked smiley
000022D4                          1664      
000022D4  4EB9 00003578           1665      jsr     LoadShockedSmiley
000022DA                          1666          
000022DA  4EB9 00002C40           1667      jsr     ClearRegisters   
000022E0  4EB9 00002ABA           1668      jsr     RepaintScreen
000022E6  4E75                    1669      rts
000022E8                          1670  
000022E8                          1671  SmileyNeutral
000022E8                          1672  
000022E8                          1673      ; prep positions for shocked bitmap (TODO: optimize)
000022E8  2A3C 000001B3           1674      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(TILE_SIZE/2)-SMILEY_X_OFFSET+3+SMILEY_EXPRESS_OFFSET),d5    ; smiley left
000022EE  243C 00000099           1675      move.l  #(START_Y-TOP_UI_HEIGHT-SMILEY_Y_OFFSET+2+SMILEY_EXPRESS_OFFSET),d2                         ; smiley top
000022F4                          1676      
000022F4                          1677      ; draw neutral smiley
000022F4                          1678      
000022F4  4EB9 0000353C           1679      jsr     LoadNeutralSmiley
000022FA                          1680          
000022FA  4EB9 00002C40           1681      jsr     ClearRegisters
00002300  4EB9 00002ABA           1682      jsr     RepaintScreen
00002306  4E75                    1683      rts
00002308                          1684      
00002308                          1685  SmileyDead
00002308                          1686      
00002308                          1687      ; prep positions for shocked bitmap (TODO: optimize)
00002308  2A3C 000001B3           1688      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(TILE_SIZE/2)-SMILEY_X_OFFSET+3+SMILEY_EXPRESS_OFFSET),d5    ; smiley left
0000230E  243C 00000099           1689      move.l  #(START_Y-TOP_UI_HEIGHT-SMILEY_Y_OFFSET+2+SMILEY_EXPRESS_OFFSET),d2                         ; smiley top
00002314                          1690      
00002314                          1691      ; draw dead smiley 
00002314                          1692      
00002314  4EB9 000035B4           1693      jsr     LoadDeadSmiley
0000231A                          1694      
0000231A  4EB9 00002C40           1695      jsr     ClearRegisters
00002320  4EB9 00002ABA           1696      jsr     RepaintScreen
00002326  4E75                    1697      rts
00002328                          1698      
00002328                          1699  DrawSmileySunglasses
00002328                          1700  
00002328  49F9 00002414           1701      lea     Sunglasses_Velocity,a4
0000232E  4BF9 00002418           1702      lea     Sunglasses_Current_Y,a5
00002334  28BC 00000000           1703      move.l  #CLEAR_ADDRESS,(a4)
0000233A  2ABC 00000096           1704      move.l  #SUNGLASSES_Y_START,(a5)
00002340                          1705  
00002340                          1706      ; draw starting sunglasses (use primitives)
00002340                          1707      
00002340  4EB9 000023C0           1708      jsr     DrawSunglasses
00002346                          1709      
00002346  4EB9 00002ABA           1710      jsr     RepaintScreen
0000234C                          1711    
0000234C                          1712  
0000234C                          1713  SunglassesFalling    
0000234C                          1714      *TODO:
0000234C                          1715      
0000234C                          1716      ; adjust y down and accelerate by adding velocity (fixed-point) also use time
0000234C  4282                    1717      clr.l   d2
0000234E  2415                    1718      move.l  (a5),d2
00002350  5254                    1719      add.w   #SUNGLASSES_ACCELERATION,(a4)
00002352  D454                    1720      add.w   (a4),d2
00002354  2A82                    1721      move.l  d2,(a5)
00002356  E24A                    1722      lsr.w   #FIXED_POINT_SHIFT,d2
00002358                          1723      
00002358                          1724      ; redraw bitmap behind
00002358  2A3C 000001AD           1725      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(TILE_SIZE/2)-SMILEY_X_OFFSET+3),d5    ; smiley left
0000235E  343C 0093               1726      move.w  #(START_Y-TOP_UI_HEIGHT-SMILEY_Y_OFFSET+2),d2                         ; smiley top
00002362  4EB9 000035F0           1727      jsr     LoadSunglassesSmiley 
00002368                          1728      
00002368                          1729      ; redraw sunglasses
00002368  4EB9 000023C0           1730      jsr     DrawSunglasses
0000236E                          1731      
0000236E                          1732      ; paint screen
0000236E  4EB9 00002ABA           1733      jsr     RepaintScreen
00002374                          1734      
00002374                          1735      ; loop falling down until over eyes
00002374  0C95 000000A0           1736      cmp.l   #SUNGLASSES_Y_END,(a5)
0000237A  6DD0                    1737      blt     SunglassesFalling
0000237C                          1738      
0000237C  28BC 00000000           1739      move.l  #CLEAR_ADDRESS,(a4)
00002382                          1740      
00002382                          1741  SunglassesRecoil
00002382                          1742      ; redraw recoil back up
00002382  4282                    1743      clr.l   d2
00002384  2415                    1744      move.l  (a5),d2
00002386  5254                    1745      add.w   #SUNGLASSES_ACCELERATION,(a4)
00002388  9454                    1746      sub.w   (a4),d2
0000238A  2A82                    1747      move.l  d2,(a5)
0000238C  E24A                    1748      lsr.w   #FIXED_POINT_SHIFT,d2
0000238E                          1749      
0000238E                          1750      ; redraw bitmap behind
0000238E  2A3C 000001AD           1751      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(TILE_SIZE/2)-SMILEY_X_OFFSET+3),d5    ; smiley left
00002394  343C 0093               1752      move.w  #(START_Y-TOP_UI_HEIGHT-SMILEY_Y_OFFSET+2),d2                         ; smiley top
00002398  4EB9 000035F0           1753      jsr     LoadSunglassesSmiley 
0000239E                          1754      
0000239E                          1755      ; redraw sunglasses slightly up
0000239E  4EB9 000023C0           1756      jsr     DrawSunglasses
000023A4                          1757      
000023A4                          1758      ; paint screen
000023A4  4EB9 00002ABA           1759      jsr     RepaintScreen
000023AA                          1760      
000023AA                          1761      ; loop recoil
000023AA  0C95 0000009E           1762      cmp.l   #SUNGLASSES_Y_RECOIL,(a5)
000023B0  6ED0                    1763      bgt     SunglassesRecoil
000023B2                          1764      
000023B2                          1765      ; reset fill color
000023B2  223C 00C0C0C0           1766      move.l  #LIGHT_GREY,d1
000023B8  103C 0051               1767      move.b  #SET_FILL_COLOR,d0
000023BC  4E4F                    1768      trap    #15
000023BE                          1769  
000023BE  4E75                    1770      rts
000023C0                          1771      
000023C0                          1772  DrawSunglasses
000023C0                          1773  
000023C0                          1774      ; set pen color to black
000023C0  103C 0050               1775      move.b  #SET_PEN_COLOR,d0
000023C4  7200                    1776      move.l  #BLACK,d1
000023C6  4E4F                    1777      trap    #15
000023C8                          1778      
000023C8                          1779      ; set fill color to black
000023C8  103C 0051               1780      move.b  #SET_FILL_COLOR,d0
000023CC  4E4F                    1781      trap    #15
000023CE                          1782      
000023CE                          1783      ; set pen width
000023CE  103C 005D               1784      move.b  #SET_PEN_WIDTH,d0
000023D2  7202                    1785      move.l  #SUNGLASSES_PEN_WIDTH,d1
000023D4  4E4F                    1786      trap    #15
000023D6                          1787  
000023D6                          1788      ; draw black horizontal line
000023D6  103C 0054               1789      move.b  #DRAW_LINE,d0
000023DA  223C 000001B1           1790      move.l  #SUNGLASSES_X,d1
000023E0  263C 000001CB           1791      move.l  #(SUNGLASSES_X+SUNGLASSES_LENGTH),d3
000023E6  2415                    1792      move.l  (a5),d2
000023E8  2802                    1793      move.l  d2,d4
000023EA  4E4F                    1794      trap    #15
000023EC                          1795      
000023EC                          1796      ; draw left black filled ellipse
000023EC  103C 0058               1797      move.b  #DRAW_FILLED_ELLIPSE,d0
000023F0  5342                    1798      sub.w   #SUNGLASSES_SHADE_OFFSET,d2
000023F2  5641                    1799      add.w   #SUNGLASSES_SIDE_LENGTH,d1
000023F4  263C 000001BC           1800      move.l  #(SUNGLASSES_X+(SUNGLASSES_SIDE_LENGTH+SUNGLASSES_EYE_LENGTH)),d3
000023FA  5044                    1801      add.w   #SUNGLASSES_EYE_LENGTH,d4
000023FC  4E4F                    1802      trap    #15
000023FE                          1803      
000023FE                          1804      ; draw right black filled ellipse
000023FE  103C 0058               1805      move.b  #DRAW_FILLED_ELLIPSE,d0
00002402  223C 000001C0           1806      move.l  #(SUNGLASSES_X+SUNGLASSES_LENGTH-SUNGLASSES_EYE_LENGTH-SUNGLASSES_SIDE_LENGTH),d1
00002408  263C 000001C8           1807      move.l  #(SUNGLASSES_X+SUNGLASSES_LENGTH-SUNGLASSES_SIDE_LENGTH),d3
0000240E  4E4F                    1808      trap    #15
00002410                          1809      
00002410  5242                    1810      add.w   #SUNGLASSES_SHADE_OFFSET,d2
00002412                          1811      
00002412  4E75                    1812      rts
00002414                          1813      
00002414                          1814  Sunglasses_Velocity     ds.l    1
00002418                          1815  Sunglasses_Current_Y    ds.l    1  
0000241C                          1816  
0000241C                          1817  
0000241C                          1818  
0000241C                          1819  
0000241C                          1820  
0000241C                          1821  
0000241C                          1822  
0000241C                          1823  
0000241C                          1824  -------------------- end include --------------------
0000241C                          1825      include 'ClickEventHandler.X68'
0000241C                          1826  
0000241C                          1827  
0000241C  =00000002               1828  GET_X_COORDINATE        EQU     2
0000241C  =00000002               1829  FLAG_CLICK              EQU     02
0000241C  =0000000A               1830  BOMB_TILE               EQU     $A
0000241C  =00000009               1831  TILE_MAX_PLUS_ONE       EQU     9
0000241C                          1832  
0000241C                          1833  
0000241C                          1834  ClickEventHandler
0000241C                          1835  
0000241C                          1836      ; d3 contains type of tile that was clicked    
0000241C                          1837      ; get location of tile in d3
0000241C                          1838      
0000241C                          1839      ; load in address of coordinates
0000241C  45F8 1168               1840      lea     Coordinates,a2
00002420                          1841      
00002420                          1842      ; reset address of a3 to start at a2
00002420  364A                    1843      move.w  a2,a3
00002422                          1844      
00002422                          1845      ; store d5 in d4 before using d5 for calculating coordinates
00002422  2805                    1846      move.l  d5,d4
00002424  4844                    1847      swap    d4
00002426                          1848      
00002426                          1849      ; move to coordinates of tile in d3 d5*4 for y, same but + 2 for x
00002426                          1850      ; shift by two because each coordinate pair (x,y) stored in a long
00002426  E54D                    1851      lsl.w   #SHIFT_FOR_BITS,d5
00002428                          1852      
00002428                          1853      ; use d1 for x and d2 for y for location of tile
00002428  3432 5800               1854      move.w  (a2,d5.l),d2
0000242C  5445                    1855      addi.w  #GET_X_COORDINATE,d5
0000242E  3232 5800               1856      move.w  (a2,d5.l),d1
00002432                          1857      
00002432                          1858      ; event for flag click (check if d0 == 02)
00002432  B03C 0002               1859      cmp.b   #FLAG_CLICK,d0
00002436  6700 081A               1860      beq     FlagTileEvent
0000243A                          1861  
0000243A                          1862  RevealTile    
0000243A                          1863      ; event for bomb tile (check if d3 == 0A)
0000243A  B67C 000A               1864      cmp.w   #BOMB_TILE,d3
0000243E  6700 04F6               1865      beq     BombTileEvent
00002442                          1866      
00002442                          1867      ; event for empty tile (check if d3 == 00)
00002442  B67C 0000               1868      cmp.w   #0,d3
00002446  6700 0182               1869      beq     BlankTileEvent
0000244A                          1870      
0000244A                          1871      ; event for number tile (check if d3 < 9)
0000244A  B67C 0009               1872      cmp.w   #TILE_MAX_PLUS_ONE,d3
0000244E  6D00 00EC               1873      blt     DrawNumberTile
00002452                          1874      
00002452                          1875      ; check if anymore tiles on stack to check
00002452                          1876  CheckRemainingStack
00002452  49F8 1902               1877      lea     BFS_Stack_Offset,a4
00002456  0C54 0000               1878      cmp.w   #0,(a4)
0000245A  6700 001C               1879      beq     ClickEventDone
0000245E                          1880      
0000245E                          1881      ; update values to next address on stack
0000245E  5554                    1882      sub.w   #ADDRESS_SPACE,(a4)
00002460  3014                    1883      move.w  (a4),d0
00002462  49F8 167A               1884      lea     BFS_Stack,a4
00002466  D8C0                    1885      adda    d0,a4
00002468  584C                    1886      adda    #(ADDRESS_SPACE*2),a4
0000246A  4280                    1887      clr.l   d0
0000246C                          1888      
0000246C                          1889      ; update current tile address
0000246C  3254                    1890      move.w  (a4),a1
0000246E                          1891      
0000246E                          1892      ; get tile type
0000246E  1611                    1893      move.b  (a1),d3
00002470                          1894      
00002470                          1895      ; get tile position (current tile address - tiles start) in d5 then moves to d4
00002470  3A09                    1896      move.w  a1,d5
00002472  9A48                    1897      sub.w   a0,d5
00002474                          1898      
00002474                          1899      ; get x, y coordinates retrieved when going back to beginning of routine   
00002474  4EB8 241C               1900      jsr     ClickEventHandler
00002478                          1901  
00002478                          1902  ClickEventDone    
00002478  4E75                    1903      rts
0000247A                          1904  
0000247A                          1905  
0000247A                          1906  
0000247A                          1907  
0000247A                          1908  
0000247A                          1909  
0000247A                          1910  
0000247A                          1911  
0000247A                          1912  
0000247A                          1913  
0000247A                          1914  
0000247A                          1915  
0000247A                          1916  
0000247A                          1917  
0000247A                          1918  
0000247A                          1919  
0000247A                          1920  
0000247A                          1921  
0000247A                          1922  
0000247A                          1923  
0000247A                          1924  
0000247A                          1925  -------------------- end include --------------------
0000247A                          1926      include 'GameStateHandler.X68'
0000247A                          1927  
0000247A                          1928  
0000247A  =00B04D10               1929  WINDOWS_BLUE            EQU     $b04d10
0000247A  =00C0C0C0               1930  LIGHT_GREY              EQU     $c0c0c0
0000247A                          1931  
0000247A  =00000015               1932  SET_TEXT_COLOR          EQU     21
0000247A  =00000051               1933  SET_FILL_COLOR          EQU     81
0000247A  =0000005F               1934  DRAW_TEXT               EQU     95
0000247A                          1935  
0000247A  =00FFFFFF               1936  DEFAULT_TEXT_COLOR      EQU     $00FFFFFF
0000247A  =00000000               1937  DEFAULT_FONT            EQU     $00000000
0000247A                          1938  
0000247A  =00000000               1939  NO_TILES_LEFT           EQU     00
0000247A                          1940  
0000247A  =00000000               1941  TITLE_SCREEN            EQU     00
0000247A  =00000001               1942  IN_GAME                 EQU     01
0000247A  =00000002               1943  END_GAME                EQU     02
0000247A  =00000003               1944  RESTART_GAME            EQU     03
0000247A                          1945  
0000247A  =00000002               1946  HOW_TO_LOADING_POS_X    EQU     2
0000247A  =00000299               1947  HOW_TO_LOADING_POS_Y    EQU     665
0000247A  =00000000               1948  HOW_TO_OFF              EQU     00
0000247A  =00000001               1949  HOW_TO_ON               EQU     01
0000247A                          1950  
0000247A                          1951  
0000247A                          1952  GameStateHandler
0000247A                          1953  
0000247A                          1954      ; TODO: make game state make more sense
0000247A                          1955  
0000247A                          1956      ; check if all non bomb tiles have been clicked (trigger win game if so)
0000247A  49F8 1B92               1957      lea     Non_Bomb_Tiles,a4
0000247E  0C94 00000000           1958      cmp.l   #NO_TILES_LEFT,(a4)
00002484  6700 0004               1959      beq     AllNonBombTilesClicked
00002488                          1960      
00002488                          1961      ; return to read mouse loop if state is unchanged
00002488  4E75                    1962      rts
0000248A                          1963      
0000248A                          1964  AllNonBombTilesClicked
0000248A                          1965  
0000248A  4EB9 000024AA           1966      jsr     GameWinEvent
00002490  4E75                    1967      rts
00002492                          1968      
00002492                          1969  GameLoseEvent
00002492                          1970  
00002492  4EB9 00002ECC           1971      jsr     UpdateSevenSegment
00002498  4EB8 2308               1972      jsr     SmileyDead
0000249C  4EB9 002BB838           1973      jsr     PlayLoseSound
000024A2  4EB9 000024C2           1974      jsr     SetEndGameState
000024A8  4E75                    1975      rts
000024AA                          1976  
000024AA                          1977  GameWinEvent
000024AA                          1978  
000024AA  4EB9 00002ECC           1979      jsr     UpdateSevenSegment
000024B0  4EB8 2328               1980      jsr     DrawSmileySunglasses
000024B4  4EB9 002BB84C           1981      jsr     PlayWinSound
000024BA  4EB9 000024C2           1982      jsr     SetEndGameState
000024C0  4E75                    1983      rts
000024C2                          1984      
000024C2                          1985  SetEndGameState
000024C2  49F8 1B9E               1986      lea     Game_State,a4
000024C6  28BC 00000002           1987      move.l  #END_GAME,(a4)
000024CC  4E75                    1988      rts
000024CE                          1989  
000024CE                          1990      
000024CE                          1991  UpdateHowToState
000024CE                          1992  
000024CE                          1993      ; put loading text
000024CE                          1994      
000024CE                          1995      ; set fill color for loading screen
000024CE  103C 0051               1996      move.b  #SET_FILL_COLOR,d0
000024D2  223C 00B04D10           1997      move.l  #WINDOWS_BLUE,d1
000024D8  4E4F                    1998      trap    #15
000024DA  4281                    1999      clr.l   d1
000024DC                          2000      
000024DC                          2001      ; reset font size
000024DC  103C 0015               2002      move.b  #SET_TEXT_COLOR,d0
000024E0  223C 00FFFFFF           2003      move.l  #DEFAULT_TEXT_COLOR,d1
000024E6  7400                    2004      move.l  #DEFAULT_FONT,d2
000024E8  4E4F                    2005      trap    #15
000024EA                          2006      
000024EA                          2007      ; set location of loading text
000024EA  323C 0002               2008      move.w  #HOW_TO_LOADING_POS_X,d1
000024EE  343C 0299               2009      move.w  #HOW_TO_LOADING_POS_Y,d2
000024F2                          2010      
000024F2                          2011      ; display loading text
000024F2  43F8 1E9C               2012      lea     Loading_String,a1
000024F6  103C 005F               2013      move.b  #DRAW_TEXT,d0
000024FA  4E4F                    2014      trap    #15
000024FC                          2015      
000024FC                          2016      ; repaint screen
000024FC  4EB9 00002ABA           2017      jsr     RepaintScreen
00002502                          2018      
00002502                          2019      ; reset pos and fill color
00002502  103C 0051               2020      move.b  #SET_FILL_COLOR,d0
00002506  223C 00C0C0C0           2021      move.l  #LIGHT_GREY,d1
0000250C  4E4F                    2022      trap    #15
0000250E  4281                    2023      clr.l   d1
00002510                          2024      
00002510  4281                    2025      clr.l   d1
00002512  4282                    2026      clr.l   d2
00002514  227C 00000000           2027      move.l  #CLEAR_ADDRESS,a1
0000251A                          2028      
0000251A                          2029      ; load in bitmap
0000251A  49F8 1BA2               2030      lea     How_To_State,a4
0000251E  0C94 00000000           2031      cmp.l   #HOW_TO_OFF,(a4)
00002524  6700 0006               2032      beq     OpenHowToPlay
00002528  6600 000A               2033      bne     CloseHowToPlay
0000252C                          2034      
0000252C                          2035  OpenHowToPlay
0000252C  4EB9 0000366C           2036      jsr     LoadInHowToPlay
00002532  4E75                    2037      rts
00002534                          2038  
00002534                          2039  CloseHowToPlay
00002534  4EB9 000036BC           2040      jsr     LoadOutHowToPlay
0000253A  4E75                    2041      rts
0000253C                          2042  
0000253C                          2043  
0000253C                          2044  
0000253C                          2045  
0000253C                          2046  
0000253C                          2047  
0000253C                          2048  
0000253C                          2049  
0000253C                          2050  
0000253C                          2051  
0000253C                          2052  -------------------- end include --------------------
0000253C                          2053      include 'DrawNumberTile.X68'
0000253C                          2054      
0000253C                          2055      ; put in equates for number colors
0000253C                          2056  
0000253C  =00000000               2057  PADDING_COLOR       EQU 0    
0000253C  =00FD0000               2058  ONE_COLOR           EQU $00fd0000
0000253C  =00007E01               2059  TWO_COLOR           EQU $00007e01
0000253C  =000000FE               2060  THREE_COLOR         EQU $000000fe
0000253C  =00800101               2061  FOUR_COLOR          EQU $00800101
0000253C  =00010181               2062  FIVE_COLOR          EQU $00010181
0000253C  =00808000               2063  SIX_COLOR           EQU $00808000
0000253C  =00000000               2064  SEVEN_COLOR         EQU $00000000
0000253C  =00808080               2065  EIGHT_COLOR         EQU $00808080 
0000253C                          2066      
0000253C  =00000004               2067  TEXT_POS_DIVISOR    EQU 4    
0000253C  =00000002               2068  MULTIPLY_4          EQU 2       ;TODO: consolidate
0000253C  =00000002               2069  DIVIDE_4            EQU 2
0000253C  =00000002               2070  SUBTRACT_2          EQU 2
0000253C  =00000030               2071  ASCII_OFFSET        EQU $30
0000253C  =00000010               2072  CLICKED_OFFSET      EQU $10
0000253C                          2073  
0000253C  =00000015               2074  SET_TEXT_COLOR      EQU 21
0000253C  =02140001               2075  TEXT_SETTINGS       EQU $02140001   
0000253C  =0000005F               2076  DRAW_TEXT           EQU 95 
0000253C                          2077  
0000253C                          2078  DrawNumberTile
0000253C                          2079  
0000253C                          2080      ; retrieve tile coordinates beforehand (x=d1,y=d2)
0000253C                          2081  
0000253C                          2082      ; swap d3 to store for later (TODO: store more optimally, consider stack)
0000253C  4843                    2083      swap    d3
0000253E  4EB9 00002602           2084      jsr     DrawClicked
00002544  4843                    2085      swap    d3
00002546                          2086      
00002546                          2087      ; draw text at x,y + tile width / 4 
00002546  0641 000A               2088      addi.w  #(TILE_SIZE/TEXT_POS_DIVISOR),d1
0000254A  0642 000A               2089      addi.w  #(TILE_SIZE/TEXT_POS_DIVISOR),d2
0000254E                          2090      
0000254E                          2091      ; set look up table for colors by lea into a4 (move d1 into d4)
0000254E  49F9 000025A2           2092      lea     Color_Table,a4
00002554  3801                    2093      move.w  d1,d4
00002556  3C03                    2094      move.w  d3,d6       ; to multiply for longs
00002558  E54E                    2095      lsl.w   #MULTIPLY_4,d6
0000255A  2234 6800               2096      move.l  (a4,d6.l),d1
0000255E                          2097      
0000255E                          2098      ; move d2 to not affect text
0000255E  3C02                    2099      move.w  d2,d6
00002560  243C 02140001           2100      move.l  #TEXT_SETTINGS,d2
00002566                          2101      
00002566                          2102      ; set text color
00002566  7015                    2103      move.l  #SET_TEXT_COLOR,d0
00002568  4E4F                    2104      trap    #15
0000256A                          2105      
0000256A  43F9 000025C6           2106      lea     Number_To_Display,a1
00002570  1E03                    2107      move.b  d3,d7
00002572  0687 00000030           2108      addi.l  #ASCII_OFFSET,d7
00002578  4847                    2109      swap    d7
0000257A  E18F                    2110      lsl.l   #8,d7
0000257C  2287                    2111      move.l  d7,(a1)
0000257E                          2112      
0000257E                          2113      ; move d4 back into d1 for x pos and d6 to d2 for y pos
0000257E  2204                    2114      move.l  d4,d1
00002580  2406                    2115      move.l  d6,d2
00002582                          2116      
00002582                          2117      ; set to draw text
00002582  103C 005F               2118      move.b  #DRAW_TEXT,d0
00002586  4E4F                    2119      trap    #15
00002588                          2120      
00002588                          2121      ; clear where ascii number is stored
00002588  4291                    2122      clr.l   (a1)
0000258A                          2123      
0000258A                          2124      ; set tile to clicked
0000258A  0643 0010               2125      addi.w  #CLICKED_OFFSET,d3
0000258E                          2126      
0000258E  5545                    2127      sub.w   #SUBTRACT_2,d5     ; subtract 2 since we added earlier
00002590  E44D                    2128      lsr.w   #DIVIDE_4,d5       ; divide by 4 since we multiplied earlier
00002592  1183 5800               2129      move.b  d3,(a0,d5.l)       ; update byte to clicked value
00002596                          2130      
00002596  4EB9 00002ABA           2131      jsr     RepaintScreen
0000259C                          2132  
0000259C                          2133  ReturnToClickEventHandler    
0000259C                          2134      ; after we update, return back to click event handler
0000259C  4EB8 241C               2135      jsr     ClickEventHandler
000025A0  4E75                    2136      rts
000025A2                          2137      
000025A2                          2138  Color_Table
000025A2                          2139              *1-8
000025A2= 00000000 00FD0000 ...   2140              dc.l    PADDING_COLOR,ONE_COLOR,TWO_COLOR,THREE_COLOR,FOUR_COLOR,FIVE_COLOR,SIX_COLOR,SEVEN_COLOR,EIGHT_COLOR
000025C6                          2141  Number_To_Display
000025C6                          2142              ds.l    1
000025CA                          2143  
000025CA                          2144  
000025CA                          2145  
000025CA                          2146  
000025CA                          2147  
000025CA                          2148  
000025CA                          2149  
000025CA                          2150  
000025CA                          2151  
000025CA                          2152  
000025CA                          2153  -------------------- end include --------------------
000025CA                          2154      include 'BlankTileEvent.X68'
000025CA                          2155  
000025CA                          2156  BlankTileEvent
000025CA                          2157  
000025CA                          2158      ; display tile as clicked and update in memory as clicked
000025CA  4EB9 00002602           2159      jsr     DrawClicked 
000025D0                          2160      
000025D0                          2161      ; clear d5 and swap back d4 for validating surrounding tiles
000025D0  4285                    2162      clr.l   d5
000025D2  4844                    2163      swap    d4
000025D4                          2164      
000025D4                          2165      ; check surrounding tiles - store valid tiles on stack
000025D4                          2166      ; table for implementing valid tiles (valid meaning they exist)   
000025D4  4EB9 000026D4           2167      jsr     ValidateSurroundingTiles
000025DA                          2168      
000025DA                          2169      ; use d5 (flags for which tiles nearby are valid) and d4 (relative tile location) to get addresses of surrounding tiles
000025DA                          2170      ; marks current tile as done when tiles have been pushed    
000025DA  45F8 1902               2171      lea     BFS_Stack_Offset,a2
000025DE  47F8 167A               2172      lea     BFS_Stack,a3
000025E2  D6D2                    2173      adda    (a2),a3
000025E4  544B                    2174      adda    #ADDRESS_SPACE,a3
000025E6  4EB9 00002792           2175      jsr     PushSurroundingTiles
000025EC                          2176      
000025EC                          2177      ; return to click event handler, BFS stack will be checked for remaining tiles  
000025EC  4EB8 2452               2178      jsr     CheckRemainingStack 
000025F0  4E75                    2179      rts
000025F2                          2180  
000025F2                          2181  
000025F2                          2182  
000025F2                          2183  
000025F2                          2184  
000025F2                          2185  
000025F2                          2186  
000025F2                          2187  
000025F2                          2188  
000025F2                          2189  -------------------- end include --------------------
000025F2                          2190      include 'DrawClicked.X68'
000025F2                          2191  
000025F2                          2192  SetCoordinatesRect
000025F2                          2193      ; move x back to d1
000025F2  2207                    2194      move.l  d7,d1
000025F4                          2195      
000025F4                          2196      ; set d3 and d4
000025F4  3601                    2197      move.w  d1,d3
000025F6  3802                    2198      move.w  d2,d4
000025F8  0643 0028               2199      add.w   #TILE_SIZE,d3
000025FC  0644 0028               2200      add.w   #TILE_SIZE,d4
00002600                          2201      
00002600  4E75                    2202      rts
00002602                          2203  
00002602                          2204  DrawClicked
00002602                          2205  
00002602                          2206      ; store x in d7 to be used later
00002602  3E01                    2207      move.w  d1,d7
00002604                          2208      
00002604                          2209      ; set pen width
00002604  4280                    2210      clr.l   d0
00002606  103C 005D               2211      move.b  #SET_PEN_WIDTH,d0
0000260A  323C 0004               2212      move.w  #PEN_WIDTH,d1
0000260E  4E4F                    2213      trap    #15
00002610                          2214  
00002610                          2215      ; set pen color
00002610  103C 0050               2216      move.b  #SET_PEN_COLOR,d0
00002614  223C 00C0C0C0           2217      move.l  #LIGHT_GREY,d1
0000261A  4E4F                    2218      trap    #15
0000261C                          2219      
0000261C  4EB8 25F2               2220      jsr     SetCoordinatesRect
00002620                          2221      
00002620                          2222      ; draw light grey unfilled rectangle to get rid of shading
00002620  103C 005A               2223      move.b  #DRAW_RECT_UNFILLED,d0
00002624  4E4F                    2224      trap    #15
00002626                          2225      
00002626                          2226      ; set pen width to narrower
00002626  4280                    2227      clr.l   d0
00002628  103C 005D               2228      move.b  #SET_PEN_WIDTH,d0
0000262C  323C 0004               2229      move.w  #PEN_WIDTH,d1
00002630  E449                    2230      lsr.w   #HALF_WIDTH,d1
00002632  4E4F                    2231      trap    #15
00002634                          2232  
00002634                          2233      ; set pen color
00002634  103C 0050               2234      move.b  #SET_PEN_COLOR,d0
00002638  223C 007C7C7C           2235      move.l  #DARK_GREY,d1
0000263E  4E4F                    2236      trap    #15
00002640                          2237      
00002640  4EB8 25F2               2238      jsr     SetCoordinatesRect
00002644                          2239      
00002644                          2240      ; adjust coordinates to compensate for narrower lines
00002644  5541                    2241      sub.w   #HALF_WIDTH,d1
00002646  5542                    2242      sub.w   #HALF_WIDTH,d2
00002648  5443                    2243      add.w   #HALF_WIDTH,d3
0000264A  5444                    2244      add.w   #HALF_WIDTH,d4
0000264C                          2245      
0000264C                          2246      ; draw dark grey unfilled rectangle for clicked
0000264C  103C 005A               2247      move.b  #DRAW_RECT_UNFILLED,d0
00002650  4E4F                    2248      trap    #15
00002652                          2249      
00002652                          2250      ; adjust coordinates back to original position
00002652  5441                    2251      add.w   #HALF_WIDTH,d1
00002654  5442                    2252      add.w   #HALF_WIDTH,d2
00002656                          2253  
00002656  4243                    2254      clr.w   d3      ; don't clear long because tile type is stored in upper word
00002658  4244                    2255      clr.w   d4      ; don't clear long because tile type is stored in upper word
0000265A  4287                    2256      clr.l   d7
0000265C                          2257      
0000265C                          2258      ; check if bomb has been clicked so non-bomb tiles are not decremented
0000265C  49F9 000029D2           2259      lea     Clicked_Bomb_Address,a4
00002662  0C54 FFFF               2260      cmp.w   #CLICKED_BOMB_UNSTORED,(a4)
00002666  6600 000E               2261      bne     ReturnAfterDrawingClicked
0000266A                          2262      
0000266A                          2263      ; since not bomb, decrement num non-bomb tiles 
0000266A  49F8 1B92               2264      lea     Non_Bomb_Tiles,a4
0000266E  5394                    2265      sub.l   #1,(a4)
00002670  287C 00000000           2266      move.l  #CLEAR_ADDRESS,a4
00002676                          2267  
00002676                          2268  ReturnAfterDrawingClicked    
00002676  4EB9 00002ABA           2269      jsr     RepaintScreen
0000267C  4E75                    2270      rts
0000267E                          2271      
0000267E                          2272  
0000267E                          2273  
0000267E                          2274  
0000267E                          2275  
0000267E                          2276  
0000267E                          2277  
0000267E                          2278  
0000267E                          2279  -------------------- end include --------------------
0000267E                          2280      include 'DrawScreenBorder.X68'
0000267E                          2281  
0000267E  =00C0C0C0               2282  LIGHT_GREY              EQU     $c0c0c0
0000267E  =007C7C7C               2283  DARK_GREY               EQU     $7c7c7c
0000267E  =00FCFCFC               2284  HIGHLIGHT               EQU     $fcfcfc
0000267E                          2285  
0000267E  =00000004               2286  PEN_WIDTH               EQU     4
0000267E                          2287  
0000267E  =00000050               2288  SET_PEN_COLOR           EQU     80
0000267E  =00000051               2289  SET_FILL_COLOR          EQU     81
0000267E  =00000052               2290  DRAW_PIXEL              EQU     82
0000267E  =00000054               2291  DRAW_LINE               EQU     84
0000267E  =00000057               2292  DRAW_RECT_FILLED        EQU     87
0000267E  =00000059               2293  FLOOD_FILL_AREA         EQU     89
0000267E  =0000005A               2294  DRAW_RECT_UNFILLED      EQU     90
0000267E  =0000005D               2295  SET_PEN_WIDTH           EQU     93
0000267E                          2296  
0000267E  =00000004               2297  SCREEN_BORDER_WIDTH     EQU     4
0000267E                          2298  
0000267E  =00000004               2299  SCREEN_OFFSET           EQU     4
0000267E                          2300  
0000267E                          2301  
0000267E                          2302  DrawScreenBorder
0000267E                          2303  
0000267E                          2304      ; set pen width
0000267E  4280                    2305      clr.l   d0
00002680  103C 005D               2306      move.b  #SET_PEN_WIDTH,d0
00002684  323C 0004               2307      move.w  #SCREEN_BORDER_WIDTH,d1
00002688  4E4F                    2308      trap    #15
0000268A                          2309      
0000268A                          2310      ; draw dark grey lines for screen border
0000268A  103C 0050               2311      move.b  #SET_PEN_COLOR,d0
0000268E  223C 007C7C7C           2312      move.l  #DARK_GREY,d1
00002694  4E4F                    2313      trap    #15
00002696                          2314      
00002696                          2315      ; screen dimensions: 640 x 480
00002696                          2316      
00002696  4281                    2317      clr.l   d1   
00002698                          2318  
00002698                          2319      ; set coordinates (d1 and d2 are 0)
00002698  0643 0384               2320      add.w   #SCREEN_WIDTH,d3
0000269C  0644 02BC               2321      add.w   #SCREEN_HEIGHT,d4
000026A0                          2322      
000026A0                          2323      ; horizontal dark line
000026A0  103C 0054               2324      move.b  #DRAW_LINE,d0
000026A4  3404                    2325      move.w  d4,d2               ; y doesn't change
000026A6  4E4F                    2326      trap    #15
000026A8                          2327      
000026A8                          2328      ; vertical dark line
000026A8  4282                    2329      clr.l   d2
000026AA  3203                    2330      move.w  d3,d1               ; x doesn't change
000026AC  4E4F                    2331      trap    #15
000026AE                          2332      
000026AE                          2333      ; draw highlights for screen border
000026AE  103C 0050               2334      move.b  #SET_PEN_COLOR,d0
000026B2  223C 00FCFCFC           2335      move.l  #HIGHLIGHT,d1
000026B8  4E4F                    2336      trap    #15
000026BA                          2337      
000026BA  4281                    2338      clr.l   d1
000026BC                          2339  
000026BC                          2340      ; horizontal highlight line
000026BC  103C 0054               2341      move.b  #DRAW_LINE,d0
000026C0  4284                    2342      clr.l   d4                  ; y doesn't change
000026C2  4E4F                    2343      trap    #15
000026C4                          2344      
000026C4                          2345      ; vertical highlight line
000026C4  4283                    2346      clr.l   d3                  ; x doesn't change
000026C6  0644 02BC               2347      add.w   #SCREEN_HEIGHT,d4 
000026CA  4E4F                    2348      trap    #15
000026CC                          2349  
000026CC  4EB9 00002C40           2350      jsr     ClearRegisters
000026D2                          2351      
000026D2  4E75                    2352      rts
000026D4                          2353  
000026D4                          2354  
000026D4                          2355  
000026D4                          2356  -------------------- end include --------------------
000026D4                          2357      include 'ValidateSurroundingTiles.X68'
000026D4                          2358  
000026D4                          2359  
000026D4  =00000001               2360  SHIFT_FOR_WORD          EQU     1
000026D4  =00000000               2361  CLEAR_ADDRESS           EQU     0
000026D4                          2362  
000026D4                          2363  ValidateSurroundingTiles
000026D4                          2364      
000026D4  49F9 000026EA           2365      lea     Table_Of_Validation,a4
000026DA  E38C                    2366      lsl.l   #SHIFT_FOR_WORD,d4
000026DC  3A34 4800               2367      move.w  (a4,d4.l),d5
000026E0  E28C                    2368      lsr.l   #SHIFT_FOR_WORD,d4
000026E2  287C 00000000           2369      move.l  #CLEAR_ADDRESS,a4
000026E8                          2370      
000026E8  4E75                    2371      rts
000026EA                          2372      
000026EA                          2373  Table_Of_Validation
000026EA                          2374              * 0-8
000026EA= 00D0 00F8 00F8 0...     2375              dc.w    TOP_LEFT_TILE,TOP_TILE,TOP_TILE,TOP_TILE,TOP_TILE,TOP_TILE,TOP_TILE,TOP_TILE,TOP_RIGHT_TILE
000026FC                          2376              * 9-17
000026FC= 00D6 00FF 00FF 0...     2377              dc.w    LEFT_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,RIGHT_TILE
0000270E                          2378              * 18-26
0000270E= 00D6 00FF 00FF 0...     2379              dc.w    LEFT_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,RIGHT_TILE
00002720                          2380              * 27-35
00002720= 00D6 00FF 00FF 0...     2381              dc.w    LEFT_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,RIGHT_TILE
00002732                          2382              * 36-44
00002732= 00D6 00FF 00FF 0...     2383              dc.w    LEFT_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,RIGHT_TILE
00002744                          2384              * 45-53
00002744= 00D6 00FF 00FF 0...     2385              dc.w    LEFT_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,RIGHT_TILE
00002756                          2386              * 54-62
00002756= 00D6 00FF 00FF 0...     2387              dc.w    LEFT_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,RIGHT_TILE
00002768                          2388              * 63-71
00002768= 00D6 00FF 00FF 0...     2389              dc.w    LEFT_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,MIDDLE_TILE,RIGHT_TILE
0000277A                          2390              * 72-80
0000277A= 0016 001F 001F 0...     2391              dc.w    BOTTOM_LEFT_TILE,BOTTOM_TILE,BOTTOM_TILE,BOTTOM_TILE,BOTTOM_TILE,BOTTOM_TILE,BOTTOM_TILE,BOTTOM_TILE,BOTTOM_RIGHT_TILE
0000278C                          2392              * padding
0000278C                          2393              ds.w    3
00002792                          2394  
00002792                          2395  
00002792                          2396  
00002792                          2397  
00002792                          2398  
00002792                          2399  
00002792                          2400  
00002792                          2401  
00002792                          2402  
00002792                          2403  -------------------- end include --------------------
00002792                          2404      include 'PushSurroundingTiles.X68'
00002792                          2405  
00002792  =00000008               2406  NUM_TILES_SURROUNDING   EQU     8 
00002792  =00000001               2407  RIGHT_MOST_BIT          EQU     1
00002792  =00000002               2408  SHIFT_FOR_BITS          EQU     2
00002792                          2409  
00002792  =00000010               2410  CLICKED_OFFSET          EQU     $10
00002792  =00000002               2411  ADDRESS_SPACE           EQU     2
00002792  =FFFFFFFF               2412  ONE_BEFORE              EQU     -1
00002792                          2413  
00002792  =000000FF               2414  UNSET_TILE              EQU     $FF
00002792                          2415  
00002792  =FFFFFFFF               2416  ONE_BEFORE              EQU     -1
00002792                          2417  
00002792                          2418  PushSurroundingTiles
00002792                          2419      ; use each bit flag to figure out tile location relative to current tile (d4)
00002792                          2420      ; use table of routines that each find the address of surrounding tile depending on location (8 total)
00002792                          2421      ; figure out which flags are on by looping through anding with 1 and shifting right by 1 (8 times)
00002792                          2422      
00002792                          2423      ; start at negative one (ONE_BEFORE) since counter increments at beginning
00002792                          2424      ; this is because the counter is used to shift the bitmask, and checked at the end if we reached the end of the bitmask
00002792  7EFF                    2425      move.l  #ONE_BEFORE,d7
00002794  49F8 2078               2426      lea     Relative_Tile_Positions,a4
00002798  4DF9 00002824           2427      lea     Surrounding_Tile_To_Check,a6
0000279E                          2428      
0000279E                          2429  LoopFlags
0000279E                          2430  
0000279E                          2431      ; increment counter by 1 (used to shift flags to check for each one)
0000279E  5287                    2432      add.l   #1,d7
000027A0                          2433      
000027A0                          2434      ; move tile position so it can be manipulated in a different register
000027A0  2C05                    2435      move.l  d5,d6
000027A2                          2436      
000027A2                          2437      ; shift tile position to flag we want to check
000027A2  EEAE                    2438      lsr.l   d7,d6
000027A4  CCBC 00000001           2439      and.l   #RIGHT_MOST_BIT,d6
000027AA  BCBC 00000001           2440      cmp.l   #RIGHT_MOST_BIT,d6
000027B0  6600 0014               2441      bne     CheckLoopCount                        ; if not flagged, loop again
000027B4                          2442      
000027B4                          2443      ; shift d7 to be number of bits offset by address (and move back) TODO: optimize this
000027B4  4286                    2444      clr.l   d6
000027B6  E58F                    2445      lsl.l   #SHIFT_FOR_BITS,d7
000027B8  2C34 7800               2446      move.l  (a4,d7.l),d6
000027BC  E48F                    2447      lsr.l   #SHIFT_FOR_BITS,d7
000027BE                          2448      
000027BE                          2449      ; calculate tile to be pushed
000027BE  DC44                    2450      add.w   d4,d6
000027C0  4EB9 000027D0           2451      jsr     CheckSurroundingType                            
000027C6                          2452  
000027C6                          2453      ; check if we have checked all surrounding tiles
000027C6                          2454  CheckLoopCount    
000027C6  BE3C 0008               2455      cmp.b   #NUM_TILES_SURROUNDING,d7
000027CA  6700 002A               2456      beq     PushedSurroundingTiles
000027CE  66CE                    2457      bne     LoopFlags
000027D0                          2458  
000027D0                          2459  
000027D0                          2460      ; use d6 to check type of file at location d6 (need to account for num bytes in bits = 4)   
000027D0                          2461      ; each time a tile is found, check status of tile and push address if appropriate    
000027D0                          2462      ; if tile at location is clicked or bomb, ignore (tile type value > 08)
000027D0                          2463      ; if tile is number or blank, store address on stack to be explored after the current one is explored (tile type value <= 08)
000027D0                          2464  CheckSurroundingType
000027D0  2248                    2465      move.l  a0,a1
000027D2  D2C6                    2466      adda    d6,a1
000027D4  1C91                    2467      move.b  (a1),(a6)
000027D6                          2468      
000027D6                          2469      ; if d6 is greater than 08, do nothing
000027D6  4286                    2470      clr.l   d6
000027D8  1C16                    2471      move.b  (a6),d6
000027DA  BCBC 00000008           2472      cmp.l   #NUM_TILES_SURROUNDING,d6
000027E0  6D00 000C               2473      blt     PushAddress
000027E4                          2474      
000027E4                          2475      ; check if FF for new board
000027E4  BC3C 00FF               2476      cmp.b   #UNSET_TILE,d6
000027E8  6700 0004               2477      beq     PushAddress
000027EC  4E75                    2478      rts
000027EE                          2479  
000027EE                          2480      ; valid address (number or blank) -> make room on stack pointer and push address onto stack pointer
000027EE                          2481  PushAddress
000027EE                          2482      ; increase BFS stack size by 1/2 bytes
000027EE  5452                    2483      add.w   #ADDRESS_SPACE,(a2)
000027F0                          2484      ; push stack top in BFS stack
000027F0  544B                    2485      adda    #ADDRESS_SPACE,a3
000027F2                          2486      ; push address of tile checked onto BFS stack
000027F2  3689                    2487      move.w  a1,(a3)
000027F4  4E75                    2488      rts
000027F6                          2489  
000027F6                          2490      ; return -> upon return push next available (if any) address to current (find tile coordinates, tile type, and position)    
000027F6                          2491  PushedSurroundingTiles
000027F6                          2492      ; mark current tile as done
000027F6  163C 0010               2493      move.b  #CLICKED_OFFSET,d3
000027FA                          2494      
000027FA                          2495      ; move current tile back to original location
000027FA  1183 4800               2496      move.b  d3,(a0,d4.l)
000027FE                          2497      
000027FE  4EB9 00002C40           2498      jsr     ClearRegisters
00002804  247C 00000000           2499      move.l  #CLEAR_ADDRESS,a2
0000280A  267C 00000000           2500      move.l  #CLEAR_ADDRESS,a3
00002810  287C 00000000           2501      move.l  #CLEAR_ADDRESS,a4
00002816  2A7C 00000000           2502      move.l  #CLEAR_ADDRESS,a5
0000281C  2C7C 00000000           2503      move.l  #CLEAR_ADDRESS,a6
00002822  4E75                    2504      rts
00002824                          2505      
00002824                          2506  Surrounding_Tile_To_Check
00002824                          2507                  ds.b    1
00002825                          2508  Padding_Check
00002825                          2509                  ds.b    1
00002826                          2510  
00002826                          2511  
00002826                          2512  
00002826                          2513  
00002826                          2514  
00002826                          2515  
00002826                          2516  
00002826                          2517  
00002826                          2518  -------------------- end include --------------------
00002826                          2519      include 'DrawBomb.X68'
00002826                          2520  
00002826                          2521  DrawBomb
00002826                          2522  
00002826                          2523      ; save d1 and d2 in d5 and d6
00002826  2A01                    2524      move.l  d1,d5
00002828  2C02                    2525      move.l  d2,d6
0000282A                          2526      
0000282A                          2527      ; set pen width
0000282A  4280                    2528      clr.l   d0
0000282C  103C 005D               2529      move.b  #SET_PEN_WIDTH,d0
00002830  323C 0003               2530      move.w  #BOMB_PEN_WIDTH,d1
00002834  4E4F                    2531      trap    #15
00002836                          2532  
00002836                          2533      ; set pen color to black
00002836  103C 0050               2534      move.b  #SET_PEN_COLOR,d0
0000283A  7200                    2535      move.l  #BLACK,d1
0000283C  4E4F                    2536      trap    #15
0000283E                          2537      
0000283E                          2538      ; set fill color to black
0000283E  103C 0051               2539      move.b  #SET_FILL_COLOR,d0
00002842  4E4F                    2540      trap    #15
00002844                          2541      
00002844                          2542      ; store pos in d1 and d2
00002844  2205                    2543      move.l  d5,d1
00002846  2406                    2544      move.l  d6,d2
00002848                          2545      
00002848                          2546      ; calc pos by adding quarter of tile size to each (divide tile size by 4 -- make equate)
00002848  0681 0000000A           2547      add.l   #TILE_QUARTER,d1
0000284E  0682 0000000A           2548      add.l   #TILE_QUARTER,d2
00002854                          2549      
00002854                          2550      ; use d1 and d2 to calc end positions d3 and d4
00002854  2601                    2551      move.l  d1,d3
00002856  2802                    2552      move.l  d2,d4
00002858  0683 00000014           2553      add.l   #BOMB_WIDTH,d3
0000285E  0684 00000014           2554      add.l   #BOMB_WIDTH,d4
00002864                          2555      
00002864                          2556      ; draw black filled circle from pos to pos+tile size
00002864  103C 0058               2557      move.b  #DRAW_ELLIPSE_FILLED,d0
00002868  4E4F                    2558      trap    #15
0000286A                          2559      
0000286A                          2560      ; draw down diagonal line
0000286A  103C 0054               2561      move.b  #DRAW_LINE,d0
0000286E  4E4F                    2562      trap    #15
00002870                          2563      
00002870                          2564      ; draw up diagonal line
00002870  2404                    2565      move.l  d4,d2
00002872  2806                    2566      move.l  d6,d4
00002874  0684 0000000A           2567      add.l   #TILE_QUARTER,d4
0000287A  4E4F                    2568      trap    #15
0000287C                          2569      
0000287C                          2570      ; draw horizontal line
0000287C  2205                    2571      move.l  d5,d1
0000287E  5A41                    2572      add.w   #TILE_EIGTH,d1
00002880  2601                    2573      move.l  d1,d3
00002882  0643 001E               2574      add.w   #(TILE_SIZE-TILE_QUARTER),d3
00002886  2406                    2575      move.l  d6,d2
00002888  0642 0014               2576      add.w   #TILE_HALF,d2
0000288C  2802                    2577      move.l  d2,d4
0000288E  4E4F                    2578      trap    #15
00002890                          2579      
00002890                          2580      ; draw vertical line
00002890  2406                    2581      move.l  d6,d2
00002892  5A42                    2582      add.w   #TILE_EIGTH,d2
00002894  2802                    2583      move.l  d2,d4
00002896  0644 001E               2584      add.w   #(TILE_SIZE-TILE_QUARTER),d4
0000289A  2205                    2585      move.l  d5,d1
0000289C  0641 0014               2586      add.w   #TILE_HALF,d1
000028A0  2601                    2587      move.l  d1,d3
000028A2  4E4F                    2588      trap    #15
000028A4                          2589      
000028A4                          2590      ; set pen color to highlight
000028A4  103C 0050               2591      move.b  #SET_PEN_COLOR,d0
000028A8  223C 00FCFCFC           2592      move.l  #HIGHLIGHT,d1
000028AE  4E4F                    2593      trap    #15
000028B0                          2594      
000028B0                          2595      ; set fill color to highlight
000028B0  103C 0051               2596      move.b  #SET_FILL_COLOR,d0
000028B4  4E4F                    2597      trap    #15
000028B6                          2598      
000028B6  4281                    2599      clr.l   d1
000028B8                          2600      
000028B8                          2601      ; draw white circle with coord from half of black circle top left to origin
000028B8  103C 0058               2602      move.b  #DRAW_ELLIPSE_FILLED,d0
000028BC  2205                    2603      move.l  d5,d1
000028BE  2406                    2604      move.l  d6,d2
000028C0  0641 000F               2605      add.w   #(TILE_QUARTER+TILE_EIGTH),d1
000028C4  0642 000F               2606      add.w   #(TILE_QUARTER+TILE_EIGTH),d2
000028C8  2601                    2607      move.l  d1,d3
000028CA  2802                    2608      move.l  d2,d4
000028CC  5443                    2609      add.w   #TILE_SIXTEENTH,d3
000028CE  5444                    2610      add.w   #TILE_SIXTEENTH,d4
000028D0  4E4F                    2611      trap    #15
000028D2                          2612      
000028D2                          2613      ; reset fill color
000028D2  103C 0051               2614      move.b  #SET_FILL_COLOR,d0
000028D6  223C 00C0C0C0           2615      move.l  #LIGHT_GREY,d1
000028DC  4E4F                    2616      trap    #15
000028DE                          2617      
000028DE  4EB9 00002ABA           2618      jsr     RepaintScreen
000028E4                          2619      
000028E4                          2620      ; checks if the bomb being drawn is the clicked bomb, don't need to draw as clicked if it is
000028E4  49F9 000029D2           2621      lea     Clicked_Bomb_Address,a4
000028EA  3014                    2622      move.w  (a4),d0
000028EC  B049                    2623      cmp.w   a1,d0
000028EE  6700 000A               2624      beq     SkipDrawClicked
000028F2                          2625      
000028F2                          2626      ; preps positions to draw clicked
000028F2  2205                    2627      move.l  d5,d1
000028F4  2406                    2628      move.l  d6,d2
000028F6  4EB8 2602               2629      jsr     DrawClicked
000028FA                          2630  
000028FA                          2631  SkipDrawClicked    
000028FA  4EB9 00002C40           2632      jsr     ClearRegisters
00002900                          2633  
00002900  4E75                    2634      rts
00002902                          2635      
00002902                          2636  
00002902                          2637  DrawClickedBomb
00002902                          2638  
00002902                          2639      ; save d1 for later
00002902  2A01                    2640      move.l  d1,d5
00002904                          2641      
00002904  4EB8 2602               2642      jsr     DrawClicked
00002908                          2643      
00002908                          2644      ; set pen color
00002908  103C 0050               2645      move.b  #SET_PEN_COLOR,d0
0000290C  223C 000000FE           2646      move.l  #CLICKED_BOMB_COLOR,d1
00002912  4E4F                    2647      trap    #15
00002914                          2648      
00002914                          2649      ; set fill color
00002914  103C 0051               2650      move.b  #SET_FILL_COLOR,d0
00002918  4E4F                    2651      trap    #15
0000291A                          2652      
0000291A                          2653      ; redraw tile as red
0000291A  103C 0057               2654      move.b  #DRAW_FILLED_RECT,d0
0000291E  2205                    2655      move.l  d5,d1
00002920  2601                    2656      move.l  d1,d3
00002922  2802                    2657      move.l  d2,d4
00002924  0643 0028               2658      add.w   #TILE_SIZE,d3
00002928  0644 0028               2659      add.w   #TILE_SIZE,d4
0000292C  4E4F                    2660      trap    #15
0000292E                          2661      
0000292E                          2662      ; repaint to screen
0000292E  4EB9 00002ABA           2663      jsr     RepaintScreen
00002934                          2664      
00002934                          2665      ; go back to draw rest of bombs
00002934  4E75                    2666      rts
00002936                          2667  
00002936                          2668  
00002936                          2669  
00002936                          2670  
00002936                          2671  
00002936                          2672  
00002936                          2673  -------------------- end include --------------------
00002936                          2674      include 'BombTileEvent.X68'
00002936                          2675  
00002936  =00000010               2676  CLICKED_OFFSET          EQU     $10
00002936  =00000002               2677  SUBTRACT_2              EQU     2
00002936  =00000002               2678  DIVIDE_4                EQU     2
00002936  =0000FFFF               2679  CLICKED_BOMB_UNSTORED   EQU     $FFFF
00002936  =0000000A               2680  UNCLICKED_BOMB          EQU     $0A
00002936                          2681  
00002936                          2682  BombTileEvent
00002936                          2683  
00002936                          2684      ; set current bomb as clicked so it doesn't get overwritten (if clicked bomb address is empty)
00002936  0643 0010               2685      addi.w  #CLICKED_OFFSET,d3
0000293A  5545                    2686      sub.w   #SUBTRACT_2,d5     ; subtract 2 since we added earlier
0000293C  E44D                    2687      lsr.w   #DIVIDE_4,d5       ; divide by 4 since we multiplied earlier
0000293E  1183 5800               2688      move.b  d3,(a0,d5.l)
00002942                          2689      
00002942                          2690      ; store bomb clicked by player so background doesn't get overwritten
00002942  49F9 000029D2           2691      lea     Clicked_Bomb_Address,a4
00002948  0C54 FFFF               2692      cmp.w   #CLICKED_BOMB_UNSTORED,(a4)
0000294C  6600 000A               2693      bne     DisplayBomb
00002950                          2694      
00002950                          2695      ; if address not stored, store bomb address so that first bomb will be shown as clicked bomb
00002950  D2C5                    2696      adda    d5,a1
00002952  3889                    2697      move.w  a1,(a4)                 
00002954                          2698          
00002954                          2699      ; draw current bomb with red background
00002954  4EB8 2902               2700      jsr     DrawClickedBomb
00002958                          2701      
00002958                          2702  
00002958                          2703  DisplayBomb
00002958  4EB8 2826               2704      jsr     DrawBomb
0000295C                          2705             
0000295C                          2706      ; go through entire grid and expose all bombs
0000295C                          2707      ; use stack to store addresses of bombs
0000295C                          2708      ; use each address for position to draw each one
0000295C                          2709      ; traverse through addresses until values are invalid (FFFF)
0000295C                          2710  CheckRemainingBombs
0000295C                          2711  
0000295C                          2712      ; load in offset of addresses of bombs (if 0 we have gone through all the bombs)
0000295C  49F8 1678               2713      lea     Bombs_Offset,a4
00002960  0C54 0000               2714      cmp.w   #0,(a4)
00002964                          2715      
00002964                          2716      ; once all bombs are displayed, cross out any flags placed in the wrong spot                                
00002964  6700 0030               2717      beq     CheckIncorrectFlags    
00002968                          2718      
00002968                          2719      ; go to next bomb
00002968  5554                    2720      sub.w   #ADDRESS_SPACE,(a4)
0000296A  3014                    2721      move.w  (a4),d0
0000296C  49F8 13F0               2722      lea     Bombs,a4
00002970  D8C0                    2723      adda    d0,a4
00002972  4280                    2724      clr.l   d0
00002974                          2725      
00002974                          2726      ; update current tile address
00002974  3248                    2727      move.w  a0,a1
00002976  3254                    2728      move.w  (a4),a1
00002978                          2729      
00002978                          2730      ; get tile type
00002978  1611                    2731      move.b  (a1),d3
0000297A  B67C 000A               2732      cmp.w   #UNCLICKED_BOMB,d3
0000297E  66DC                    2733      bne     CheckRemainingBombs
00002980                          2734      
00002980                          2735      ; get tile position (current tile address - tiles start) in d5 then moves to d4 TODO: go back to previous files to sync
00002980  3A09                    2736      move.w  a1,d5
00002982  9A48                    2737      sub.w   a0,d5
00002984                          2738      
00002984                          2739      ; get x, y coordinates retrieved when going back to beginning of routine   
00002984  4EB8 241C               2740      jsr     ClickEventHandler
00002988                          2741      
00002988  4E75                    2742      rts
0000298A                          2743      
0000298A                          2744      
0000298A                          2745      ; show incorrect flag as marked out once bombs have been revealed
0000298A                          2746  ShowIncorrectFlag
0000298A                          2747      
0000298A  4EB9 00002DFE           2748      jsr     DrawIncorrectFlag
00002990  4EB9 00002C40           2749      jsr     ClearRegisters
00002996                          2750      
00002996                          2751      ; iterate through checked flags list -- make sure they are still flagged
00002996                          2752  CheckIncorrectFlags
00002996                          2753  
00002996  4DF8 1B8C               2754      lea     Incorrect_Flags_Offset,a6
0000299A  0C56 0000               2755      cmp.w   #0,(a6)
0000299E                          2756      
0000299E  6700 002C               2757      beq     AllFlagsChecked
000029A2                          2758    
000029A2  5556                    2759      sub.w   #ADDRESS_SPACE,(a6)
000029A4  3016                    2760      move.w  (a6),d0
000029A6  4BF8 1904               2761      lea     Incorrect_Flags,a5
000029AA  DAC0                    2762      adda    d0,a5
000029AC  4280                    2763      clr.l   d0
000029AE                          2764      
000029AE                          2765      ; update current tile address
000029AE  3248                    2766      move.w  a0,a1
000029B0  3255                    2767      move.w  (a5),a1
000029B2                          2768      
000029B2                          2769      ; get tile type (check if still flagged)
000029B2  1611                    2770      move.b  (a1),d3
000029B4  1C03                    2771      move.b  d3,d6
000029B6  E80E                    2772      lsr.b   #SHIFT_FOUR,d6
000029B8  BC7C 0002               2773      cmp.w   #FLAG_TILE,d6
000029BC  66D8                    2774      bne     CheckIncorrectFlags
000029BE                          2775      
000029BE                          2776      ; get tile position (current tile - tiles start)
000029BE  3A09                    2777      move.w  a1,d5
000029C0  9A48                    2778      sub.w   a0,d5
000029C2  103C 0002               2779      move.b  #FLAG_CLICK,d0
000029C6                          2780      
000029C6                          2781      ; get coordinates
000029C6  4EB8 241C               2782      jsr     ClickEventHandler
000029CA                          2783      
000029CA  4E75                    2784      rts  
000029CC                          2785      
000029CC                          2786      ; once all flags are checked, trigger lose game event    
000029CC                          2787  AllFlagsChecked
000029CC                          2788  
000029CC  4EB8 2492               2789      jsr     GameLoseEvent
000029D0  4E75                    2790      rts
000029D2                          2791  
000029D2                          2792      
000029D2                          2793  
000029D2                          2794  Clicked_Bomb_Address    ds.w    1
000029D4                          2795  
000029D4                          2796  
000029D4                          2797  
000029D4                          2798  
000029D4                          2799  
000029D4                          2800  
000029D4                          2801  
000029D4                          2802  
000029D4                          2803  
000029D4                          2804  
000029D4                          2805  -------------------- end include --------------------
000029D4                          2806      include 'ClearMemory.X68'
000029D4                          2807  
000029D4  =00000009               2808  DOUBLE_CLICK_LEFT       EQU     9
000029D4  =FFFFFFFF               2809  RESET_VAL               EQU     $FFFFFFFF
000029D4  =00000000               2810  CLEAR_ADDRESS           EQU     0
000029D4  =000000FF               2811  UNSET_TILE              EQU     $FF
000029D4  =00000001               2812  IN_GAME                 EQU     01
000029D4  =00000003               2813  RESTART_GAME            EQU     03
000029D4  =00000000               2814  NO_FLAGS                EQU     0000
000029D4                          2815  
000029D4  =00000091               2816  RESTART_TOP             EQU     $91
000029D4  =000001AA               2817  RESTART_LEFT            EQU     $1AA
000029D4  =000000B9               2818  RESTART_BOTTOM          EQU     RESTART_TOP+TILE_SIZE
000029D4  =000001D2               2819  RESTART_RIGHT           EQU     RESTART_LEFT+TILE_SIZE
000029D4  =009101AA               2820  RESTART_TOP_LEFT        EQU     (RESTART_TOP<<16)+RESTART_LEFT
000029D4  =00B901D2               2821  RESTART_BOTTOM_RIGHT    EQU     (RESTART_BOTTOM<<16)+RESTART_RIGHT
000029D4                          2822  
000029D4  =0000006C               2823  X_TOP                   EQU     108
000029D4  =0000025A               2824  X_LEFT                  EQU     602
000029D4  =0000007F               2825  X_BOTTOM                EQU     X_TOP+19
000029D4  =00000294               2826  X_RIGHT                 EQU     X_LEFT+58
000029D4  =006C025A               2827  X_TOP_LEFT              EQU     (X_TOP<<16)+X_LEFT
000029D4  =007F0294               2828  X_BOTTOM_RIGHT          EQU     (X_BOTTOM<<16)+X_RIGHT
000029D4                          2829  
000029D4  =000002A8               2830  HOW_TO_BUTTON_TOP       EQU     680
000029D4  =00000000               2831  HOW_TO_BUTTON_LEFT      EQU     0
000029D4  =000002BC               2832  HOW_TO_BUTTON_BOTTOM    EQU     700
000029D4  =00000042               2833  HOW_TO_BUTTON_RIGHT     EQU     66
000029D4  =02A80000               2834  HOW_TO_BUTTON_TOP_LEFT          EQU     (HOW_TO_BUTTON_TOP<<16)+HOW_TO_BUTTON_LEFT
000029D4  =02BC0042               2835  HOW_TO_BUTTON_BOTTOM_RIGHT      EQU     (HOW_TO_BUTTON_BOTTOM<<16)+HOW_TO_BUTTON_RIGHT
000029D4                          2836  
000029D4  =000001A4               2837  START_TOP               EQU     420
000029D4  =0000019F               2838  START_LEFT              EQU     415
000029D4  =000001D8               2839  START_BOTTOM            EQU     472
000029D4  =000001E3               2840  START_RIGHT             EQU     483
000029D4  =01A4019F               2841  START_TOP_LEFT          EQU     (START_TOP<<16)+START_LEFT
000029D4  =01D801E3               2842  START_BOTTOM_RIGHT      EQU     (START_BOTTOM<<16)+START_RIGHT
000029D4                          2843  
000029D4                          2844  
000029D4                          2845  ClearMemory
000029D4  4EB9 00002C40           2846      jsr ClearRegisters
000029DA  4EB9 00002A8E           2847      jsr ClearAddresses
000029E0                          2848      
000029E0  41F8 1678               2849      lea     Bombs_Offset,a0
000029E4  30BC 0000               2850      move.w  #CLEAR_ADDRESS,(a0)
000029E8  41F8 1902               2851      lea     BFS_Stack_Offset,a0
000029EC  30BC 0000               2852      move.w  #CLEAR_ADDRESS,(a0)
000029F0  41F8 29D2               2853      lea     CLICKED_BOMB_ADDRESS,a0
000029F4  30BC FFFF               2854      move.w  #CLICKED_BOMB_UNSTORED,(a0)
000029F8  41F8 1B8C               2855      lea     Incorrect_Flags_Offset,a0
000029FC  30BC 0000               2856      move.w  #NO_FLAGS,(a0)
00002A00  41F8 1B8E               2857      lea     Real_Bomb_Counter,a0
00002A04  30BC 000F               2858      move.w  #NUM_BOMBS,(a0)
00002A08  41F8 1B90               2859      lea     Fake_Bomb_Counter,a0
00002A0C  30BC 000F               2860      move.w  #NUM_BOMBS,(a0)
00002A10  41F8 1B9E               2861      lea     Game_State,a0
00002A14  20BC 00000001           2862      move.l  #IN_GAME,(a0)
00002A1A  41F8 1B96               2863      lea     Current_Time,a0
00002A1E  20BC FFFFFFFF           2864      move.l  #RESET_VAL,(a0)
00002A24  41F8 1B92               2865      lea     Non_Bomb_Tiles,a0
00002A28  20BC 00000042           2866      move.l  #((NUM_ROW*NUM_COL)-NUM_BOMBS),(a0)
00002A2E  41F8 1CCE               2867      lea     First_Tile_Click,a0
00002A32  20BC FFFFFFFF           2868      move.l  #RESET_VAL,(a0)
00002A38  41F8 204E               2869      lea     Starting_Tile,a0
00002A3C  20BC 00000000           2870      move.l  #CLEAR_ADDRESS,(a0)
00002A42  41F8 2076               2871      lea     Starting_Offset,a0
00002A46  20BC 00000000           2872      move.l  #CLEAR_ADDRESS,(a0)
00002A4C  41F8 1CC6               2873      lea     Current_Mouse_Position,a0
00002A50  20BC FFFFFFFF           2874      move.l  #RESET_VAL,(a0)
00002A56  41F8 1CCA               2875      lea     Current_Mouse_Click,a0
00002A5A  20BC FFFFFFFF           2876      move.l  #RESET_VAL,(a0)
00002A60  41F9 0000333E           2877      lea     Last_Recorded_Bomb_Display,a0
00002A66  20BC FFFFFFFF           2878      move.l  #RESET_VAL,(a0)
00002A6C                          2879      
00002A6C  303C 0051               2880      move.w  #(Map_End-Map_Start),d0
00002A70  41F8 1116               2881      lea     Tiles,a0
00002A74                          2882  ClearPreviousMap
00002A74  10FC 00FF               2883      move.b  #UNSET_TILE,(a0)+
00002A78  51C8 FFFA               2884      dbra    d0,ClearPreviousMap
00002A7C                          2885  
00002A7C  303C 0288               2886      move.w  #(Incorrect_Flags_Offset-Incorrect_Flags),d0
00002A80  41F8 1904               2887      lea     Incorrect_Flags,a0
00002A84                          2888  ClearIncorrectFlags
00002A84  10FC 00FF               2889      move.b  #RESET_VAL,(a0)+
00002A88  51C8 FFFA               2890      dbra    d0,ClearIncorrectFlags
00002A8C                          2891      
00002A8C  4E75                    2892      rts
00002A8E                          2893      
00002A8E                          2894      
00002A8E                          2895  ClearAddresses
00002A8E  207C 00000000           2896      move.l  #CLEAR_ADDRESS,a0
00002A94  227C 00000000           2897      move.l  #CLEAR_ADDRESS,a1
00002A9A  247C 00000000           2898      move.l  #CLEAR_ADDRESS,a2
00002AA0  267C 00000000           2899      move.l  #CLEAR_ADDRESS,a3
00002AA6  287C 00000000           2900      move.l  #CLEAR_ADDRESS,a4
00002AAC  2A7C 00000000           2901      move.l  #CLEAR_ADDRESS,a5
00002AB2  2C7C 00000000           2902      move.l  #CLEAR_ADDRESS,a6
00002AB8                          2903      
00002AB8  4E75                    2904      rts
00002ABA                          2905  
00002ABA                          2906      
00002ABA                          2907  RepaintScreen
00002ABA  103C 005E               2908      move.b  #REPAINT_SCREEN,d0
00002ABE  4E4F                    2909      trap    #15
00002AC0  4E75                    2910      rts
00002AC2                          2911    
00002AC2                          2912    
00002AC2                          2913  CheckRestart
00002AC2                          2914      ; loop through until player clicks on bitmap smiley
00002AC2                          2915      ; once clicked, restart game
00002AC2                          2916      
00002AC2  49F8 1B9E               2917      lea     Game_State,a4
00002AC6                          2918      
00002AC6  103C 003D               2919      move.b  #READ_MOUSE,d0
00002ACA  7200                    2920      move.l  #0,d1
00002ACC  4E4F                    2921      trap    #15
00002ACE                          2922      
00002ACE                          2923      ; make sure to check state of mouse: if 0 loop through again
00002ACE  B03C 0000               2924      cmp.b   #NO_CLICK,d0
00002AD2  6700 0136               2925      beq     ContinueCurrentGameState   
00002AD6                          2926      
00002AD6                          2927      ; check if mouse is clicking restart button 
00002AD6                          2928  WaitRestartBoundTop
00002AD6  B2BC 009101AA           2929      cmp.l   #RESTART_TOP_LEFT,d1
00002ADC  6D00 012C               2930      blt     ContinueCurrentGameState
00002AE0                          2931  WaitRestartBoundLeft
00002AE0  B27C 01AA               2932      cmp.w   #RESTART_LEFT,d1
00002AE4  6D00 0124               2933      blt     ContinueCurrentGameState
00002AE8                          2934  WaitRestartBoundBottom
00002AE8  B2BC 00B901D2           2935      cmp.l   #RESTART_BOTTOM_RIGHT,d1
00002AEE  6E00 011A               2936      bgt     ContinueCurrentGameState
00002AF2                          2937  WaitRestartBoundRight
00002AF2  B27C 01D2               2938      cmp.w   #RESTART_RIGHT,d1
00002AF6  6E00 0112               2939      bgt     ContinueCurrentGameState
00002AFA                          2940      
00002AFA                          2941      ; if made it all the way through, set the game state to title screen
00002AFA  28BC 00000003           2942      move.l  #RESTART_GAME,(a4)
00002B00  4EB9 002BB824           2943      jsr     PlayClickSound
00002B06  4E75                    2944      rts
00002B08                          2945  
00002B08                          2946      
00002B08                          2947  CheckXOut
00002B08                          2948      ; exits to main menu when clicked
00002B08                          2949      
00002B08  49F8 1B9E               2950      lea     Game_State,a4
00002B0C                          2951      
00002B0C  103C 003D               2952      move.b  #READ_MOUSE,d0
00002B10  7200                    2953      move.l  #0,d1
00002B12  4E4F                    2954      trap    #15
00002B14                          2955      
00002B14                          2956      ; make sure to check state of mouse: if 0 loop through again
00002B14  B03C 0000               2957      cmp.b   #NO_CLICK,d0
00002B18  6700 00F0               2958      beq     ContinueCurrentGameState   
00002B1C                          2959      
00002B1C                          2960      ; check if mouse is clicking restart button 
00002B1C                          2961  CheckXBoundTop
00002B1C  B2BC 006C025A           2962      cmp.l   #X_TOP_LEFT,d1
00002B22  6D00 00E6               2963      blt     ContinueCurrentGameState
00002B26                          2964  CheckXBoundLeft
00002B26  B27C 025A               2965      cmp.w   #X_LEFT,d1
00002B2A  6D00 00DE               2966      blt     ContinueCurrentGameState
00002B2E                          2967  CheckXBoundBottom
00002B2E  B2BC 007F0294           2968      cmp.l   #X_BOTTOM_RIGHT,d1
00002B34  6E00 00D4               2969      bgt     ContinueCurrentGameState
00002B38                          2970  CheckXBoundRight
00002B38  B27C 0294               2971      cmp.w   #X_RIGHT,d1
00002B3C  6E00 00CC               2972      bgt     ContinueCurrentGameState
00002B40                          2973      
00002B40                          2974      ; if made it all the way through, set the game state to title screen
00002B40  28BC 00000000           2975      move.l  #TITLE_SCREEN,(a4)
00002B46  4EB9 002BB824           2976      jsr     PlayClickSound
00002B4C  4E75                    2977      rts
00002B4E                          2978      
00002B4E                          2979      
00002B4E                          2980  CheckHowToPlay
00002B4E                          2981      ; opens/closes how to play
00002B4E                          2982      
00002B4E  103C 003D               2983      move.b  #READ_MOUSE,d0
00002B52  7200                    2984      move.l  #0,d1
00002B54  4E4F                    2985      trap    #15
00002B56                          2986      
00002B56                          2987      ; make sure to check state of mouse: if 0 loop through again
00002B56  B03C 0000               2988      cmp.b   #NO_CLICK,d0
00002B5A  6700 00AE               2989      beq     ContinueCurrentGameState   
00002B5E                          2990      
00002B5E                          2991      ; check if mouse is clicking restart button 
00002B5E                          2992  CheckHowToPlayBoundTop
00002B5E  B2BC 02A80000           2993      cmp.l   #HOW_TO_BUTTON_TOP_LEFT,d1
00002B64  6D00 00A4               2994      blt     ContinueCurrentGameState
00002B68                          2995  CheckHowToPlayBoundLeft
00002B68  B27C 0000               2996      cmp.w   #HOW_TO_BUTTON_LEFT,d1
00002B6C  6D00 009C               2997      blt     ContinueCurrentGameState
00002B70                          2998  CheckHowToPlayBoundBottom
00002B70  B2BC 02BC0042           2999      cmp.l   #HOW_TO_BUTTON_BOTTOM_RIGHT,d1
00002B76  6E00 0092               3000      bgt     ContinueCurrentGameState
00002B7A                          3001  CheckHowToPlayBoundRight
00002B7A  B27C 0042               3002      cmp.w   #HOW_TO_BUTTON_RIGHT,d1
00002B7E  6E00 008A               3003      bgt     ContinueCurrentGameState
00002B82                          3004      
00002B82                          3005      ; if made it all the way through, update how to play state
00002B82  4EB9 002BB824           3006      jsr     PlayClickSound
00002B88  4EB8 24CE               3007      jsr     UpdateHowToState
00002B8C                          3008      
00002B8C                          3009      ; repaint screen
00002B8C  4EB8 2ABA               3010      jsr     RepaintScreen    
00002B90  4EB9 00002C40           3011      jsr     ClearRegisters
00002B96  4EB8 2A8E               3012      jsr     ClearAddresses
00002B9A  4E75                    3013      rts
00002B9C                          3014      
00002B9C                          3015  CheckMystery
00002B9C                          3016  
00002B9C  103C 003D               3017      move.b  #READ_MOUSE,d0
00002BA0  7200                    3018      move.l  #0,d1
00002BA2  4E4F                    3019      trap    #15
00002BA4                          3020      
00002BA4                          3021      ; only start game when double click
00002BA4  B03C 0009               3022      cmp.b   #DOUBLE_CLICK_LEFT,d0
00002BA8  6600 0060               3023      bne     ContinueCurrentGameState   
00002BAC                          3024      
00002BAC                          3025      ; check if mouse is clicking restart button 
00002BAC                          3026  MysteryBoundTop
00002BAC  B2BC 00000000           3027      cmp.l   #MYSTERY_TOP_LEFT,d1
00002BB2  6D00 0056               3028      blt     ContinueCurrentGameState
00002BB6                          3029  MysteryBoundLeft
00002BB6  B27C 0000               3030      cmp.w   #MYSTERY_LEFT,d1
00002BBA  6D00 004E               3031      blt     ContinueCurrentGameState
00002BBE                          3032  MysteryBoundBottom
00002BBE  B2BC 0046003C           3033      cmp.l   #MYSTERY_BOTTOM_RIGHT,d1
00002BC4  6E00 0044               3034      bgt     ContinueCurrentGameState
00002BC8                          3035  MysteryBoundRight
00002BC8  B27C 003C               3036      cmp.w   #MYSTERY_RIGHT,d1
00002BCC  6E00 003C               3037      bgt     ContinueCurrentGameState
00002BD0                          3038      
00002BD0                          3039      ; if made it all the way through, load in mystery
00002BD0  4EB9 002BB824           3040      jsr     PlayClickSound
00002BD6                          3041      
00002BD6                          3042      ; draw mystery image
00002BD6  2A3C 000001AD           3043      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(TILE_SIZE/2)-SMILEY_X_OFFSET+3),d5   
00002BDC  343C 0093               3044      move.w  #(START_Y-TOP_UI_HEIGHT-SMILEY_Y_OFFSET+2),d2                         
00002BE0  4EB9 0000370C           3045      jsr     LoadMystery
00002BE6  4EB8 2ABA               3046      jsr     RepaintScreen
00002BEA                          3047      
00002BEA  41F8 1B9E               3048      lea     Game_State,a0
00002BEE  0C90 00000001           3049      cmp.l   #IN_GAME,(a0)
00002BF4  6600 0014               3050      bne     ContinueCurrentGameState
00002BF8                          3051      
00002BF8                          3052      ; redraw smiley guy if in game
00002BF8  2A3C 000001AD           3053      move.l  #(START_X+(GRID_SIDE_LENGTH/2)-(TILE_SIZE/2)-SMILEY_X_OFFSET+3),d5   
00002BFE  343C 0093               3054      move.w  #(START_Y-TOP_UI_HEIGHT-SMILEY_Y_OFFSET+2),d2
00002C02  4EB9 00003500           3055      jsr     LoadStartSmiley
00002C08                          3056      
00002C08  4E75                    3057      rts
00002C0A                          3058      
00002C0A                          3059      
00002C0A                          3060  ContinueCurrentGameState
00002C0A  4E75                    3061      rts
00002C0C                          3062  
00002C0C                          3063  
00002C0C                          3064  WaitStart
00002C0C                          3065  
00002C0C  4EB8 2B4E               3066      jsr     CheckHowToPlay
00002C10  4EB8 2B9C               3067      jsr     CheckMystery
00002C14                          3068      
00002C14  103C 003D               3069      move.b  #READ_MOUSE,d0
00002C18  7200                    3070      move.l  #0,d1
00002C1A  4E4F                    3071      trap    #15
00002C1C                          3072      
00002C1C                          3073      ; only start game when double click
00002C1C  B03C 0009               3074      cmp.b   #DOUBLE_CLICK_LEFT,d0
00002C20  66EA                    3075      bne     WaitStart   
00002C22                          3076      
00002C22                          3077      ; check if mouse is clicking restart button 
00002C22                          3078  WaitStartBoundTop
00002C22  B2BC 01A4019F           3079      cmp.l   #START_TOP_LEFT,d1
00002C28  6DE2                    3080      blt     WaitStart
00002C2A                          3081  WaitStartBoundLeft
00002C2A  B27C 019F               3082      cmp.w   #START_LEFT,d1
00002C2E  6DDC                    3083      blt     WaitStart
00002C30                          3084  WaitStartBoundBottom
00002C30  B2BC 01D801E3           3085      cmp.l   #START_BOTTOM_RIGHT,d1
00002C36  6ED4                    3086      bgt     WaitStart
00002C38                          3087  WaitStartBoundRight
00002C38  B27C 01E3               3088      cmp.w   #START_RIGHT,d1
00002C3C  6ECE                    3089      bgt     WaitStart
00002C3E                          3090      
00002C3E                          3091      ; if made it all the way through, go back to main and load game
00002C3E  4E75                    3092      rts
00002C40                          3093  
00002C40                          3094      
00002C40                          3095      
00002C40                          3096  ClearRegisters
00002C40                          3097  
00002C40  4280                    3098      clr.l   d0
00002C42  4281                    3099      clr.l   d1
00002C44  4282                    3100      clr.l   d2
00002C46  4283                    3101      clr.l   d3
00002C48  4284                    3102      clr.l   d4
00002C4A  4285                    3103      clr.l   d5
00002C4C  4286                    3104      clr.l   d6
00002C4E  4287                    3105      clr.l   d7
00002C50                          3106      
00002C50  4E75                    3107      rts
00002C52                          3108  
00002C52                          3109  
00002C52                          3110  
00002C52                          3111  
00002C52                          3112  
00002C52                          3113  
00002C52                          3114  
00002C52                          3115  
00002C52                          3116  
00002C52                          3117  
00002C52                          3118  
00002C52                          3119  
00002C52                          3120  
00002C52                          3121  
00002C52                          3122  
00002C52                          3123  
00002C52                          3124  
00002C52                          3125  
00002C52                          3126  
00002C52                          3127  -------------------- end include --------------------
00002C52                          3128      include 'FlagClickEvent.X68'
00002C52                          3129  
00002C52  =00000020               3130  FLAGGED_OFFSET          EQU     $20
00002C52  =00000002               3131  FLAG_TILE               EQU     2
00002C52  =0000000A               3132  CORRECT_FLAG            EQU     $0A
00002C52  =00000000               3133  NO_FLAGS_LEFT           EQU     0
00002C52  =00000000               3134  NO_BOMBS_LEFT           EQU     0
00002C52                          3135  
00002C52                          3136  
00002C52                          3137      ; check d3 for tile type and check upper nybble
00002C52                          3138      ; upper nybble = 0 -> need to mark tile as flagged and update
00002C52                          3139      ; upper nybble = 2 -> need to unmark tile as flagged and update
00002C52                          3140  FlagTileEvent
00002C52                          3141      
00002C52  49F8 29D2               3142      lea     Clicked_Bomb_Address,a4
00002C56  0C54 FFFF               3143      cmp.w   #CLICKED_BOMB_UNSTORED,(a4)
00002C5A  6600 FD2E               3144      bne     ShowIncorrectFlag
00002C5E                          3145      
00002C5E  4844                    3146      swap    d4
00002C60  1A03                    3147      move.b  d3,d5
00002C62  E80D                    3148      lsr.b   #SHIFT_FOUR,d5
00002C64  BA3C 0002               3149      cmp.b   #FLAG_TILE,d5
00002C68  6700 007C               3150      beq     RemovingFlag
00002C6C                          3151  
00002C6C                          3152      ; if fake bombs doesnt equal 0, proceed
00002C6C                          3153      ; if it does, rts
00002C6C                          3154  PlacingFlag
00002C6C  49F8 1B90               3155      lea     Fake_Bomb_Counter,a4
00002C70  0C54 0000               3156      cmp.w   #NO_FLAGS_LEFT,(a4)
00002C74  6600 0006               3157      bne     DecrementFakeBombs
00002C78  6700 009E               3158      beq     AtFlagMax
00002C7C                          3159      
00002C7C                          3160  DecrementFakeBombs
00002C7C  5354                    3161      sub.w   #1,(a4)
00002C7E  287C 00000000           3162      move.l  #CLEAR_ADDRESS,a4
00002C84                          3163  
00002C84                          3164      ; check tile to type to see if flag is actually for bomb
00002C84  B63C 000A               3165      cmp.b   #CORRECT_FLAG,d3
00002C88  6600 0016               3166      bne     IncrementIncorrectFlags
00002C8C                          3167      
00002C8C                          3168  DecrementRealBombs
00002C8C  49F8 1B8E               3169      lea     Real_Bomb_Counter,a4
00002C90  5354                    3170      sub.w   #1,(a4)
00002C92  287C 00000000           3171      move.l  #CLEAR_ADDRESS,a4
00002C98  4EB9 00002CD4           3172      jsr     PlaceFlag
00002C9E  4E75                    3173      rts
00002CA0                          3174  
00002CA0                          3175      ; increase incorrect flag offset by address space and push address onto incorrect flag stack
00002CA0                          3176  IncrementIncorrectFlags    
00002CA0  4BF8 1904               3177      lea     Incorrect_Flags,a5   
00002CA4  3E09                    3178      move.w  a1,d7
00002CA6  DE44                    3179      add.w   d4,d7
00002CA8                          3180      
00002CA8                          3181      ; check if address is already stored
00002CA8                          3182  CheckIfIncorrectAlreadyStored
00002CA8  3C1D                    3183      move.w  (a5)+,d6
00002CAA  BE46                    3184      cmp.w   d6,d7
00002CAC  6700 0026               3185      beq     PlaceFlag
00002CB0  BC7C FFFF               3186      cmp.w   #RESET_VAL,d6
00002CB4  66F2                    3187      bne     CheckIfIncorrectAlreadyStored
00002CB6                          3188      
00002CB6  4BF8 1904               3189      lea     Incorrect_Flags,a5
00002CBA  4DF8 1B8C               3190      lea     Incorrect_Flags_Offset,a6
00002CBE  3C16                    3191      move.w  (a6),d6
00002CC0  D2C4                    3192      adda    d4,a1
00002CC2  3B89 6800               3193      move.w  a1,(a5,d6.l)
00002CC6  5456                    3194      add.w   #ADDRESS_SPACE,(a6)
00002CC8  2A7C 00000000           3195      move.l  #CLEAR_ADDRESS,a5
00002CCE  2C7C 00000000           3196      move.l  #CLEAR_ADDRESS,a6
00002CD4                          3197  
00002CD4                          3198      ; blank -> flagged
00002CD4                          3199      ; - draw flag on top of tile
00002CD4                          3200      ; - update state of current tile by adding offset of $20
00002CD4                          3201      ; - put tile back in address and bra to read mouse input
00002CD4                          3202  PlaceFlag       
00002CD4                          3203      
00002CD4  0683 00000020           3204      add.l   #FLAGGED_OFFSET,d3
00002CDA  1183 4800               3205      move.b  d3,(a0,d4.l)
00002CDE  4EB9 00002D1A           3206      jsr     DrawFlag
00002CE4                          3207      
00002CE4  4E75                    3208      rts
00002CE6                          3209  
00002CE6                          3210      ; flagged -> blank
00002CE6                          3211      ; - draw background on top of tile
00002CE6                          3212      ; - update state of current tile by subtracting offset of $20
00002CE6                          3213      ; - put tile back in address and bra to read mouse input
00002CE6                          3214  RemovingFlag 
00002CE6                          3215      
00002CE6  0483 00000020           3216      sub.l   #FLAGGED_OFFSET,d3
00002CEC  1183 4800               3217      move.b  d3,(a0,d4.l)
00002CF0                          3218      
00002CF0                          3219      ; if tile was a bomb tile, increment total of real bombs
00002CF0  B67C 000A               3220      cmp.w   #CORRECT_FLAG,d3
00002CF4  6600 000E               3221      bne     IncrementFakeBombs
00002CF8  49F8 1B8E               3222      lea     Real_Bomb_Counter,a4 
00002CFC  5254                    3223      add.w   #1,(a4)
00002CFE  287C 00000000           3224      move.l  #CLEAR_ADDRESS,a4   
00002D04                          3225  
00002D04                          3226      ; increment number of fake bombs left after removing flag
00002D04                          3227  IncrementFakeBombs    
00002D04  49F8 1B90               3228      lea     Fake_Bomb_Counter,a4
00002D08  5254                    3229      add.w   #1,(a4)
00002D0A  287C 00000000           3230      move.l  #CLEAR_ADDRESS,a4
00002D10                          3231      
00002D10  4EB9 00002DCC           3232      jsr     DrawOverFlag
00002D16                          3233      
00002D16  4E75                    3234      rts
00002D18                          3235  
00002D18                          3236      ; Some versions of minesweeper allow for negative bombs left when more flags have been placed than bombs
00002D18                          3237      ; I did not get around to this, so I capped number of flags that can be placed as the number of bombs on the map
00002D18                          3238      ; Called after placing a flag and the max number of bombs have been reached  
00002D18                          3239  AtFlagMax
00002D18                          3240  
00002D18  4E75                    3241      rts
00002D1A                          3242  
00002D1A                          3243      
00002D1A                          3244  
00002D1A                          3245  
00002D1A                          3246  
00002D1A                          3247  
00002D1A                          3248  
00002D1A                          3249  
00002D1A                          3250  
00002D1A                          3251  
00002D1A                          3252  
00002D1A                          3253  -------------------- end include --------------------
00002D1A                          3254      include 'DrawFlag.X68'
00002D1A                          3255  
00002D1A  =00C0C0C0               3256  LIGHT_GREY              EQU     $c0c0c0
00002D1A  =00FCFCFC               3257  HIGHLIGHT               EQU     $fcfcfc
00002D1A  =00000000               3258  BLACK                   EQU     $000000
00002D1A  =000000FE               3259  FLAG_RED                EQU     $000000fe
00002D1A                          3260  
00002D1A  =00000003               3261  FLAG_POLE_WIDTH         EQU     3
00002D1A  =00000005               3262  FLAG_WIDTH              EQU     5
00002D1A                          3263  
00002D1A  =00000050               3264  SET_PEN_COLOR           EQU     80
00002D1A  =00000051               3265  SET_FILL_COLOR          EQU     81
00002D1A  =00000052               3266  DRAW_PIXEL              EQU     82
00002D1A  =00000054               3267  DRAW_LINE               EQU     84
00002D1A  =00000057               3268  DRAW_RECT_FILLED        EQU     87
00002D1A  =0000005D               3269  SET_PEN_WIDTH           EQU     93
00002D1A                          3270  
00002D1A  =00000014               3271  TILE_HALF               EQU     TILE_SIZE/2
00002D1A  =0000000A               3272  TILE_QUARTER            EQU     TILE_SIZE/4
00002D1A  =00000005               3273  TILE_EIGTH              EQU     TILE_SIZE/8
00002D1A  =00000002               3274  TILE_SIXTEENTH          EQU     TILE_SIZE/16
00002D1A  =00000014               3275  BOMB_WIDTH              EQU     TILE_SIZE-TILE_HALF
00002D1A                          3276  
00002D1A  =00000002               3277  NUM_FLAG_FILLS          EQU     2
00002D1A                          3278  
00002D1A                          3279  DrawFlag
00002D1A                          3280  
00002D1A                          3281      ; save d1 and d2 in d5 and d6
00002D1A  2A01                    3282      move.l  d1,d5
00002D1C  2C02                    3283      move.l  d2,d6
00002D1E                          3284      
00002D1E                          3285      ; set pen width
00002D1E  4280                    3286      clr.l   d0
00002D20  103C 005D               3287      move.b  #SET_PEN_WIDTH,d0
00002D24  323C 0003               3288      move.w  #FLAG_POLE_WIDTH,d1
00002D28  4E4F                    3289      trap    #15
00002D2A                          3290     
00002D2A                          3291      ; set pen color to black
00002D2A  103C 0050               3292      move.b  #SET_PEN_COLOR,d0
00002D2E  7200                    3293      move.l  #BLACK,d1
00002D30  4E4F                    3294      trap    #15
00002D32                          3295      
00002D32                          3296      ; set fill color to black
00002D32  103C 0051               3297      move.b  #SET_FILL_COLOR,d0
00002D36  4E4F                    3298      trap    #15
00002D38                          3299      
00002D38                          3300      ; move d1 back to use for pos
00002D38  2205                    3301      move.l  d5,d1
00002D3A                          3302      
00002D3A                          3303      ; set end positions
00002D3A  0681 00000014           3304      add.l   #TILE_HALF,d1
00002D40  2601                    3305      move.l  d1,d3
00002D42  2802                    3306      move.l  d2,d4
00002D44  0684 00000028           3307      add.l   #TILE_SIZE,d4
00002D4A                          3308      
00002D4A                          3309      ; adjust y values for vertical line
00002D4A  5E82                    3310      add.l   #(TILE_EIGTH+TILE_SIXTEENTH),d2
00002D4C  0484 0000000A           3311      sub.l   #TILE_QUARTER,d4
00002D52                          3312      
00002D52                          3313      ; draw vertical line
00002D52  103C 0054               3314      move.b  #DRAW_LINE,d0
00002D56  4E4F                    3315      trap    #15
00002D58                          3316      
00002D58                          3317      ; reset positions for horizontal line
00002D58  2404                    3318      move.l  d4,d2
00002D5A  0481 0000000A           3319      sub.l   #TILE_QUARTER,d1
00002D60  0683 0000000A           3320      add.l   #TILE_QUARTER,d3
00002D66                          3321      
00002D66                          3322      ; draw horizontal line
00002D66  4E4F                    3323      trap    #15
00002D68                          3324      
00002D68                          3325      ; reset positions for black rect
00002D68  5A81                    3326      add.l   #TILE_EIGTH,d1
00002D6A  5582                    3327      sub.l   #TILE_SIXTEENTH,d2
00002D6C  5B83                    3328      sub.l   #TILE_EIGTH,d3
00002D6E                          3329      
00002D6E                          3330      ; draw rect
00002D6E  103C 0057               3331      move.b  #DRAW_FILLED_RECT,d0
00002D72  4E4F                    3332      trap    #15
00002D74                          3333      
00002D74                          3334      ; set pen color to red
00002D74  103C 0050               3335      move.b  #SET_PEN_COLOR,d0
00002D78  223C 000000FE           3336      move.l  #FLAG_RED,d1
00002D7E  4E4F                    3337      trap    #15
00002D80                          3338      
00002D80                          3339      ; move d1 back
00002D80  2205                    3340      move.l  d5,d1
00002D82                          3341      
00002D82                          3342      ; reset positions for first diag
00002D82  0681 00000014           3343      add.l   #TILE_HALF,d1
00002D88  2601                    3344      move.l  d1,d3
00002D8A  0483 0000000A           3345      sub.l   #TILE_QUARTER,d3
00002D90  2406                    3346      move.l  d6,d2
00002D92  5E82                    3347      add.l   #(TILE_EIGTH+TILE_SIXTEENTH),d2
00002D94  2802                    3348      move.l  d2,d4
00002D96  5E84                    3349      add.l   #(TILE_EIGTH+TILE_SIXTEENTH),d4
00002D98                          3350      
00002D98                          3351      ; draw first flag diag
00002D98  103C 0054               3352      move.b  #DRAW_LINE,d0
00002D9C  4E4F                    3353      trap    #15
00002D9E                          3354      
00002D9E                          3355      ; update positions for second diag
00002D9E  0682 0000000C           3356      add.l   #(TILE_QUARTER+TILE_SIXTEENTH),d2
00002DA4                          3357      
00002DA4                          3358      ; draw second flag diag
00002DA4  4E4F                    3359      trap    #15
00002DA6                          3360      
00002DA6                          3361      ; update positions for up flag line
00002DA6  5F84                    3362      sub.l   #(TILE_EIGTH+TILE_SIXTEENTH),d4
00002DA8  2601                    3363      move.l  d1,d3
00002DAA                          3364      
00002DAA                          3365      ; draw up flag line
00002DAA  4E4F                    3366      trap    #15
00002DAC                          3367      
00002DAC                          3368      ; set counter
00002DAC  7E02                    3369      move.l  #NUM_FLAG_FILLS,d7
00002DAE                          3370      
00002DAE                          3371  LoopFillFlag
00002DAE                          3372      ; sub d1 and d2 to fill in flag
00002DAE  5581                    3373      sub.l   #TILE_SIXTEENTH,d1
00002DB0  5582                    3374      sub.l   #TILE_SIXTEENTH,d2
00002DB2                          3375      
00002DB2                          3376      ; fill flag
00002DB2  4E4F                    3377      trap    #15
00002DB4                          3378      
00002DB4                          3379      ; loop
00002DB4  51CF FFF8               3380      dbra    d7,LoopFillFlag
00002DB8                          3381      
00002DB8                          3382      ; set fill color back to light grey
00002DB8  103C 0051               3383      move.b  #SET_FILL_COLOR,d0
00002DBC  223C 00C0C0C0           3384      move.l  #LIGHT_GREY,d1
00002DC2  4E4F                    3385      trap    #15
00002DC4                          3386      
00002DC4                          3387      ; move d5 back to d1
00002DC4  2205                    3388      move.l  d5,d1
00002DC6                          3389      
00002DC6  4EB8 2ABA               3390      jsr     RepaintScreen
00002DCA                          3391      
00002DCA  4E75                    3392      rts
00002DCC                          3393      
00002DCC                          3394  DrawOverFlag
00002DCC                          3395  
00002DCC                          3396      ; save vals for later
00002DCC  2A01                    3397      move.l  d1,d5
00002DCE  2C02                    3398      move.l  d2,d6
00002DD0                          3399      
00002DD0                          3400      ; set pen color to light grey
00002DD0  103C 0050               3401      move.b  #SET_PEN_COLOR,d0
00002DD4  223C 00C0C0C0           3402      move.l  #LIGHT_GREY,d1
00002DDA  4E4F                    3403      trap    #15
00002DDC                          3404      
00002DDC                          3405      ; restore d1
00002DDC  2205                    3406      move.l  d5,d1
00002DDE                          3407      
00002DDE                          3408      ; set positions for rect
00002DDE  2601                    3409      move.l  d1,d3
00002DE0  5A81                    3410      add.l   #TILE_EIGTH,d1
00002DE2  0683 00000023           3411      add.l   #(TILE_SIZE-TILE_EIGTH),d3
00002DE8  2802                    3412      move.l  d2,d4
00002DEA  5A82                    3413      add.l   #TILE_EIGTH,d2
00002DEC  0684 00000023           3414      add.l   #(TILE_SIZE-TILE_EIGTH),d4
00002DF2                          3415      
00002DF2                          3416      ; draw light grey filled box within tile (cover up flag :( )
00002DF2  103C 0057               3417      move.b  #DRAW_FILLED_RECT,d0
00002DF6  4E4F                    3418      trap    #15
00002DF8                          3419      
00002DF8  4EB8 2ABA               3420      jsr     RepaintScreen
00002DFC                          3421      
00002DFC  4E75                    3422      rts
00002DFE                          3423      
00002DFE                          3424  DrawIncorrectFlag
00002DFE                          3425  
00002DFE                          3426      ; save d1 and d2 in d5 and d6
00002DFE  2A01                    3427      move.l  d1,d5
00002E00  2C02                    3428      move.l  d2,d6
00002E02                          3429      
00002E02                          3430      ; set pen width
00002E02  4280                    3431      clr.l   d0
00002E04  103C 005D               3432      move.b  #SET_PEN_WIDTH,d0
00002E08  323C 0003               3433      move.w  #FLAG_POLE_WIDTH,d1
00002E0C  4E4F                    3434      trap    #15
00002E0E                          3435     
00002E0E                          3436      ; set pen color to black
00002E0E  103C 0050               3437      move.b  #SET_PEN_COLOR,d0
00002E12  7200                    3438      move.l  #BLACK,d1
00002E14  4E4F                    3439      trap    #15
00002E16                          3440      
00002E16                          3441      ; move positions back
00002E16  2205                    3442      move.l  d5,d1
00002E18                          3443      
00002E18                          3444      ; set positions for first diag
00002E18  2601                    3445      move.l  d1,d3
00002E1A  5A81                    3446      add.l   #TILE_EIGTH,d1
00002E1C  0683 00000023           3447      add.l   #(TILE_SIZE-TILE_EIGTH),d3
00002E22  2802                    3448      move.l  d2,d4
00002E24  5A82                    3449      add.l   #TILE_EIGTH,d2
00002E26  0684 00000023           3450      add.l   #(TILE_SIZE-TILE_EIGTH),d4
00002E2C                          3451      
00002E2C                          3452      ; draw first diag
00002E2C  103C 0054               3453      move.b  #DRAW_LINE,d0
00002E30  4E4F                    3454      trap    #15
00002E32                          3455      
00002E32                          3456      ; set positions for second diag
00002E32  2601                    3457      move.l  d1,d3
00002E34  2205                    3458      move.l  d5,d1
00002E36  0681 00000023           3459      add.l   #(TILE_SIZE-TILE_EIGTH),d1
00002E3C                          3460      
00002E3C                          3461      ; draw second diag
00002E3C  4E4F                    3462      trap    #15
00002E3E                          3463      
00002E3E                          3464      ; move positions back
00002E3E  2205                    3465      move.l  d5,d1
00002E40  2406                    3466      move.l  d6,d2
00002E42                          3467      
00002E42  4EB8 2ABA               3468      jsr     RepaintScreen
00002E46                          3469      
00002E46  4E75                    3470      rts
00002E48                          3471   
00002E48                          3472      
00002E48                          3473  
00002E48                          3474  
00002E48                          3475  
00002E48                          3476  -------------------- end include --------------------
00002E48                          3477      include 'SevenSegmentDisplay.X68'
00002E48                          3478  
00002E48  =00C0C0C0               3479  LIGHT_GREY          EQU     $c0c0c0
00002E48  =00000000               3480  BLACK               EQU     $000000
00002E48                          3481  
00002E48  =00000050               3482  SET_PEN_COLOR       EQU     80
00002E48  =00000051               3483  SET_FILL_COLOR      EQU     81
00002E48  =00000057               3484  DRAW_FILLED_RECT    EQU     87
00002E48                          3485  
00002E48  =0000003F               3486  DISPLAY_ZERO        EQU     $3f
00002E48  =00000006               3487  DISPLAY_ONE         EQU     $06
00002E48  =0000005B               3488  DISPLAY_TWO         EQU     $5b
00002E48  =0000004F               3489  DISPLAY_THREE       EQU     $4f
00002E48  =00000066               3490  DISPLAY_FOUR        EQU     $66
00002E48  =0000006D               3491  DISPLAY_FIVE        EQU     $6d
00002E48  =0000007D               3492  DISPLAY_SIX         EQU     $7d
00002E48  =00000007               3493  DISPLAY_SEVEN       EQU     $07
00002E48  =0000007F               3494  DISPLAY_EIGHT       EQU     $7f
00002E48  =0000006F               3495  DISPLAY_NINE        EQU     $6f
00002E48                          3496  
00002E48  =00000064               3497  LEFT_DIGIT          EQU     $64
00002E48  =0000000A               3498  MIDDLE_DIGIT        EQU     $A
00002E48  =00000009               3499  RIGHT_DIGIT         EQU     $9
00002E48                          3500  
00002E48  =00000014               3501  MIDDLE_OFFSET       EQU     20
00002E48  =0000003C               3502  RIGHT_OFFSET        EQU     60
00002E48                          3503  
00002E48  =0000000A               3504  DECIMAL             EQU     10
00002E48                          3505  
00002E48  =001C15AC               3506  SEGMENT_BRIGHT_RED  EQU     $1c15ac
00002E48  =00161445               3507  SEGMENT_DARK_RED    EQU     $161445
00002E48  =00000003               3508  SEGMENT_WIDTH       EQU     3
00002E48  =0000000A               3509  SEGMENT_LENGTH      EQU     10
00002E48                          3510  
00002E48  =00000007               3511  NUM_BIT_FLAGS       EQU     7
00002E48                          3512  
00002E48  =00000001               3513  SHIFT_FOR_WORD      EQU     1
00002E48                          3514  
00002E48  =00000150               3515  SEVEN_SEGMENT_TIMER_OFFSET      EQU     336
00002E48                          3516  
00002E48  =000000F5               3517  BOMB_DISPLAY_X_START            EQU     $f5
00002E48  =00000136               3518  BOMB_DISPLAY_X_END              EQU     $136
00002E48                          3519  
00002E48  =00000245               3520  TIMER_DISPLAY_X_START           EQU     $245
00002E48  =00000286               3521  TIMER_DISPLAY_X_END             EQU     $286
00002E48                          3522  
00002E48  =00000091               3523  DISPLAY_Y_START                 EQU     $91
00002E48  =000000B9               3524  DISPLAY_Y_END                   EQU     $B9
00002E48                          3525  
00002E48  =00000000               3526  CLEAR_ADDRESS        EQU     0
00002E48  =FFFFFFFF               3527  RESET_VAL            EQU     $FFFFFFFF
00002E48                          3528  
00002E48                          3529  
00002E48                          3530  PrepDisplayRects
00002E48                          3531  
00002E48                          3532      ; set pen color for rects
00002E48  103C 0050               3533      move.b  #SET_PEN_COLOR,d0
00002E4C  7200                    3534      move.l  #BLACK,d1
00002E4E  4E4F                    3535      trap    #15
00002E50                          3536      
00002E50                          3537      ; set fill color for rects
00002E50  103C 0051               3538      move.b  #SET_FILL_COLOR,d0
00002E54  7200                    3539      move.l  #BLACK,d1
00002E56  4E4F                    3540      trap    #15
00002E58                          3541      
00002E58  4E75                    3542      rts
00002E5A                          3543      
00002E5A                          3544      
00002E5A                          3545  ResetAfterRectsDrawn
00002E5A                          3546  
00002E5A                          3547      ; reset fill color
00002E5A  103C 0051               3548      move.b  #SET_FILL_COLOR,d0
00002E5E  223C 00C0C0C0           3549      move.l  #LIGHT_GREY,d1
00002E64  4E4F                    3550      trap    #15
00002E66                          3551      
00002E66                          3552      ; set width
00002E66  103C 005D               3553      move.b  #SET_PEN_WIDTH,d0
00002E6A  7203                    3554      move.l  #SEGMENT_WIDTH,d1
00002E6C  4E4F                    3555      trap    #15  
00002E6E  4281                    3556      clr.l   d1
00002E70                          3557  
00002E70  4281                    3558      clr.l   d1  
00002E72  4282                    3559      clr.l   d2
00002E74  4283                    3560      clr.l   d3
00002E76  4284                    3561      clr.l   d4
00002E78                          3562      
00002E78  4E75                    3563      rts
00002E7A                          3564      
00002E7A                          3565  
00002E7A                          3566  DrawNextLine
00002E7A                          3567  
00002E7A                          3568      ; set positions
00002E7A  321E                    3569      move.w  (a6)+,d1
00002E7C  341E                    3570      move.w  (a6)+,d2
00002E7E  361E                    3571      move.w  (a6)+,d3
00002E80  381E                    3572      move.w  (a6)+,d4
00002E82                          3573      
00002E82                          3574      ; draw line
00002E82  4E4F                    3575      trap    #15
00002E84                          3576      
00002E84  4E75                    3577      rts
00002E86                          3578      
00002E86                          3579      
00002E86                          3580  DrawBombBox
00002E86                          3581      
00002E86                          3582      ; draw black filled rectangles
00002E86                          3583      
00002E86  4EB8 2E48               3584      jsr     PrepDisplayRects
00002E8A                          3585  
00002E8A                          3586      ; prep positions for bomb display rect
00002E8A  103C 0057               3587      move.b  #DRAW_FILLED_RECT,d0
00002E8E                          3588      
00002E8E  323C 00F5               3589      move.w  #BOMB_DISPLAY_X_START,d1 
00002E92  343C 0091               3590      move.w  #DISPLAY_Y_START,d2
00002E96  363C 0136               3591      move.w  #BOMB_DISPLAY_X_END,d3
00002E9A  383C 00B9               3592      move.w  #DISPLAY_Y_END,d4
00002E9E                          3593      
00002E9E                          3594      ; draw bomb display rect
00002E9E  4E4F                    3595      trap    #15
00002EA0                          3596      
00002EA0  4EB8 2E5A               3597      jsr     ResetAfterRectsDrawn
00002EA4                          3598      
00002EA4  4E75                    3599      rts
00002EA6                          3600      
00002EA6                          3601      
00002EA6                          3602  DrawTimerBox
00002EA6                          3603  
00002EA6  4EB8 2E48               3604      jsr     PrepDisplayRects
00002EAA                          3605  
00002EAA                          3606      ; shift positions right for timer box
00002EAA  223C 00000245           3607      move.l  #(BOMBS_OUTPUT_LEFT-1+SEVEN_SEGMENT_TIMER_OFFSET),d1 
00002EB0                          3608      
00002EB0  323C 0245               3609      move.w  #TIMER_DISPLAY_X_START,d1 
00002EB4  343C 0091               3610      move.w  #DISPLAY_Y_START,d2
00002EB8  363C 0286               3611      move.w  #TIMER_DISPLAY_X_END,d3
00002EBC  383C 00B9               3612      move.w  #DISPLAY_Y_END,d4
00002EC0                          3613       
00002EC0                          3614      ; draw timer display rect
00002EC0  103C 0057               3615      move.b  #DRAW_FILLED_RECT,d0
00002EC4  4E4F                    3616      trap    #15
00002EC6                          3617      
00002EC6  4EB8 2E5A               3618      jsr     ResetAfterRectsDrawn
00002ECA                          3619      
00002ECA  4E75                    3620      rts
00002ECC                          3621      
00002ECC                          3622      
00002ECC                          3623  UpdateSevenSegment  
00002ECC                          3624      
00002ECC                          3625      ; check if last recorded values are set
00002ECC  43F9 0000333E           3626      lea     Last_Recorded_Bomb_Display,a1
00002ED2  0C91 FFFFFFFF           3627      cmp.l   #RESET_VAL,(a1)
00002ED8  6700 0018               3628      beq     SetStartingSevenSegmentDisplays
00002EDC                          3629    
00002EDC                          3630      ; check if bombs have changed
00002EDC  43F9 0000333E           3631      lea     Last_Recorded_Bomb_Display,a1
00002EE2  2211                    3632      move.l  (a1),d1
00002EE4  43F8 1B90               3633      lea     Fake_Bomb_Counter,a1
00002EE8  B251                    3634      cmp.w   (a1),d1
00002EEA  6700 006C               3635      beq     TimerSevenSegmentDisplay
00002EEE  6600 0016               3636      bne     FakeBombSevenSegmentDisplay
00002EF2                          3637      
00002EF2                          3638  SetStartingSevenSegmentDisplays
00002EF2                          3639      
00002EF2  4EB8 2E86               3640      jsr     DrawBombBox
00002EF6  4EB8 2EA6               3641      jsr     DrawTimerBox
00002EFA                          3642      
00002EFA                          3643      ; value in main, kept there in case it's adjusted (15)
00002EFA  22BC 0000000F           3644      move.l  #NUM_BOMBS,(a1)
00002F00                          3645      
00002F00  227C 00000000           3646      move.l  #CLEAR_ADDRESS,a1
00002F06                          3647      
00002F06                          3648      
00002F06                          3649  FakeBombSevenSegmentDisplay 
00002F06                          3650  
00002F06                          3651      ; load in tables
00002F06  4BF9 00003056           3652      lea     Display_Segments,a5
00002F0C  4DF9 0000306E           3653      lea     Seven_Segment_Positions,a6
00002F12                          3654      
00002F12                          3655      ; check fake bomb counter
00002F12  43F8 1B90               3656      lea     Fake_Bomb_Counter,a1
00002F16  3611                    3657      move.w  (a1),d3
00002F18                          3658      
00002F18                          3659      * retrieve each place and call to draw segment:    
00002F18                          3660      * right: move d3 to d4 and divide by 10, use remainder as ones place and store not remainder in d3
00002F18                          3661      * middle: move d3 (updated) to d4 and divide by 10, use remainder as tens place and store not remainder in d3
00002F18                          3662      * left: move d3 to d4, should already be hundreds place
00002F18                          3663      
00002F18                          3664      
00002F18                          3665      ; - rightmost: mod d3 by 10
00002F18  3803                    3666      move.w  d3,d4
00002F1A  88FC 000A               3667      divu    #DECIMAL,d4
00002F1E                          3668      
00002F1E                          3669      ; save result in d3 for later
00002F1E  3604                    3670      move.w  d4,d3
00002F20  4244                    3671      clr.w   d4
00002F22                          3672      
00002F22                          3673      ; draw remainder
00002F22  4844                    3674      swap    d4
00002F24  4843                    3675      swap    d3
00002F26  4EB9 00003002           3676      jsr     DrawValue  
00002F2C                          3677      
00002F2C                          3678   
00002F2C                          3679      ; - middle: divide d3 by 10
00002F2C                          3680      
00002F2C  4243                    3681      clr.w   d3
00002F2E  4284                    3682      clr.l   d4
00002F30  4843                    3683      swap    d3
00002F32  3803                    3684      move.w  d3,d4
00002F34                          3685      
00002F34                          3686      ; get tens place
00002F34  88FC 000A               3687      divu    #DECIMAL,d4
00002F38  3604                    3688      move.w  d4,d3
00002F3A  4244                    3689      clr.w   d4
00002F3C  4844                    3690      swap    d4
00002F3E  4843                    3691      swap    d3
00002F40                          3692  
00002F40  4EB9 00003002           3693      jsr     DrawValue
00002F46                          3694      
00002F46                          3695      
00002F46                          3696      ; - leftmost: divide by 10 again
00002F46                          3697  
00002F46                          3698      ; get hundreds place
00002F46  4243                    3699      clr.w   d3
00002F48  4843                    3700      swap    d3
00002F4A  4284                    3701      clr.l   d4
00002F4C  3803                    3702      move.w  d3,d4
00002F4E  4EB9 00003002           3703      jsr     DrawValue
00002F54                          3704      
00002F54                          3705      
00002F54                          3706      ; repaint screen
00002F54  4EB8 2ABA               3707      jsr     RepaintScreen
00002F58                          3708      
00002F58                          3709      
00002F58                          3710  TimerSevenSegmentDisplay 
00002F58                          3711  
00002F58                          3712      ; load in last recorded time
00002F58  43F8 1B96               3713      lea     Current_Time,a1
00002F5C                          3714  
00002F5C                          3715      ; check if current time is set
00002F5C  2611                    3716      move.l  (a1),d3
00002F5E  B6BC FFFFFFFF           3717      cmp.l   #RESET_VAL,d3
00002F64  6700 000E               3718      beq     PrepUpdateTime
00002F68                          3719      
00002F68                          3720      ; check time elapsed
00002F68  4EB8 1D7E               3721      jsr     CheckTimeElapsed
00002F6C                          3722      
00002F6C                          3723      ; check if time elapsed is greater than last recorded time
00002F6C  B641                    3724      cmp.w   d1,d3
00002F6E                          3725      
00002F6E                          3726      ; if current time is not less than time elapsed, no need to update (return)
00002F6E  6D00 0004               3727      blt     PrepUpdateTime
00002F72  4E75                    3728      rts
00002F74                          3729      
00002F74                          3730      ; update current time to reflect on display
00002F74                          3731      
00002F74                          3732  PrepUpdateTime
00002F74                          3733  
00002F74                          3734      ; redraw timer box
00002F74  4EB8 2EA6               3735      jsr     DrawTimerBox
00002F78                          3736      
00002F78                          3737      ; reload in current time
00002F78  43F8 1B96               3738      lea Current_Time,a1
00002F7C  2611                    3739      move.l  (a1),d3
00002F7E  5283                    3740      add.l   #1,d3
00002F80                          3741      
00002F80                          3742      ; store updated current time
00002F80  2283                    3743      move.l  d3,(a1)
00002F82                          3744      
00002F82                          3745      ; check if clock loop has passed
00002F82  0C91 000003E7           3746      cmp.l   #CLOCK_LOOP,(a1)
00002F88                          3747      
00002F88                          3748      ; if clock loop has not passed, continue the clock
00002F88  6600 0006               3749      bne     ContinueClock
00002F8C                          3750      
00002F8C                          3751      ; restart time if it reaches 999
00002F8C  4EB8 1D64               3752      jsr     StartTime
00002F90                          3753      
00002F90                          3754  ContinueClock
00002F90                          3755      
00002F90                          3756      * retrieve each place and call to draw segment:
00002F90                          3757      * right: move d3 to d4 and divide by 10, use remainder as ones place and store not remainder in d3
00002F90                          3758      * middle: move d3 (updated) to d4 and divide by 10, use remainder as tens place and store not remainder in d3
00002F90                          3759      * left: move d3 to d4, should already be hundreds place
00002F90                          3760      
00002F90                          3761      ; make sure address is at right place
00002F90                          3762      ; load in tables
00002F90  4BF9 00003056           3763      lea     Display_Segments,a5
00002F96  4DF9 0000306E           3764      lea     Seven_Segment_Positions,a6
00002F9C  DCFC 0168               3765      adda    #TIMER_ADDRESS_OFFSET,a6    
00002FA0                          3766      
00002FA0                          3767      
00002FA0                          3768      ; - rightmost: mod d3 by 10
00002FA0                          3769       
00002FA0  3803                    3770      move.w  d3,d4
00002FA2  88FC 000A               3771      divu    #DECIMAL,d4
00002FA6                          3772      
00002FA6                          3773      ; save result in d3 for later
00002FA6  3604                    3774      move.w  d4,d3
00002FA8  4244                    3775      clr.w   d4
00002FAA                          3776      
00002FAA                          3777      ; draw remainder
00002FAA  4844                    3778      swap    d4
00002FAC  4843                    3779      swap    d3
00002FAE  4EB9 00003002           3780      jsr     DrawValue  
00002FB4                          3781      
00002FB4                          3782   
00002FB4                          3783      ; - middle: divide d3 by 10
00002FB4  0441 0014               3784      sub.w   #MIDDLE_OFFSET,d1
00002FB8                          3785      
00002FB8  4243                    3786      clr.w   d3
00002FBA  4284                    3787      clr.l   d4
00002FBC  4843                    3788      swap    d3
00002FBE  3803                    3789      move.w  d3,d4
00002FC0                          3790      
00002FC0                          3791      ; get tens place
00002FC0  88FC 000A               3792      divu    #DECIMAL,d4
00002FC4  3604                    3793      move.w  d4,d3
00002FC6  4244                    3794      clr.w   d4
00002FC8  4844                    3795      swap    d4
00002FCA  4843                    3796      swap    d3
00002FCC                          3797  
00002FCC  4EB9 00003002           3798      jsr     DrawValue
00002FD2                          3799      
00002FD2                          3800      
00002FD2                          3801      ; - leftmost: divide by 10 again
00002FD2                          3802      
00002FD2                          3803      ; get hundreds place
00002FD2  4243                    3804      clr.w   d3
00002FD4  4843                    3805      swap    d3
00002FD6  4284                    3806      clr.l   d4
00002FD8  3803                    3807      move.w  d3,d4
00002FDA  4EB9 00003002           3808      jsr     DrawValue
00002FE0                          3809      
00002FE0                          3810  
00002FE0                          3811  UpdateSevenSegmentDisplay
00002FE0                          3812      
00002FE0                          3813      ; repaint screen
00002FE0  4EB8 2ABA               3814      jsr     RepaintScreen
00002FE4                          3815      
00002FE4                          3816      ; start updating current time if at start time
00002FE4  0C91 00000000           3817      cmp.l   #START_TIME,(a1)
00002FEA  6600 0004               3818      bne     TimeAlreadyStarted
00002FEE  5291                    3819      add.l   #1,(a1)
00002FF0                          3820      
00002FF0                          3821  TimeAlreadyStarted
00002FF0  4EB8 2C40               3822      jsr     ClearRegisters
00002FF4  207C 00000000           3823      move.l  #CLEAR_ADDRESS,a0
00002FFA  227C 00000000           3824      move.l  #CLEAR_ADDRESS,a1
00003000                          3825      
00003000  4E75                    3826      rts
00003002                          3827      
00003002                          3828      
00003002                          3829      
00003002                          3830  DrawValue
00003002                          3831      
00003002                          3832      ; find appropriate segment combination
00003002  E34C                    3833      lsl.w   #SHIFT_FOR_WORD,d4
00003004  3A35 4800               3834      move.w  (a5,d4.l),d5
00003008                          3835      
00003008                          3836      ; restart counter
00003008  3E3C 0000               3837      move.w  #0,d7
0000300C                          3838  
0000300C                          3839  DrawValueLoop
0000300C                          3840      
0000300C                          3841      ; set pen color
0000300C  103C 0050               3842      move.b  #SET_PEN_COLOR,d0
00003010  223C 00161445           3843      move.l  #SEGMENT_DARK_RED,d1
00003016  4E4F                    3844      trap    #15
00003018                          3845      
00003018                          3846      ; move to different register to be manipulated
00003018  2C05                    3847      move.l  d5,d6
0000301A                          3848      
0000301A                          3849      ; shift to check bit
0000301A  EEAE                    3850      lsr.l   d7,d6
0000301C  CCBC 00000001           3851      and.l   #RIGHT_MOST_BIT,d6
00003022  BCBC 00000001           3852      cmp.l   #RIGHT_MOST_BIT,d6
00003028  6600 000E               3853      bne     OffBitColor
0000302C                          3854      
0000302C                          3855  OnBitColor
0000302C                          3856  
0000302C                          3857      ; set pen color
0000302C  103C 0050               3858      move.b  #SET_PEN_COLOR,d0
00003030  223C 001C15AC           3859      move.l  #SEGMENT_BRIGHT_RED,d1
00003036  4E4F                    3860      trap    #15
00003038                          3861  
00003038                          3862  OffBitColor    
00003038                          3863      ; shift d7 to be number of bits offset by address (and move back) TODO: optimize this
00003038                          3864      
00003038                          3865      ; prep to draw line
00003038  103C 0054               3866      move.b  #DRAW_LINE,d0
0000303C                          3867      
0000303C                          3868      ; each segment is made of two lines, so call twice
0000303C  4EB8 2E7A               3869      jsr     DrawNextLine
00003040  4EB8 2E7A               3870      jsr     DrawNextLine
00003044                          3871                         
00003044                          3872      ; loop through to draw appropriate segments
00003044  5247                    3873      add.w   #1,d7
00003046  BE3C 0007               3874      cmp.b   #(NUM_BIT_FLAGS),d7
0000304A  6700 0004               3875      beq     DrawThirdLine
0000304E  66BC                    3876      bne     DrawValueLoop                  
00003050                          3877      
00003050                          3878  DrawThirdLine
00003050                          3879  
00003050                          3880      ; last segment has a third line
00003050  4EB8 2E7A               3881      jsr     DrawNextLine
00003054                          3882      
00003054  4E75                    3883      rts
00003056                          3884      
00003056                          3885      
00003056                          3886      
00003056                          3887  Display_Segments
00003056                          3888          *1-7 for 0-9 on seven segment display (only uses first seven bits) extra 0s are for padding
00003056= 003F 0006 005B 0...     3889              dc.w    DISPLAY_ZERO,DISPLAY_ONE,DISPLAY_TWO,DISPLAY_THREE,DISPLAY_FOUR,DISPLAY_FIVE,DISPLAY_SIX,DISPLAY_SEVEN,DISPLAY_EIGHT,DISPLAY_NINE,0,0
0000306E                          3890              
0000306E                          3891  Seven_Segment_Positions
0000306E                          3892              * Bomb display right
0000306E= 012F 0097 0125 0...     3893              dc.w    $12f,$97,$125,$97, $12d,$98,$127,$98, $131,$99,$131,$a3, $130,$9a,$130,$a2, $131,$a7,$131,$b1, $130,$a8,$130,$b0, $12f,$b3,$125,$b3, $12d,$b2,$127,$b2
000030AE= 0123 00A7 0123 0...     3894              dc.w    $123,$a7,$123,$b1, $124,$a8,$124,$b0, $123,$99,$123,$a3, $124,$9a,$124,$a2, $12f,$a5,$125,$a5, $12d,$a6,$127,$a6, $12d,$a4,$127,$a4
000030E6                          3895              * Bomb display middle
000030E6= 011B 0097 0111 0...     3896              dc.w    $11b,$97,$111,$97, $119,$98,$113,$98, $11d,$99,$11d,$a3, $11c,$9a,$11c,$a2, $11d,$a7,$11d,$b1, $11c,$a8,$11c,$b0, $11b,$b3,$111,$b3, $119,$b2,$113,$b2
00003126= 010F 00A7 010F 0...     3897              dc.w    $10f,$a7,$10f,$b1, $110,$a8,$110,$b0, $10f,$99,$10f,$a3, $110,$9a,$110,$a2, $11b,$a5,$111,$a5, $119,$a6,$113,$a6, $119,$a4,$113,$a4
0000315E                          3898              * Bomb display left
0000315E= 0107 0097 00FD 0...     3899              dc.w    $107,$97,$fd,$97, $105,$98,$ff,$98, $109,$99,$109,$a3, $108,$9a,$108,$a2, $109,$a7,$109,$b1, $108,$a8,$108,$b0, $107,$b3,$fd,$b3, $105,$b2,$ff,$b2
0000319E= 00FB 00A7 00FB 0...     3900              dc.w    $fb,$a7,$fb,$b1, $fc,$a8,$fc,$b0, $fb,$99,$fb,$a3, $fc,$9a,$fc,$a2, $107,$a5,$fd,$a5, $105,$a6,$ff,$a6, $105,$a4,$ff,$a4
000031D6                          3901              * Timer display right
000031D6= 027F 0097 0275 0...     3902              dc.w    $27f,$97,$275,$97, $27d,$98,$277,$98, $281,$99,$281,$a3, $280,$9a,$280,$a2, $281,$a7,$281,$b1, $280,$a8,$280,$b0, $27f,$b3,$275,$b3, $27d,$b2,$277,$b2
00003216= 0273 00A7 0273 0...     3903              dc.w    $273,$a7,$273,$b1, $274,$a8,$274,$b0, $273,$99,$273,$a3, $274,$9a,$274,$a2, $27f,$a5,$275,$a5, $27d,$a6,$277,$a6, $27d,$a4,$277,$a4
0000324E                          3904              * Timer display middle
0000324E= 026B 0097 0261 0...     3905              dc.w    $26b,$97,$261,$97, $269,$98,$263,$98, $26d,$99,$26d,$a3, $26c,$9a,$26c,$a2, $26d,$a7,$26d,$b1, $26c,$a8,$26c,$b0, $26b,$b3,$261,$b3, $269,$b2,$263,$b2
0000328E= 025F 00A7 025F 0...     3906              dc.w    $25f,$a7,$25f,$b1, $260,$a8,$260,$b0, $25f,$99,$25f,$a3, $260,$9a,$260,$a2, $26b,$a5,$261,$a5, $269,$a6,$263,$a6, $269,$a4,$263,$a4
000032C6                          3907              * Timer display left
000032C6= 0257 0097 024D 0...     3908              dc.w    $257,$97,$24d,$97, $255,$98,$24f,$98, $259,$99,$259,$a3, $258,$9a,$258,$a2, $259,$a7,$259,$b1, $258,$a8,$258,$b0, $257,$b3,$24d,$b3, $255,$b2,$24f,$b2
00003306= 024B 00A7 024B 0...     3909              dc.w    $24b,$a7,$24b,$b1, $24c,$a8,$24c,$b0, $24b,$99,$24b,$a3, $24c,$9a,$24c,$a2, $257,$a5,$24d,$a5, $255,$a6,$24f,$a6, $255,$a4,$24f,$a4
0000333E                          3910  
0000333E                          3911  Last_Recorded_Bomb_Display
0000333E                          3912              ds.l    1
00003342                          3913      
00003342                          3914  
00003342                          3915  
00003342                          3916  
00003342                          3917  
00003342                          3918  
00003342                          3919  
00003342                          3920  
00003342                          3921  
00003342                          3922  
00003342                          3923  
00003342                          3924  -------------------- end include --------------------
00003342                          3925      include 'MenuScreen.X68'
00003342                          3926  
00003342                          3927  LoadMenu
00003342                          3928      
00003342                          3929      ; TODO: add arguments beforehand
00003342                          3930      
00003342                          3931    
00003342  4EB9 00003480           3932      jsr     LoadWindowsBackground
00003348  4EB8 267E               3933      jsr     DrawScreenBorder
0000334C                          3934          
0000334C  4E75                    3935      rts
0000334E                          3936      
0000334E                          3937      
0000334E                          3938  
0000334E                          3939  
0000334E                          3940  
0000334E                          3941  
0000334E                          3942  -------------------- end include --------------------
0000334E                          3943      include 'BitmapChunker.X68'
0000334E                          3944  
0000334E                          3945   
0000334E  =00000021               3946  SET_SCREEN                  EQU     33
0000334E  =00000050               3947  SET_PEN_COLOR               EQU     80
0000334E  =00000052               3948  DRAW_PIXEL                  EQU     82
0000334E  =00000056               3949  SET_POSITION                EQU     86
0000334E                          3950  
0000334E  =0000000A               3951  DATA_OFFSET                 EQU     $0A
0000334E  =00000012               3952  BMP_WIDTH_OFFSET            EQU     $12
0000334E  =00000016               3953  BMP_HEIGHT_OFFSET           EQU     $16
0000334E  =0000001C               3954  NUM_BITS_OFFSET             EQU     $1C
0000334E                          3955  
0000334E  =00000018               3956  TWENTYFOUR_BIT              EQU     24
0000334E  =00000003               3957  TWENTYFOUR_IN_BYTE          EQU     03
0000334E  =00000020               3958  THIRTYTWO_BIT               EQU     32
0000334E  =00000004               3959  THIRTYTWO_IN_BYTE           EQU     04
0000334E  =00000004               3960  PADDING_DIVISOR             EQU     04
0000334E                          3961  
0000334E  =00000000               3962  WINDOWS_CHUNK_LEFT          EQU     0 
0000334E  =00000000               3963  WINDOWS_CHUNK_TOP           EQU     0 
0000334E  =00000384               3964  WINDOWS_CHUNK_WIDTH         EQU     900
0000334E  =000002BC               3965  WINDOWS_CHUNK_HEIGHT        EQU     700
0000334E  =00000000               3966  WINDOWS_OUTPUT_LEFT         EQU     0
0000334E  =00000000               3967  WINDOWS_OUTPUT_TOP          EQU     0
0000334E                          3968  
0000334E  =000000E4               3969  RESTART_CHUNK_LEFT          EQU     228
0000334E  =00000068               3970  RESTART_CHUNK_TOP           EQU     104 
0000334E  =000001B5               3971  RESTART_CHUNK_WIDTH         EQU     437
0000334E  =000001FD               3972  RESTART_CHUNK_HEIGHT        EQU     509
0000334E  =000000E4               3973  RESTART_OUTPUT_LEFT         EQU     228
0000334E  =00000068               3974  RESTART_OUTPUT_TOP          EQU     104
0000334E                          3975  
0000334E  =00000000               3976  POPUP_CHUNK_LEFT            EQU     0 
0000334E  =00000000               3977  POPUP_CHUNK_TOP             EQU     0 
0000334E  =000001B4               3978  POPUP_CHUNK_WIDTH           EQU     436
0000334E  =00000016               3979  POPUP_CHUNK_HEIGHT          EQU     22
0000334E  =000000E4               3980  POPUP_OUTPUT_LEFT           EQU     228
0000334E  =0000006A               3981  POPUP_OUTPUT_TOP            EQU     106
0000334E                          3982  
0000334E  =00000002               3983  HOW_TO_CHUNK_LEFT           EQU     2
0000334E  =00000000               3984  HOW_TO_CHUNK_TOP            EQU     0 
0000334E  =000000E1               3985  HOW_TO_CHUNK_WIDTH          EQU     225
0000334E  =0000012B               3986  HOW_TO_CHUNK_HEIGHT         EQU     299
0000334E  =00000002               3987  HOW_TO_OUTPUT_LEFT          EQU     2
0000334E  =0000017C               3988  HOW_TO_OUTPUT_TOP           EQU     380
0000334E                          3989  
0000334E  =0000017C               3990  HOW_TO_COVER_CHUNK_TOP      EQU     380     
0000334E                          3991  
0000334E  =00000000               3992  SEVEN_SEGMENT_CHUNK_LEFT    EQU     0 
0000334E  =00000000               3993  SEVEN_SEGMENT_CHUNK_TOP     EQU     0 
0000334E  =00000040               3994  SEVEN_SEGMENT_CHUNK_WIDTH   EQU     64
0000334E  =00000027               3995  SEVEN_SEGMENT_CHUNK_HEIGHT  EQU     39
0000334E  =00000091               3996  SEVEN_SEGMENT_OUTPUT_TOP    EQU     START_Y-TOP_UI_HEIGHT-BORDER_OFFSET-1
0000334E  =000000F6               3997  BOMBS_OUTPUT_LEFT           EQU     START_X-BORDER_OFFSET
0000334E  =00000246               3998  TIMER_OUTPUT_LEFT           EQU     BOMBS_OUTPUT_LEFT+GRID_SIDE_LENGTH-(TILE_SIZE*2)+GRID_OUTER_OFFSET
0000334E                          3999      
0000334E  =00000000               4000  SMILEY_CHUNK_TOP            EQU     0
0000334E  =00000000               4001  SMILEY_NEUTRAL_OFFSET       EQU     0
0000334E  =00000023               4002  SMILEY_SHOCKED_OFFSET       EQU     35
0000334E  =00000046               4003  SMILEY_DEAD_OFFSET          EQU     70
0000334E  =00000023               4004  SMILEY_LENGTH               EQU     35
0000334E                          4005  
0000334E  =0000001B               4006  SUNGLASSES_CHUNK_HEIGHT     EQU     27
0000334E                          4007  
0000334E  =00000008               4008  ROTATION_VALUE              EQU     08 
0000334E                          4009  
0000334E  =00000000               4010  BMP_STACK                   EQU     00
0000334E  =00000004               4011  CHUNK_LEFT_STACK            EQU     04
0000334E  =00000006               4012  CHUNK_TOP_STACK             EQU     06
0000334E  =00000008               4013  CHUNK_WIDTH_STACK           EQU     08
0000334E  =0000000A               4014  CHUNK_HEIGHT_STACK          EQU     10
0000334E  =0000000C               4015  OUTPUT_LEFT_STACK           EQU     12
0000334E  =0000000E               4016  OUTPUT_TOP_STACK            EQU     14
0000334E  =00000014               4017  SP_OFFSET                   EQU     20
0000334E  =00000004               4018  SP_ARG                      EQU     04
0000334E                          4019      
0000334E                          4020      
0000334E                          4021  GetColor
0000334E  0C39 0020 002BB804      4022      cmp.b   #THIRTYTWO_BIT,(NumBits)
00003356  6700 0010               4023      beq     GetColor32    
0000335A                          4024      ; loop through to: find/set color
0000335A                          4025      ; 24-bit, loop 3 times
0000335A                          4026  GetColor24
0000335A  7002                    4027      move.l  #2,d0
0000335C                          4028  GetColor24Loop
0000335C  1219                    4029      move.b (a1)+,d1
0000335E  E189                    4030      lsl.l   #ROTATION_VALUE,d1
00003360  51C8 FFFA               4031      dbra    d0,GetColor24Loop
00003364  E099                    4032      ror.l   #ROTATION_VALUE,d1 
00003366  4E75                    4033      rts   
00003368                          4034      ; loop through to: find/set color
00003368                          4035      ; 32-bit, loop 2 times 
00003368                          4036  GetColor32
00003368  7001                    4037      move.l  #1,d0    
0000336A                          4038  GetColor32Loop
0000336A  1219                    4039      move.b  (a1)+,d1
0000336C  E189                    4040      lsl.l   #ROTATION_VALUE,d1
0000336E  51C8 FFFA               4041      dbra    d0,GetColor32Loop
00003372  1219                    4042      move.b  (a1)+,d1
00003374                          4043      ; last bit is for transparency, not used
00003374  1019                    4044      move.b  (a1)+,d0
00003376  4E75                    4045      rts
00003378                          4046  
00003378                          4047  LoadChunk
00003378  584F                    4048      add.w   #SP_ARG,sp                  ; stack pointer offset to make sure arguments are loaded in correctly
0000337A  342F 000E               4049      move.w  OUTPUT_TOP_STACK(sp),d2     ; y output onto display
0000337E  362F 000C               4050      move.w  OUTPUT_LEFT_STACK(sp),d3    ; x output onto display -- d3 to shift later into d1
00003382  3C2F 000A               4051      move.w  CHUNK_HEIGHT_STACK(sp),d6   ; chunk height
00003386  3E2F 0008               4052      move.w  CHUNK_WIDTH_STACK(sp),d7    ; chunk width
0000338A  382F 0006               4053      move.w  CHUNK_TOP_STACK(sp),d4      ; y value of chunk in bmp
0000338E  3A2F 0004               4054      move.w  CHUNK_LEFT_STACK(sp),d5     ; x value of chunk in bmp
00003392  206F 0000               4055      move.l  BMP_STACK(sp),a0            ; address of bmp file
00003396                          4056      
00003396                          4057      
00003396                          4058      ; store x chunk boundary (left + chunk width)
00003396  3003                    4059      move.w  d3,d0
00003398  D047                    4060      add.w   d7,d0
0000339A  33C0 002BB80C           4061      move.w  d0,(ChunkXBoundary)
000033A0                          4062      
000033A0                          4063      ; store y chunk boundary (top)
000033A0  33C2 002BB80E           4064      move.w  d2,(ChunkYBoundary)
000033A6                          4065   
000033A6                          4066      ; store value of bit (24/32)
000033A6  33E8 001C 002BB804      4067      move.w  NUM_BITS_OFFSET(a0),(NumBits)
000033AE                          4068      
000033AE                          4069      ; set bytes per color to 3 (24-bit)
000033AE  13FC 0003 002BB805      4070      move.b  #TWENTYFOUR_IN_BYTE,(BytesPerColor)
000033B6  0C39 0020 002BB804      4071      cmp.b   #THIRTYTWO_BIT,(NumBits)
000033BE  6600 0016               4072      bne     SetPadding      
000033C2                          4073  
000033C2                          4074      ; if 32-bits, set bytes per color from 3 to 4
000033C2  13FC 0004 002BB805      4075      move.b  #THIRTYTWO_IN_BYTE,(BytesPerColor)
000033CA  33FC 0000 002BB806      4076      move.w  #0,(Padding)
000033D2  6000 0018               4077      bra     Calculations
000033D6                          4078      
000033D6                          4079      ; account for padding to ensure address is always on word boundary
000033D6                          4080  SetPadding    
000033D6  3039 002BB808           4081      move.w  (BMPWidth),d0  
000033DC  E488                    4082      lsr.l   #2,d0
000033DE  C0BC 00000003           4083      and.l   #$0003,d0
000033E4  33C0 002BB806           4084      move.w  d0,(Padding)
000033EA  4280                    4085      clr.l   d0
000033EC                          4086  
000033EC                          4087  Calculations   
000033EC                          4088      ; address offset = (bmp height - chunk top - chunk height) * (bmp width * bytes per color) + (chunk left * bytes per color) + bmp offset
000033EC                          4089      
000033EC                          4090      ; calculate numbers of bytes per row
000033EC  1239 002BB805           4091      move.b  (BytesPerColor),d1
000033F2  C2F9 002BB808           4092      mulu    (BMPWidth),d1
000033F8                          4093      
000033F8                          4094      ; bmp height - chunk top - chunk height 
000033F8  3039 002BB80A           4095      move.w  (BMPHeight),d0
000033FE  9044                    4096      sub.w   d4,d0  
00003400  9046                    4097      sub.w   d6,d0
00003402                          4098  
00003402                          4099      ; multiple above value with number of bytes per row
00003402  C0C1                    4100      mulu    d1,d0    
00003404  4281                    4101      clr.l   d1
00003406                          4102      
00003406                          4103      ; calculate left offset and add to above
00003406  1239 002BB805           4104      move.b  (BytesPerColor),d1
0000340C  C2C5                    4105      mulu    d5,d1
0000340E  D081                    4106      add.l   d1,d0    
00003410  4281                    4107      clr.l   d1
00003412                          4108      
00003412                          4109      ; (bmp height - chunk top - chunk height) * padding
00003412  3239 002BB80A           4110      move.w  (BMPHeight),d1
00003418  9284                    4111      sub.l   d4,d1  
0000341A  9286                    4112      sub.l   d6,d1
0000341C  C2F9 002BB806           4113      mulu    (Padding),d1
00003422                          4114      
00003422                          4115      ; add to everything else
00003422  D081                    4116      add.l   d1,d0    
00003424  4281                    4117      clr.l   d1
00003426                          4118      
00003426                          4119      ; above + data offset
00003426  1228 000A               4120      move.b  DATA_OFFSET(a0),d1
0000342A  D081                    4121      add.l   d1,d0
0000342C                          4122    
0000342C                          4123      ; add everything to offset register
0000342C  2248                    4124      move.l  a0,a1
0000342E  D3C0                    4125      adda.l  d0,a1
00003430                          4126      
00003430                          4127      ; chunk x start = chunk left
00003430                          4128      ; chunk y start = chunk top + chunk height
00003430  D846                    4129      add.w   d6,d4
00003432                          4130      ; output x start = output left
00003432                          4131      ; output y start = output top + chunk height
00003432  D446                    4132      add.w   d6,d2
00003434                          4133      
00003434                          4134  DrawChunk
00003434                          4135      ; update color
00003434  4280                    4136      clr.l   d0
00003436  4EB8 334E               4137      jsr     GetColor
0000343A                          4138      
0000343A                          4139      ; set pen color
0000343A  103C 0050               4140      move.b  #SET_PEN_COLOR,d0
0000343E  4E4F                    4141      trap    #15   
00003440                          4142  
00003440  4281                    4143      clr.l   d1 
00003442                          4144     
00003442                          4145      ; draw pixel
00003442  103C 0052               4146      move.b  #DRAW_PIXEL,d0
00003446  3203                    4147      move.w  d3,d1
00003448  4E4F                    4148      trap    #15
0000344A                          4149      
0000344A  4281                    4150      clr.l   d1
0000344C                          4151      
0000344C                          4152      ; increment output x, check if it has reached chunk width
0000344C  5283                    4153      addi.l  #1,d3
0000344E  B679 002BB80C           4154      cmp.w   (ChunkXBoundary),d3
00003454  66DE                    4155      bne     DrawChunk
00003456                          4156      
00003456                          4157      ; account for padding to ensure address is on word boundary
00003456  D2F9 002BB806           4158      adda.w  (Padding),a1
0000345C                          4159      
0000345C                          4160      ; traverse necessary number of bytes    
0000345C                          4161      ; (bmp width - chunk width) * bytes per color
0000345C  3039 002BB808           4162      move.w  (BMPWidth),d0
00003462  9047                    4163      sub.w   d7,d0
00003464  1239 002BB805           4164      move.b  (BytesPerColor),d1
0000346A  C0C1                    4165      mulu    d1,d0
0000346C  D3C0                    4166      adda.l  d0,a1
0000346E                          4167          
0000346E                          4168      ; decrement y if x at limit and subtract chunk width from x, check if it has reachead chunk height limit
0000346E  9687                    4169      sub.l   d7,d3
00003470  5382                    4170      sub.l   #1,d2
00003472  B479 002BB80E           4171      cmp.w   (ChunkYBoundary),d2
00003478  66BA                    4172      bne     DrawChunk
0000347A                          4173      
0000347A                          4174      ; add sp offset back
0000347A  DEFC 0014               4175      add.w   #SP_OFFSET,sp
0000347E  4E75                    4176      rts  
00003480                          4177  
00003480                          4178  
00003480                          4179  
00003480                          4180  LoadWindowsBackground
00003480                          4181  
00003480                          4182      ; lea windows background for main menu
00003480  41F9 00003764           4183      lea     Windows_Background,a0
00003486                          4184      
00003486  4EB9 00003748           4185      jsr     StoreBMPDimensions
0000348C                          4186      
0000348C                          4187      ; load arguments onto stack
0000348C  9FFC 00000014           4188      sub.l   #SP_OFFSET,sp 
00003492  2F48 0000               4189      move.l  a0,BMP_STACK(sp)
00003496  3F7C 0000 0004          4190      move.w  #WINDOWS_CHUNK_LEFT,CHUNK_LEFT_STACK(sp)
0000349C  3F7C 0000 0006          4191      move.w  #WINDOWS_CHUNK_TOP,CHUNK_TOP_STACK(sp)
000034A2  3F7C 0384 0008          4192      move.w  #WINDOWS_CHUNK_WIDTH,CHUNK_WIDTH_STACK(sp)
000034A8  3F7C 02BC 000A          4193      move.w  #WINDOWS_CHUNK_HEIGHT,CHUNK_HEIGHT_STACK(sp)
000034AE  3F7C 0000 000C          4194      move.w  #WINDOWS_OUTPUT_LEFT,OUTPUT_LEFT_STACK(sp)
000034B4  3F7C 0000 000E          4195      move.w  #WINDOWS_OUTPUT_TOP,OUTPUT_TOP_STACK(sp) 
000034BA                          4196      
000034BA  4EB8 3378               4197      jsr     LoadChunk
000034BE  4E75                    4198      rts
000034C0                          4199      
000034C0                          4200  LoadPopUp
000034C0                          4201  
000034C0                          4202      ; lea windows background for main menu
000034C0  41F9 0026E5A4           4203      lea     Pop_Up,a0
000034C6                          4204      
000034C6  4EB9 00003748           4205      jsr     StoreBMPDimensions
000034CC                          4206      
000034CC                          4207      ; load arguments onto stack
000034CC  9FFC 00000014           4208      sub.l   #SP_OFFSET,sp 
000034D2  2F48 0000               4209      move.l  a0,BMP_STACK(sp)
000034D6  3F7C 0000 0004          4210      move.w  #POPUP_CHUNK_LEFT,CHUNK_LEFT_STACK(sp)
000034DC  3F7C 0000 0006          4211      move.w  #POPUP_CHUNK_TOP,CHUNK_TOP_STACK(sp)
000034E2  3F7C 01B4 0008          4212      move.w  #POPUP_CHUNK_WIDTH,CHUNK_WIDTH_STACK(sp)
000034E8  3F7C 0016 000A          4213      move.w  #POPUP_CHUNK_HEIGHT,CHUNK_HEIGHT_STACK(sp)
000034EE  3F7C 00E4 000C          4214      move.w  #POPUP_OUTPUT_LEFT,OUTPUT_LEFT_STACK(sp)
000034F4  3F7C 006A 000E          4215      move.w  #POPUP_OUTPUT_TOP,OUTPUT_TOP_STACK(sp) 
000034FA                          4216      
000034FA  4EB8 3378               4217      jsr     LoadChunk
000034FE  4E75                    4218      rts
00003500                          4219      
00003500                          4220  LoadStartSmiley
00003500                          4221  
00003500                          4222      ; lea windows background for main menu
00003500  41F9 0026ABAE           4223      lea     Smiley_Face,a0
00003506                          4224      
00003506  4EB9 00003748           4225      jsr     StoreBMPDimensions
0000350C                          4226      
0000350C                          4227      ; load arguments onto stack
0000350C  9FFC 00000014           4228      sub.l   #SP_OFFSET,sp 
00003512  2F48 0000               4229      move.l  a0,BMP_STACK(sp)
00003516  3F7C 0000 0004          4230      move.w  #SMILEY_NEUTRAL_OFFSET,CHUNK_LEFT_STACK(sp)
0000351C  3F7C 0000 0006          4231      move.w  #SMILEY_CHUNK_TOP,CHUNK_TOP_STACK(sp)
00003522  3F7C 0023 0008          4232      move.w  #SMILEY_LENGTH,CHUNK_WIDTH_STACK(sp)
00003528  3F7C 0023 000A          4233      move.w  #SMILEY_LENGTH,CHUNK_HEIGHT_STACK(sp)
0000352E  3F45 000C               4234      move.w  d5,OUTPUT_LEFT_STACK(sp)
00003532  3F42 000E               4235      move.w  d2,OUTPUT_TOP_STACK(sp) 
00003536                          4236      
00003536  4EB8 3378               4237      jsr     LoadChunk
0000353A  4E75                    4238      rts
0000353C                          4239      
0000353C                          4240  LoadNeutralSmiley
0000353C                          4241  
0000353C                          4242      ; lea windows background for main menu
0000353C  41F9 0026ABAE           4243      lea     Smiley_Face,a0
00003542                          4244      
00003542  4EB9 00003748           4245      jsr     StoreBMPDimensions
00003548                          4246      
00003548                          4247      ; load arguments onto stack
00003548  9FFC 00000014           4248      sub.l   #SP_OFFSET,sp 
0000354E  2F48 0000               4249      move.l  a0,BMP_STACK(sp)
00003552  3F7C 0006 0004          4250      move.w  #(SMILEY_NEUTRAL_OFFSET+SMILEY_EXPRESS_OFFSET),CHUNK_LEFT_STACK(sp)
00003558  3F7C 0006 0006          4251      move.w  #(SMILEY_CHUNK_TOP+SMILEY_EXPRESS_OFFSET),CHUNK_TOP_STACK(sp)
0000355E  3F7C 0017 0008          4252      move.w  #(SMILEY_LENGTH-(SMILEY_EXPRESS_OFFSET*2)),CHUNK_WIDTH_STACK(sp)
00003564  3F7C 0017 000A          4253      move.w  #(SMILEY_LENGTH-(SMILEY_EXPRESS_OFFSET*2)),CHUNK_HEIGHT_STACK(sp)
0000356A  3F45 000C               4254      move.w  d5,OUTPUT_LEFT_STACK(sp)
0000356E  3F42 000E               4255      move.w  d2,OUTPUT_TOP_STACK(sp) 
00003572                          4256      
00003572  4EB8 3378               4257      jsr     LoadChunk
00003576  4E75                    4258      rts
00003578                          4259      
00003578                          4260  LoadShockedSmiley
00003578                          4261  
00003578                          4262      ; lea windows background for main menu
00003578  41F9 0026ABAE           4263      lea     Smiley_Face,a0
0000357E                          4264      
0000357E  4EB9 00003748           4265      jsr     StoreBMPDimensions
00003584                          4266      
00003584                          4267      ; load arguments onto stack
00003584  9FFC 00000014           4268      sub.l   #SP_OFFSET,sp 
0000358A  2F48 0000               4269      move.l  a0,BMP_STACK(sp)
0000358E  3F7C 0029 0004          4270      move.w  #(SMILEY_SHOCKED_OFFSET+SMILEY_EXPRESS_OFFSET),CHUNK_LEFT_STACK(sp)
00003594  3F7C 0006 0006          4271      move.w  #(SMILEY_CHUNK_TOP+SMILEY_EXPRESS_OFFSET),CHUNK_TOP_STACK(sp)
0000359A  3F7C 0017 0008          4272      move.w  #(SMILEY_LENGTH-(SMILEY_EXPRESS_OFFSET*2)),CHUNK_WIDTH_STACK(sp)
000035A0  3F7C 0017 000A          4273      move.w  #(SMILEY_LENGTH-(SMILEY_EXPRESS_OFFSET*2)),CHUNK_HEIGHT_STACK(sp)
000035A6  3F45 000C               4274      move.w  d5,OUTPUT_LEFT_STACK(sp)
000035AA  3F42 000E               4275      move.w  d2,OUTPUT_TOP_STACK(sp) 
000035AE                          4276      
000035AE  4EB8 3378               4277      jsr     LoadChunk
000035B2  4E75                    4278      rts
000035B4                          4279      
000035B4                          4280  LoadDeadSmiley
000035B4                          4281  
000035B4                          4282      ; lea windows background for main menu
000035B4  41F9 0026ABAE           4283      lea     Smiley_Face,a0
000035BA                          4284      
000035BA  4EB9 00003748           4285      jsr     StoreBMPDimensions
000035C0                          4286      
000035C0                          4287      ; load arguments onto stack
000035C0  9FFC 00000014           4288      sub.l   #SP_OFFSET,sp 
000035C6  2F48 0000               4289      move.l  a0,BMP_STACK(sp)
000035CA  3F7C 004C 0004          4290      move.w  #(SMILEY_DEAD_OFFSET+SMILEY_EXPRESS_OFFSET),CHUNK_LEFT_STACK(sp)
000035D0  3F7C 0006 0006          4291      move.w  #(SMILEY_CHUNK_TOP+SMILEY_EXPRESS_OFFSET),CHUNK_TOP_STACK(sp)
000035D6  3F7C 0017 0008          4292      move.w  #(SMILEY_LENGTH-(SMILEY_EXPRESS_OFFSET*2)),CHUNK_WIDTH_STACK(sp)
000035DC  3F7C 0017 000A          4293      move.w  #(SMILEY_LENGTH-(SMILEY_EXPRESS_OFFSET*2)),CHUNK_HEIGHT_STACK(sp)
000035E2  3F45 000C               4294      move.w  d5,OUTPUT_LEFT_STACK(sp)
000035E6  3F42 000E               4295      move.w  d2,OUTPUT_TOP_STACK(sp) 
000035EA                          4296      
000035EA  4EB8 3378               4297      jsr     LoadChunk
000035EE  4E75                    4298      rts
000035F0                          4299      
000035F0                          4300  LoadSunglassesSmiley
000035F0                          4301  
000035F0                          4302      ; lea windows background for main menu
000035F0  41F9 0026ABAE           4303      lea     Smiley_Face,a0
000035F6                          4304      
000035F6  4EB9 00003748           4305      jsr     StoreBMPDimensions
000035FC                          4306      
000035FC                          4307      ; load arguments onto stack
000035FC  9FFC 00000014           4308      sub.l   #SP_OFFSET,sp 
00003602  2F48 0000               4309      move.l  a0,BMP_STACK(sp)
00003606  3F7C 0000 0004          4310      move.w  #SMILEY_NEUTRAL_OFFSET,CHUNK_LEFT_STACK(sp)
0000360C  3F7C 0000 0006          4311      move.w  #SMILEY_CHUNK_TOP,CHUNK_TOP_STACK(sp)
00003612  3F7C 0023 0008          4312      move.w  #SMILEY_LENGTH,CHUNK_WIDTH_STACK(sp)
00003618  3F7C 001B 000A          4313      move.w  #SUNGLASSES_CHUNK_HEIGHT,CHUNK_HEIGHT_STACK(sp)
0000361E  3F45 000C               4314      move.w  d5,OUTPUT_LEFT_STACK(sp)
00003622  3F42 000E               4315      move.w  d2,OUTPUT_TOP_STACK(sp) 
00003626                          4316      
00003626  4EB8 3378               4317      jsr     LoadChunk
0000362A  4E75                    4318      rts
0000362C                          4319      
0000362C                          4320  LoadMainMenuRestart
0000362C                          4321  
0000362C                          4322      ; lea windows background for main menu
0000362C  41F9 00003764           4323      lea     Windows_Background,a0
00003632                          4324      
00003632  4EB9 00003748           4325      jsr     StoreBMPDimensions
00003638                          4326      
00003638                          4327      ; load arguments onto stack
00003638  9FFC 00000014           4328      sub.l   #SP_OFFSET,sp 
0000363E  2F48 0000               4329      move.l  a0,BMP_STACK(sp)
00003642  3F7C 00E4 0004          4330      move.w  #RESTART_CHUNK_LEFT,CHUNK_LEFT_STACK(sp)
00003648  3F7C 0068 0006          4331      move.w  #RESTART_CHUNK_TOP,CHUNK_TOP_STACK(sp)
0000364E  3F7C 01B5 0008          4332      move.w  #RESTART_CHUNK_WIDTH,CHUNK_WIDTH_STACK(sp)
00003654  3F7C 01FD 000A          4333      move.w  #RESTART_CHUNK_HEIGHT,CHUNK_HEIGHT_STACK(sp)
0000365A  3F7C 00E4 000C          4334      move.w  #RESTART_OUTPUT_LEFT,OUTPUT_LEFT_STACK(sp)
00003660  3F7C 0068 000E          4335      move.w  #RESTART_OUTPUT_TOP,OUTPUT_TOP_STACK(sp) 
00003666                          4336      
00003666  4EB8 3378               4337      jsr     LoadChunk
0000366A  4E75                    4338      rts
0000366C                          4339      
0000366C                          4340  LoadInHowToPlay
0000366C                          4341  
0000366C                          4342      ; lea windows background for main menu
0000366C  41F9 00277C0E           4343      lea     How_To,a0
00003672                          4344      
00003672  4EB9 00003748           4345      jsr     StoreBMPDimensions
00003678                          4346      
00003678                          4347      ; load arguments onto stack
00003678  9FFC 00000014           4348      sub.l   #SP_OFFSET,sp 
0000367E  2F48 0000               4349      move.l  a0,BMP_STACK(sp)
00003682  3F7C 0002 0004          4350      move.w  #HOW_TO_CHUNK_LEFT,CHUNK_LEFT_STACK(sp)
00003688  3F7C 0000 0006          4351      move.w  #HOW_TO_CHUNK_TOP,CHUNK_TOP_STACK(sp)
0000368E  3F7C 00E1 0008          4352      move.w  #HOW_TO_CHUNK_WIDTH,CHUNK_WIDTH_STACK(sp)
00003694  3F7C 012B 000A          4353      move.w  #HOW_TO_CHUNK_HEIGHT,CHUNK_HEIGHT_STACK(sp)
0000369A  3F7C 0002 000C          4354      move.w  #HOW_TO_OUTPUT_LEFT,OUTPUT_LEFT_STACK(sp)
000036A0  3F7C 017C 000E          4355      move.w  #HOW_TO_OUTPUT_TOP,OUTPUT_TOP_STACK(sp) 
000036A6                          4356      
000036A6  49F8 1BA2               4357      lea     How_To_State,a4
000036AA  28BC 00000001           4358      move.l  #HOW_TO_ON,(a4)
000036B0  287C 00000000           4359      move.l  #CLEAR_ADDRESS,a4
000036B6                          4360      
000036B6  4EB8 3378               4361      jsr     LoadChunk
000036BA  4E75                    4362      rts
000036BC                          4363      
000036BC                          4364  LoadOutHowToPlay
000036BC                          4365  
000036BC                          4366      ; lea windows background for main menu
000036BC  41F9 00003764           4367      lea     Windows_Background,a0
000036C2                          4368      
000036C2  4EB9 00003748           4369      jsr     StoreBMPDimensions
000036C8                          4370      
000036C8                          4371      ; load arguments onto stack
000036C8  9FFC 00000014           4372      sub.l   #SP_OFFSET,sp 
000036CE  2F48 0000               4373      move.l  a0,BMP_STACK(sp)
000036D2  3F7C 0002 0004          4374      move.w  #HOW_TO_CHUNK_LEFT,CHUNK_LEFT_STACK(sp)
000036D8  3F7C 017C 0006          4375      move.w  #HOW_TO_COVER_CHUNK_TOP,CHUNK_TOP_STACK(sp)
000036DE  3F7C 00E1 0008          4376      move.w  #HOW_TO_CHUNK_WIDTH,CHUNK_WIDTH_STACK(sp)
000036E4  3F7C 012B 000A          4377      move.w  #HOW_TO_CHUNK_HEIGHT,CHUNK_HEIGHT_STACK(sp)
000036EA  3F7C 0002 000C          4378      move.w  #HOW_TO_OUTPUT_LEFT,OUTPUT_LEFT_STACK(sp)
000036F0  3F7C 017C 000E          4379      move.w  #HOW_TO_OUTPUT_TOP,OUTPUT_TOP_STACK(sp) 
000036F6                          4380      
000036F6  49F8 1BA2               4381      lea     How_To_State,a4
000036FA  28BC 00000000           4382      move.l  #HOW_TO_OFF,(a4)
00003700  287C 00000000           4383      move.l  #CLEAR_ADDRESS,a4
00003706                          4384      
00003706  4EB8 3378               4385      jsr     LoadChunk   
0000370A  4E75                    4386      rts
0000370C                          4387      
0000370C                          4388  LoadMystery
0000370C                          4389  
0000370C                          4390      ; lea windows background for main menu
0000370C  41F9 002BA4A8           4391      lea     Mystery_BMP,a0
00003712                          4392      
00003712  4EB9 00003748           4393      jsr     StoreBMPDimensions
00003718                          4394      
00003718                          4395      ; load arguments onto stack
00003718  9FFC 00000014           4396      sub.l   #SP_OFFSET,sp 
0000371E  2F48 0000               4397      move.l  a0,BMP_STACK(sp)
00003722  3F7C 0000 0004          4398      move.w  #SMILEY_NEUTRAL_OFFSET,CHUNK_LEFT_STACK(sp)
00003728  3F7C 0000 0006          4399      move.w  #SMILEY_CHUNK_TOP,CHUNK_TOP_STACK(sp)
0000372E  3F7C 0023 0008          4400      move.w  #SMILEY_LENGTH,CHUNK_WIDTH_STACK(sp)
00003734  3F7C 0023 000A          4401      move.w  #SMILEY_LENGTH,CHUNK_HEIGHT_STACK(sp)
0000373A  3F45 000C               4402      move.w  d5,OUTPUT_LEFT_STACK(sp)
0000373E  3F42 000E               4403      move.w  d2,OUTPUT_TOP_STACK(sp)  
00003742                          4404      
00003742                          4405      ; flash image
00003742  4EB8 3378               4406      jsr     LoadChunk 
00003746                          4407   
00003746  4E75                    4408      rts
00003748                          4409      
00003748                          4410  StoreBMPDimensions
00003748                          4411  
00003748                          4412      ; store value of bmp width
00003748  3228 0012               4413      move.w  BMP_WIDTH_OFFSET(a0),d1
0000374C  E059                    4414      ror.w   #ROTATION_VALUE,d1
0000374E  33C1 002BB808           4415      move.w  d1,(BMPWidth)
00003754                          4416      
00003754                          4417      ; store value of bmp height
00003754  3228 0016               4418      move.w  BMP_HEIGHT_OFFSET(a0),d1
00003758  E059                    4419      ror.w   #ROTATION_VALUE,d1
0000375A  33C1 002BB80A           4420      move.w  d1,(BMPHeight)
00003760                          4421      
00003760  4281                    4422      clr.l   d1
00003762                          4423      
00003762  4E75                    4424      rts
00003764                          4425  
00003764                          4426      
00003764                          4427  Windows_Background          INCBIN  "windowsbackground.bmp"
0026ABAE                          4428  Smiley_Face                 INCBIN  "smiley.bmp"
0026E5A4                          4429  Pop_Up                      INCBIN  "popup.bmp"
00277C0E                          4430  How_To                      INCBIN  "howtoplay.bmp"
002BA4A8                          4431  Mystery_BMP                 INCBIN  "mystery.bmp"
002BB802                          4432  
002BB802                          4433  Mystery_Padding         ds.w    1
002BB804                          4434  
002BB804                          4435  NumBits                 ds.b    1
002BB805                          4436  BytesPerColor           ds.b    1
002BB806                          4437  Padding                 ds.w    1
002BB808                          4438  BMPWidth                ds.w    1
002BB80A                          4439  BMPHeight               ds.w    1
002BB80C                          4440  ChunkXBoundary          ds.w    1
002BB80E                          4441  ChunkYBoundary          ds.w    1
002BB810                          4442  
002BB810                          4443  
002BB810                          4444  
002BB810                          4445  
002BB810                          4446  
002BB810                          4447  
002BB810                          4448  
002BB810                          4449  
002BB810                          4450  
002BB810                          4451  
002BB810                          4452  
002BB810                          4453  
002BB810                          4454  
002BB810                          4455  
002BB810                          4456  
002BB810                          4457  
002BB810                          4458  
002BB810                          4459  
002BB810                          4460  
002BB810                          4461  
002BB810                          4462  
002BB810                          4463  
002BB810                          4464  
002BB810                          4465  
002BB810                          4466  
002BB810                          4467  
002BB810                          4468  
002BB810                          4469  
002BB810                          4470  
002BB810                          4471  
002BB810                          4472  
002BB810                          4473  -------------------- end include --------------------
002BB810                          4474      include 'Sounds.X68'
002BB810                          4475  
002BB810  =00000049               4476  PLAY_SOUND              EQU     73
002BB810                          4477  ; used in multiple files, see main
002BB810  =00000000               4478  CLEAR_ADDRESS           EQU     0
002BB810                          4479  
002BB810                          4480  
002BB810                          4481  ; plays when a new game starts
002BB810                          4482  PlayStartSound
002BB810  103C 0049               4483      move.b  #PLAY_SOUND,d0
002BB814  43F9 002BB860           4484      lea     Start_Sound,a1
002BB81A  4E4F                    4485      trap    #15
002BB81C  227C 00000000           4486      move.l  #CLEAR_ADDRESS,a1
002BB822  4E75                    4487      rts
002BB824                          4488  
002BB824                          4489  ; plays when a tile/button is clicked
002BB824                          4490  PlayClickSound
002BB824  103C 0049               4491      move.b  #PLAY_SOUND,d0
002BB828  43F9 002BB86A           4492      lea     Click_Sound,a1
002BB82E  4E4F                    4493      trap    #15
002BB830  227C 00000000           4494      move.l  #CLEAR_ADDRESS,a1
002BB836  4E75                    4495      rts
002BB838                          4496  
002BB838                          4497  ; plays when the player clicks a bomb
002BB838                          4498  PlayLoseSound
002BB838  103C 0049               4499      move.b  #PLAY_SOUND,d0
002BB83C  43F9 002BB874           4500      lea     Lose_Sound,a1
002BB842  4E4F                    4501      trap    #15
002BB844  227C 00000000           4502      move.l  #CLEAR_ADDRESS,a1
002BB84A  4E75                    4503      rts
002BB84C                          4504  
002BB84C                          4505  ; plays when the player clicks all non-bomb tiles
002BB84C                          4506  PlayWinSound
002BB84C  103C 0049               4507      move.b  #PLAY_SOUND,d0
002BB850  43F9 002BB87D           4508      lea     Win_Sound,a1
002BB856  4E4F                    4509      trap    #15
002BB858  227C 00000000           4510      move.l  #CLEAR_ADDRESS,a1
002BB85E  4E75                    4511      rts
002BB860                          4512  
002BB860= 53 74 61 72 74 2E ...   4513  Start_Sound      dc.b      'Start.wav',0
002BB86A= 43 6C 69 63 6B 2E ...   4514  Click_Sound      dc.b      'Click.wav',0
002BB874= 4C 6F 73 65 2E 77 ...   4515  Lose_Sound       dc.b      'Lose.wav',0
002BB87D= 57 69 6E 2E 77 61 ...   4516  Win_Sound        dc.b      'Win.wav',0
002BB885                          4517  
002BB885                          4518  
002BB885                          4519  -------------------- end include --------------------
002BB885                          4520      
002BB885                          4521  
002BB885                          4522      END    START        ; last line of source

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ADDRESS_SPACE       2
ALLFLAGSCHECKED     29CC
ALLNONBOMBTILESCLICKED  248A
ALREADYCLICKED      1D62
ASCII_OFFSET        30
ATFLAGMAX           2D18
BFS_STACK           167A
BFS_STACK_OFFSET    1902
BLACK               0
BLANKTILEEVENT      25CA
BLANK_TILE          0
BMPHEIGHT           2BB80A
BMPWIDTH            2BB808
BMP_HEIGHT_OFFSET   16
BMP_STACK           0
BMP_WIDTH_OFFSET    12
BOMBS               13F0
BOMBS_OFFSET        1678
BOMBS_OUTPUT_LEFT   F6
BOMBTILEEVENT       2936
BOMB_DISPLAY_X_END  136
BOMB_DISPLAY_X_START  F5
BOMB_PEN_WIDTH      3
BOMB_TILE           A
BOMB_WIDTH          14
BORDER_OFFSET       4
BOTTOM_LEFT_TILE    16
BOTTOM_RIGHT_TILE   B
BOTTOM_TILE         1F
BYTESPERCOLOR       2BB805
CALCULATETILEPOSITION  1D06
CALCULATIONS        33EC
CHECKHOWTOPLAY      2B4E
CHECKHOWTOPLAYBOUNDBOTTOM  2B70
CHECKHOWTOPLAYBOUNDLEFT  2B68
CHECKHOWTOPLAYBOUNDRIGHT  2B7A
CHECKHOWTOPLAYBOUNDTOP  2B5E
CHECKIFAVAILABLE    1F2A
CHECKIFCURRENTBOMBTILE  2034
CHECKIFINCORRECTALREADYSTORED  2CA8
CHECKINCORRECTFLAGS  2996
CHECKLOOPCOUNT      27C6
CHECKMYSTERY        2B9C
CHECKREMAININGBOMBS  295C
CHECKREMAININGSTACK  2452
CHECKRESTART        2AC2
CHECKSURROUNDINGBOMBS  2044
CHECKSURROUNDINGTYPE  27D0
CHECKTIMEELAPSED    1D7E
CHECKXBOUNDBOTTOM   2B2E
CHECKXBOUNDLEFT     2B26
CHECKXBOUNDRIGHT    2B38
CHECKXBOUNDTOP      2B1C
CHECKXOUT           2B08
CHUNKXBOUNDARY      2BB80C
CHUNKYBOUNDARY      2BB80E
CHUNK_HEIGHT_STACK  A
CHUNK_LEFT_STACK    4
CHUNK_TOP_STACK     6
CHUNK_WIDTH_STACK   8
CLEARADDRESSES      2A8E
CLEARINCORRECTFLAGS  2A84
CLEARMEMORY         29D4
CLEARPREVIOUSMAP    2A74
CLEARREGISTERS      2C40
CLEAR_ADDRESS       0
CLEAR_SCREEN        B
CLEAR_SCREEN_VAL    FF00
CLEAR_TEXT_END_X    C8
CLEAR_TEXT_END_Y    14
CLEAR_TEXT_START    3
CLICKED_BOMB        1A
CLICKED_BOMB_ADDRESS  29D2
CLICKED_BOMB_COLOR  FE
CLICKED_BOMB_UNSTORED  FFFF
CLICKED_OFFSET      10
CLICKEVENTDONE      2478
CLICKEVENTHANDLER   241C
CLICK_SOUND         2BB86A
CLOCK_LOOP          3E7
CLOSEHOWTOPLAY      2534
COLOR_TABLE         25A2
CONTINUECHECKINGBOMBS  2014
CONTINUECLOCK       2F90
CONTINUECURRENTGAMESTATE  2C0A
COORDINATES         1168
CORRECT_FLAG        A
CURRENT_MOUSE_CLICK  1CCA
CURRENT_MOUSE_POSITION  1CC6
CURRENT_TIME        1B96
DARK_GREY           7C7C7C
DATA_OFFSET         A
DECIMAL             A
DECREMENTFAKEBOMBS  2C7C
DECREMENTREALBOMBS  2C8C
DEFAULT_FONT        0
DEFAULT_TEXT_COLOR  FFFFFF
DISPLAYBOMB         2958
DISPLAY_EIGHT       7F
DISPLAY_FIVE        6D
DISPLAY_FOUR        66
DISPLAY_NINE        6F
DISPLAY_ONE         6
DISPLAY_SEGMENTS    3056
DISPLAY_SEVEN       7
DISPLAY_SIX         7D
DISPLAY_STRING      E
DISPLAY_THREE       4F
DISPLAY_TWO         5B
DISPLAY_Y_END       B9
DISPLAY_Y_START     91
DISPLAY_ZERO        3F
DIVIDE_4            2
DOUBLE_BUFFERING_CODE  5C
DOUBLE_BUFFERING_OFF  10
DOUBLE_BUFFERING_ON  11
DOUBLE_CLICK_LEFT   9
DOUBLE_CLICK_RIGHT  A
DRAWBLANKTILE       1BA6
DRAWBOMB            2826
DRAWBOMBBOX         2E86
DRAWCHUNK           3434
DRAWCLICKED         2602
DRAWCLICKEDBOMB     2902
DRAWFLAG            2D1A
DRAWGRIDBOX         20F4
DRAWINCORRECTFLAG   2DFE
DRAWNEXTLINE        2E7A
DRAWNUMBERTILE      253C
DRAWOVERFLAG        2DCC
DRAWSCREENBORDER    267E
DRAWSMILEYSTART     2294
DRAWSMILEYSUNGLASSES  2328
DRAWSUNGLASSES      23C0
DRAWTHIRDLINE       3050
DRAWTIMERBOX        2EA6
DRAWVALUE           3002
DRAWVALUELOOP       300C
DRAW_ELLIPSE_FILLED  58
DRAW_FILLED_ELLIPSE  58
DRAW_FILLED_RECT    57
DRAW_LINE           54
DRAW_PIXEL          52
DRAW_RECT_FILLED    57
DRAW_RECT_UNFILLED  5A
DRAW_TEXT           5F
EIGHT_COLOR         808080
END_GAME            2
END_X               122
END_Y               F0
FAKEBOMBSEVENSEGMENTDISPLAY  2F06
FAKE_BOMB_COUNTER   1B90
FINDTILECLICKED     1CD2
FIRST_TILE_CLICK    1CCE
FIRST_TILE_CLICKED  1
FIRST_TILE_UNCLICKED  0
FIVE_COLOR          10181
FIXED_POINT_SHIFT   1
FLAGGED_OFFSET      20
FLAGTILEEVENT       2C52
FLAG_CLICK          2
FLAG_POLE_WIDTH     3
FLAG_RED            FE
FLAG_TILE           2
FLAG_WIDTH          5
FLOOD_FILL_AREA     59
FOUR_COLOR          800101
GAMELOADED          1E20
GAMELOSEEVENT       2492
GAMESTATEHANDLER    247A
GAMEWINEVENT        24AA
GAME_STATE          1B9E
GENERATEBOMB        1F1C
GENERATERANDOMNUMBER  1FF4
GETCOLOR            334E
GETCOLOR24          335A
GETCOLOR24LOOP      335C
GETCOLOR32          3368
GETCOLOR32LOOP      336A
GET_X_COORDINATE    2
GOMAINMENU          10F4
GRID_BOTTOM         258
GRID_BOTTOM_RIGHT   258028A
GRID_BOX_WIDTH      4
GRID_LEFT           FA
GRID_OUTER_OFFSET   10
GRID_RIGHT          28A
GRID_SIDE_LENGTH    190
GRID_TOP            C8
GRID_TOP_LEFT       C800FA
HALF_WIDTH          2
HIGHLIGHT           FCFCFC
HOW_TO              277C0E
HOW_TO_BUTTON_BOTTOM  2BC
HOW_TO_BUTTON_BOTTOM_RIGHT  2BC0042
HOW_TO_BUTTON_LEFT  0
HOW_TO_BUTTON_RIGHT  42
HOW_TO_BUTTON_TOP   2A8
HOW_TO_BUTTON_TOP_LEFT  2A80000
HOW_TO_CHUNK_HEIGHT  12B
HOW_TO_CHUNK_LEFT   2
HOW_TO_CHUNK_TOP    0
HOW_TO_CHUNK_WIDTH  E1
HOW_TO_COVER_CHUNK_TOP  17C
HOW_TO_LOADING_POS_X  2
HOW_TO_LOADING_POS_Y  299
HOW_TO_OFF          0
HOW_TO_ON           1
HOW_TO_OUTPUT_LEFT  2
HOW_TO_OUTPUT_TOP   17C
HOW_TO_STATE        1BA2
INCORRECT_FLAGS     1904
INCORRECT_FLAGS_OFFSET  1B8C
INCREMENTFAKEBOMBS  2D04
INCREMENTINCORRECTFLAGS  2CA0
IN_GAME             1
LAST_RECORDED_BOMB_DISPLAY  333E
LEFT_DIGIT          64
LEFT_TILE           D6
LIGHT_GREY          C0C0C0
LOADCHUNK           3378
LOADDEADSMILEY      35B4
LOADINGMAINMENU     1D8E
LOADINGNEWGAME      1E44
LOADING_STRING      1E9C
LOADINHOWTOPLAY     366C
LOADMAINMENURESTART  362C
LOADMAP             1EAC
LOADMENU            3342
LOADMYSTERY         370C
LOADNEUTRALSMILEY   353C
LOADOUTHOWTOPLAY    36BC
LOADPOPUP           34C0
LOADSHOCKEDSMILEY   3578
LOADSTARTSMILEY     3500
LOADSUNGLASSESSMILEY  35F0
LOADWINDOWSBACKGROUND  3480
LOOPCOLS            1CF6
LOOPFILLFLAG        2DAE
LOOPFLAGS           279E
LOOPROWS            1CE4
LOSE_SOUND          2BB874
MAINMENULOADED      1E0C
MAPALREADYGENERATED  1D40
MAP_END             1167
MAP_START           1116
MIDDLE_DIGIT        A
MIDDLE_OFFSET       14
MIDDLE_TILE         FF
MOUSEBOUNDBOTTOM    1C50
MOUSEBOUNDLEFT      1C48
MOUSEBOUNDRIGHT     1C5A
MOUSEBOUNDTOP       1C3E
MOUSEHELD           1C78
MOUSE_CLICK_DELAY   1
MULTIPLY_4          2
MYSTERYBOUNDBOTTOM  2BBE
MYSTERYBOUNDLEFT    2BB6
MYSTERYBOUNDRIGHT   2BC8
MYSTERYBOUNDTOP     2BAC
MYSTERY_BMP         2BA4A8
MYSTERY_BOTTOM      46
MYSTERY_BOTTOM_RIGHT  46003C
MYSTERY_LEFT        0
MYSTERY_PADDING     2BB802
MYSTERY_RIGHT       3C
MYSTERY_TOP         0
MYSTERY_TOP_LEFT    0
NON_BOMB_TILES      1B92
NO_BOMBS_LEFT       0
NO_CLICK            0
NO_FLAGS            0
NO_FLAGS_LEFT       0
NO_TILES_LEFT       0
NUMBER_TO_DISPLAY   25C6
NUMBITS             2BB804
NUM_BITS_OFFSET     1C
NUM_BIT_FLAGS       7
NUM_BOMBS           F
NUM_BYTES_SKIP      24
NUM_COL             9
NUM_FLAG_FILLS      2
NUM_ROW             9
NUM_TILES_SURROUNDING  8
OFFBITCOLOR         3038
ONBITCOLOR          302C
ONE_BEFORE          FFFFFFFF
ONE_COLOR           FD0000
ONE_SECOND          64
OPENHOWTOPLAY       252C
OUTPUT_LEFT_STACK   C
OUTPUT_TOP_STACK    E
PADDING             2BB806
PADDING_CHECK       2825
PADDING_COLOR       0
PADDING_DIVISOR     4
PEN_WIDTH           4
PLACEFLAG           2CD4
PLACINGFLAG         2C6C
PLAYCLICKSOUND      2BB824
PLAYLOSESOUND       2BB838
PLAYSTARTSOUND      2BB810
PLAYWINSOUND        2BB84C
PLAY_SOUND          49
POPUP_CHUNK_HEIGHT  16
POPUP_CHUNK_LEFT    0
POPUP_CHUNK_TOP     0
POPUP_CHUNK_WIDTH   1B4
POPUP_OUTPUT_LEFT   E4
POPUP_OUTPUT_TOP    6A
POP_UP              26E5A4
PREPDISPLAYRECTS    2E48
PREPINITIALBOARD    1FCC
PREPUPDATETIME      2F74
PRINTINITIALBOARD   20B0
PUSHADDRESS         27EE
PUSHEDSURROUNDINGTILES  27F6
PUSHSURROUNDINGTILES  2792
RANDOM_OFFSET       2098
READMOUSEINPUT      1BF4
READMOUSELOOP       1088
READ_MOUSE          3D
REAL_BOMB_COUNTER   1B8E
RELATIVE_TILE_POSITIONS  2078
REMOVINGFLAG        2CE6
REPAINTSCREEN       2ABA
REPAINT_SCREEN      5E
RESETAFTERRECTSDRAWN  2E5A
RESET_VAL           FFFFFFFF
RESTARTGAME         1012
RESTART_BOTTOM      B9
RESTART_BOTTOM_RIGHT  B901D2
RESTART_CHUNK_HEIGHT  1FD
RESTART_CHUNK_LEFT  E4
RESTART_CHUNK_TOP   68
RESTART_CHUNK_WIDTH  1B5
RESTART_GAME        3
RESTART_LEFT        1AA
RESTART_OUTPUT_LEFT  E4
RESTART_OUTPUT_TOP  68
RESTART_RIGHT       1D2
RESTART_TOP         91
RESTART_TOP_LEFT    9101AA
RETURNAFTERDRAWINGCLICKED  2676
RETURNTOCLICKEVENTHANDLER  259C
RETURNTOGAMELOOP    1CC4
RETURN_TIME         8
REVEALTILE          243A
REVEAL_CLICK        1
RIGHT_DIGIT         9
RIGHT_MOST_BIT      1
RIGHT_OFFSET        3C
RIGHT_TILE          6B
ROTATION_VALUE      8
SCREEN_BORDER_WIDTH  4
SCREEN_HEIGHT       2BC
SCREEN_OFFSET       4
SCREEN_VALUE        38402BC
SCREEN_WIDTH        384
SEGMENT_BRIGHT_RED  1C15AC
SEGMENT_DARK_RED    161445
SEGMENT_LENGTH      A
SEGMENT_WIDTH       3
SETBACKGROUND       1DDC
SETCOORDINATESRECT  25F2
SETCURRENTNUMBERTILE  1F9A
SETENDGAMESTATE     24C2
SETNUMBERTILES      1F6E
SETPADDING          33D6
SETSTARTINGSEVENSEGMENTDISPLAYS  2EF2
SET_FILL_COLOR      51
SET_PEN_COLOR       50
SET_PEN_WIDTH       5D
SET_POSITION        56
SET_SCREEN          21
SET_TEXT_COLOR      15
SEVEN_COLOR         0
SEVEN_SEGMENT_CHUNK_HEIGHT  27
SEVEN_SEGMENT_CHUNK_LEFT  0
SEVEN_SEGMENT_CHUNK_TOP  0
SEVEN_SEGMENT_CHUNK_WIDTH  40
SEVEN_SEGMENT_OUTPUT_TOP  91
SEVEN_SEGMENT_POSITIONS  306E
SEVEN_SEGMENT_TIMER_OFFSET  150
SHIFT_DELAY         7
SHIFT_FOR_BITS      2
SHIFT_FOR_WORD      1
SHIFT_FOUR          4
SHOWINCORRECTFLAG   298A
SIX_COLOR           808000
SKIPDRAWCLICKED     28FA
SMILEYDEAD          2308
SMILEYNEUTRAL       22E8
SMILEYSHOCKED       22C8
SMILEY_CHUNK_TOP    0
SMILEY_DEAD_OFFSET  46
SMILEY_EXPRESS_OFFSET  6
SMILEY_FACE         26ABAE
SMILEY_LENGTH       23
SMILEY_NEUTRAL_OFFSET  0
SMILEY_SHOCKED_OFFSET  23
SMILEY_X_OFFSET     4
SMILEY_Y_OFFSET     5
SP_ARG              4
SP_OFFSET           14
SS_TIMER_OFFSET     150
SS_X_OFFSET         3
SS_Y_OFFSET         6
START               1000
STARTAFTERGOMAIN    100C
STARTDELAY          1074
STARTING_OFFSET     2076
STARTING_SURROUNDING  2052
STARTING_TILE       204E
STARTTIME           1D64
START_BOTTOM        1D8
START_BOTTOM_RIGHT  1D801E3
START_LEFT          19F
START_RIGHT         1E3
START_SINCE_MIDNIGHT  1B9A
START_SOUND         2BB860
START_TIME          0
START_TOP           1A4
START_TOP_LEFT      1A4019F
START_X             FA
START_Y             C8
STOREBMPDIMENSIONS  3748
SUBTRACT_2          2
SUNGLASSESFALLING   234C
SUNGLASSESRECOIL    2382
SUNGLASSES_ACCELERATION  1
SUNGLASSES_CHUNK_HEIGHT  1B
SUNGLASSES_CURRENT_Y  2418
SUNGLASSES_EYE_LENGTH  8
SUNGLASSES_LENGTH   1A
SUNGLASSES_MID_LENGTH  6
SUNGLASSES_PEN_WIDTH  2
SUNGLASSES_SHADE_OFFSET  1
SUNGLASSES_SIDE_LENGTH  3
SUNGLASSES_VELOCITY  2414
SUNGLASSES_X        1B1
SUNGLASSES_Y_END    A0
SUNGLASSES_Y_RECOIL  9E
SUNGLASSES_Y_START  96
SURROUNDING_LENGTH  12
SURROUNDING_TILE_TO_CHECK  2824
TABLE_OF_VALIDATION  26EA
TEXT_POS_DIVISOR    4
TEXT_SETTINGS       2140001
THIRTYTWO_BIT       20
THIRTYTWO_IN_BYTE   4
THREE_COLOR         FE
TILES               1116
TILE_CLICKED        1
TILE_EIGTH          5
TILE_HALF           14
TILE_MAX_PLUS_ONE   9
TILE_POS_EIGHT      A
TILE_POS_FIVE       1
TILE_POS_FOUR       FFFFFFFF
TILE_POS_ONE        FFFFFFF6
TILE_POS_SEVEN      9
TILE_POS_SIX        8
TILE_POS_THREE      FFFFFFF8
TILE_POS_TWO        FFFFFFF7
TILE_QUARTER        A
TILE_SIXTEENTH      2
TILE_SIZE           28
TIMEALREADYSTARTED  2FF0
TIMERSEVENSEGMENTDISPLAY  2F58
TIMER_ADDRESS_OFFSET  168
TIMER_DISPLAY_X_END  286
TIMER_DISPLAY_X_START  245
TIMER_OUTPUT_LEFT   246
TIME_DELAY          17
TITLE_SCREEN        0
TOP_LEFT_TILE       D0
TOP_RIGHT_TILE      68
TOP_TILE            F8
TOP_UI_HEIGHT       32
TOP_UI_PEN          2
TOP_UI_WIDTH        190
TWENTYFOUR_BIT      18
TWENTYFOUR_IN_BYTE  3
TWO_COLOR           7E01
UNCLICKED_BOMB      A
UNSET_TILE          FF
UPDATEHOWTOSTATE    24CE
UPDATESEVENSEGMENT  2ECC
UPDATESEVENSEGMENTDISPLAY  2FE0
VALIDATESURROUNDINGTILES  26D4
WAITFORFIRSTCLICK   1048
WAITRESTART         10D2
WAITRESTARTBOUNDBOTTOM  2AE8
WAITRESTARTBOUNDLEFT  2AE0
WAITRESTARTBOUNDRIGHT  2AF2
WAITRESTARTBOUNDTOP  2AD6
WAITSTART           2C0C
WAITSTARTBOUNDBOTTOM  2C30
WAITSTARTBOUNDLEFT  2C2A
WAITSTARTBOUNDRIGHT  2C38
WAITSTARTBOUNDTOP   2C22
WINDOWS_BACKGROUND  3764
WINDOWS_BLUE        B04D10
WINDOWS_CHUNK_HEIGHT  2BC
WINDOWS_CHUNK_LEFT  0
WINDOWS_CHUNK_TOP   0
WINDOWS_CHUNK_WIDTH  384
WINDOWS_OUTPUT_LEFT  0
WINDOWS_OUTPUT_TOP  0
WINDOW_OFFSET       4
WIN_SOUND           2BB87D
X_BOTTOM            7F
X_BOTTOM_RIGHT      7F0294
X_LEFT              25A
X_RIGHT             294
X_TOP               6C
X_TOP_LEFT          6C025A
